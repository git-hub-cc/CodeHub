[
  {
    "name": "基础元字符 (Basic Metacharacters)",
    "summary": "构成正则表达式的最基本单元，用于匹配特定类型的单个字符。",
    "examples": [
      {
        "description": "匹配除换行符 `\\n` 之外的任意单个字符",
        "code": "a.b"
      },
      {
        "description": "匹配一个数字 (等同于 `[0-9]`)",
        "code": "\\d{3}"
      },
      {
        "description": "匹配一个单词字符（字母、数字、下划线，等同于 `[a-zA-Z0-9_]`)",
        "code": "\\w+"
      },
      {
        "description": "匹配一个空白字符（空格、制表符 `\\t`、换行符 `\\n` 等）",
        "code": "hello\\s+world"
      },
      {
        "description": "匹配一个非数字字符 (等同于 `[^0-9]`)",
        "code": "\\D+"
      },
      {
        "description": "匹配一个非单词字符 (等同于 `[^a-zA-Z0-9_]`)",
        "code": "\\W"
      },
      {
        "description": "匹配一个非空白字符",
        "code": "\\S+"
      }
    ],
    "notes": "这是构建任何正则表达式的基石。注意 `\\w` 是否包含其他语言的字符（如中文）取决于具体的正则引擎和Unicode支持情况。"
  },
  {
    "name": "字符集 (Character Sets)",
    "summary": "使用方括号 `[]` 定义一个字符集合，可以匹配集合中任意一个字符。",
    "examples": [
      {
        "description": "匹配 'a', 'b', 或 'c' 中的任意一个字符",
        "code": "gr[ae]y"
      },
      {
        "description": "匹配除 'a', 'b', 'c' 之外的任何字符（否定字符集）",
        "code": "[^0-9]"
      },
      {
        "description": "匹配任何从小写 'a' 到 'z' 的字母",
        "code": "[a-z]+"
      },
      {
        "description": "匹配任何从 '0' 到 '9' 的数字",
        "code": "[0-9]{4}"
      },
      {
        "description": "匹配任何字母、数字或下划线（等同于 `\\w`）",
        "code": "[a-zA-Z0-9_]+"
      }
    ],
    "notes": "字符集是精确控制字符范围的强大工具。在字符集内部，大多数元字符（如 `.`、`*`）会失去其特殊含义，但 `^`（在开头时表示否定）、`-`（用于表示范围）和 `\\`（用于转义）仍然特殊。"
  },
  {
    "name": "量词 (Quantifiers)",
    "summary": "指定前面的字符、字符集或分组可以出现的次数。",
    "examples": [
      {
        "description": "匹配零次或多次",
        "code": "go*gle"
      },
      {
        "description": "匹配一次或多次",
        "code": "go+gle"
      },
      {
        "description": "匹配零次或一次",
        "code": "colou?r"
      },
      {
        "description": "匹配恰好 n 次",
        "code": "\\d{4}"
      },
      {
        "description": "匹配至少 n 次",
        "code": "\\d{2,}"
      },
      {
        "description": "匹配 n 到 m 次",
        "code": "\\w{6,12}"
      },
      {
        "description": "懒惰匹配：在满足条件的情况下，尽可能少地匹配（例如匹配到第一个 'b'）",
        "code": "a.*?b"
      }
    ],
    "notes": "默认量词是“贪婪的”（Greedy），即尽可能多地匹配。在其后添加 `?` 可变为“懒惰的”（Lazy/Non-greedy），这在处理如 HTML 标签匹配时非常重要。"
  },
  {
    "name": "边界与锚点 (Anchors & Boundaries)",
    "summary": "匹配字符串中的特定位置，而不是字符本身。它们是“零宽度”的，不消耗任何字符。",
    "examples": [
      {
        "description": "匹配字符串的开头（在多行模式 `m` 下也匹配行的开头）",
        "code": "^start"
      },
      {
        "description": "匹配字符串的结尾（在多行模式 `m` 下也匹配行的结尾）",
        "code": "end$"
      },
      {
        "description": "匹配单词边界（单词字符 `\\w` 和非单词字符 `\\W` 之间的位置）",
        "code": "\\bword\\b"
      },
      {
        "description": "匹配非单词边界",
        "code": "\\Bword\\B"
      }
    ],
    "notes": "锚点对于确保整个字符串或特定部分的匹配至关重要。例如，`^\\d+$` 确保整个字符串是一个完整的数字，而不是包含数字的字符串。"
  },
  {
    "name": "分组与捕获 (Grouping & Capturing)",
    "summary": "使用圆括号 `()` 将多个字符组合成一个单元，并可以捕获匹配的内容供后续使用。",
    "examples": [
      {
        "description": "捕获分组：匹配 `ab` 重复一次或多次，并将每次匹配的 `ab` 捕获到组中",
        "code": "(ab)+"
      },
      {
        "description": "反向引用：引用第一个捕获组匹配的内容，例如匹配重复的单词",
        "code": "(\\w+)\\s+\\1"
      },
      {
        "description": "非捕获分组：只用于分组，不捕获内容，不创建反向引用，性能更好",
        "code": "(?:ab)+"
      },
      {
        "description": "命名捕获组：捕获内容并分配一个名称，便于引用",
        "code": "(?<year>\\d{4})-(?<month>\\d{2})"
      }
    ],
    "notes": "分组是构建复杂表达式和从文本中提取数据的核心。当只需要分组而不需要捕获时，使用非捕获分组 `(?:...)` 可以提高效率。"
  },
  {
    "name": "或逻辑 (Alternation)",
    "summary": "使用 `|` (管道符) 实现“或”逻辑，匹配多个模式中的一个。",
    "examples": [
      {
        "description": "匹配 'cat' 或 'dog'",
        "code": "I love my (cat|dog)"
      },
      {
        "description": "匹配多种图片文件后缀",
        "code": "\\.(jpg|jpeg|png)$"
      }
    ],
    "notes": "`|` 的优先级很低。要限制其作用范围，必须使用分组。例如 `gr(a|e)y` 匹配 'gray' 或 'grey'，而 `gray|ey` 匹配 'gray' 或 'ey'。"
  },
  {
    "name": "断言 (Lookarounds)",
    "summary": "匹配基于前后内容的位置，但这些内容本身不包含在最终的匹配结果中（零宽度断言）。",
    "examples": [
      {
        "description": "正向先行断言：匹配一个单词，该单词后面必须紧跟着一个点 `.`",
        "code": "\\w+(?=\\.)"
      },
      {
        "description": "负向先行断言：匹配一个数字，该数字后面不能再有其他数字",
        "code": "\\d+(?!\\d)"
      },
      {
        "description": "正向后行断言：匹配一个数字，该数字前面必须是美元符号 `$`",
        "code": "(?<=\\$)\\d+"
      },
      {
        "description": "负向后行断言：匹配单词 'happy'，但前提是它前面没有 'un'",
        "code": "(?<!un)happy"
      }
    ],
    "notes": "断言是处理复杂上下文依赖匹配的强大高级特性。注意，并非所有正则引擎都支持后行断言，或者对后行断言中的模式长度有限制。"
  },
  {
    "name": "模式修饰符 (Flags / Modifiers)",
    "summary": "在正则表达式之外设置，用于改变整个表达式的匹配行为。",
    "examples": [
      {
        "description": "忽略大小写匹配 (ignoreCase)",
        "code": "/apple/i"
      },
      {
        "description": "全局匹配，查找所有匹配项，而不仅仅是第一个 (global)",
        "code": "/a/g"
      },
      {
        "description": "多行模式，使 `^` 和 `$` 可以匹配每行的开头和结尾 (multiline)",
        "code": "/^line/m"
      },
      {
        "description": "点号通配模式，使 `.` (点) 可以匹配包括换行符在内的任意字符 (dotAll / singleline)",
        "code": "/a.b/s"
      }
    ],
    "notes": "这些修饰符的语法在不同语言/环境中可能略有不同。例如，在 Python 中使用 `re.IGNORECASE`，在 JavaScript 中使用 `/.../gmi`。"
  },
  {
    "name": "转义特殊字符 (Escaping)",
    "summary": "当需要匹配元字符本身（如 `.`、`*`、`(` 等）时，必须在其前面加上反斜杠 `\\` 进行转义。",
    "examples": [
      {
        "description": "匹配一个真正的点字符",
        "code": "example\\.com"
      },
      {
        "description": "匹配一个星号",
        "code": "5 \\* 2"
      },
      {
        "description": "匹配圆括号",
        "code": "\\(text\\)"
      },
      {
        "description": "匹配一个反斜杠",
        "code": "C:\\\\Users"
      }
    ],
    "notes": "这是初学者最容易犯错的地方之一。忘记转义会导致表达式行为与预期完全不符。在字符集 `[]` 内部，需要转义的字符较少。"
  },
  {
    "name": "常用实例 (Common Patterns)",
    "summary": "一些在日常开发中非常实用、可以直接使用的正则表达式模式。",
    "examples": [
      {
        "description": "匹配电子邮件地址",
        "code": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}"
      },
      {
        "description": "匹配URL",
        "code": "https?://(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)"
      },
      {
        "description": "匹配IPv4地址",
        "code": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
      },
      {
        "description": "匹配日期 (YYYY-MM-DD)",
        "code": "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
      },
      {
        "description": "匹配中国大陆手机号",
        "code": "^1[3-9]\\d{9}$"
      },
      {
        "description": "匹配18位中国身份证号",
        "code": "^[1-9]\\d{5}(18|19|20)\\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])\\d{3}[\\dX]$"
      }
    ],
    "notes": "这些实例是常见模式的通用实现，可能无法覆盖所有边缘情况。在生产环境中使用前，请根据具体需求进行测试和调整。"
  }
]