[
  {
    "name": "Get-Help",
    "summary": "获取有关 PowerShell 命令、函数、脚本和概念的帮助信息",
    "examples": [
      {
        "description": "获取 'Get-Process' 命令的基本帮助信息",
        "code": "Get-Help Get-Process"
      },
      {
        "description": "获取 'Get-Command' 命令的完整帮助内容，包括参数、输入/输出类型等",
        "code": "Get-Help Get-Command -Full"
      },
      {
        "description": "仅显示 'Get-Service' 命令的示例用法",
        "code": "Get-Help Get-Service -Examples"
      },
      {
        "description": "在默认浏览器中打开 'Get-Item' 命令的在线帮助文档",
        "code": "Get-Help Get-Item -Online"
      },
      {
        "description": "查找有关“about_Automatic_Variables”的概念性帮助",
        "code": "Get-Help about_Automatic_Variables"
      }
    ],
    "notes": "这是PowerShell学习和日常使用中最关键的命令。务必熟悉其用法。首次使用 `Get-Help` 时，系统可能会提示你运行 `Update-Help` 来下载最新的帮助文件。了解 'about_*' 主题有助于理解PowerShell的核心概念，如别名、管道、变量等。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Update-Help",
    "summary": "从 Internet 下载并安装最新的帮助文件，或更新本地计算机上可用的帮助文件",
    "examples": [
      {
        "description": "更新所有已安装模块的帮助文件",
        "code": "Update-Help"
      },
      {
        "description": "强制更新所有帮助文件，即使已是最新",
        "code": "Update-Help -Force"
      },
      {
        "description": "更新指定模块（例如 Az.Accounts 模块）的帮助文件",
        "code": "Update-Help -Module Az.Accounts"
      },
      {
        "description": "将帮助文件下载到指定路径，用于离线安装",
        "code": "Update-Help -SourcePath 'C:\\Temp\\HelpFiles' -DestinationPath 'C:\\Program Files\\PowerShell\\Modules'"
      }
    ],
    "notes": "强烈建议定期运行此命令，以确保你获得的帮助信息是最新的。这对于新的Cmdlet、参数或功能尤为重要。某些模块的帮助文件可能不提供在线更新，或需要特定权限。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Get-Command",
    "summary": "获取计算机上安装的所有命令（Cmdlet、函数、别名、应用程序）的信息",
    "examples": [
      {
        "description": "列出所有可用的 PowerShell Cmdlet 和函数",
        "code": "Get-Command"
      },
      {
        "description": "查找名称中包含“Service”的所有命令",
        "code": "Get-Command *Service*"
      },
      {
        "description": "查找属于 'Microsoft.PowerShell.Management' 模块的所有 Cmdlet",
        "code": "Get-Command -Module Microsoft.PowerShell.Management"
      },
      {
        "description": "仅查找类型为 'Cmdlet' 的命令",
        "code": "Get-Command -CommandType Cmdlet"
      },
      {
        "description": "查找 Cmdlet 'Get-Process' 的详细信息，包括其别名和参数集",
        "code": "Get-Command Get-Process -Syntax"
      }
    ],
    "notes": "这是发现PowerShell功能的关键命令。使用通配符 (`*`) 和 `-CommandType`、`-Module` 等参数可以精确查找你需要的命令。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Get-Module",
    "summary": "获取已导入或可在本地计算机上导入的 PowerShell 模块",
    "examples": [
      {
        "description": "列出所有已加载到当前会话中的模块",
        "code": "Get-Module"
      },
      {
        "description": "列出所有在 PowerShell 环境中可用的模块（无论是否已加载）",
        "code": "Get-Module -ListAvailable"
      },
      {
        "description": "查找名称中包含“ActiveDirectory”的所有可用模块",
        "code": "Get-Module -ListAvailable -Name *ActiveDirectory*"
      },
      {
        "description": "获取指定模块的详细信息，包括其导出命令",
        "code": "Get-Module -Name Az.Accounts | Select-Object -ExpandProperty ExportedCommands"
      }
    ],
    "notes": "模块是PowerShell命令的集合。许多高级功能（如AD、Azure管理）需要先安装并导入相应的模块才能使用。如果 `Get-Module -ListAvailable` 没有显示你期望的模块，你可能需要使用 `Install-Module` 来安装它。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Import-Module",
    "summary": "将一个或多个模块添加到当前会话",
    "examples": [
      {
        "description": "导入 ActiveDirectory 模块",
        "code": "Import-Module ActiveDirectory"
      },
      {
        "description": "导入指定路径的模块，并强制重新加载（如果已加载）",
        "code": "Import-Module 'C:\\MyModules\\MyCustomModule.psm1' -Force"
      },
      {
        "description": "导入模块时，仅导入特定的命令",
        "code": "Import-Module ActiveDirectory -Function Get-ADUser, Set-ADUser"
      },
      {
        "description": "导入模块并禁止输出警告信息",
        "code": "Import-Module Az.Storage -ErrorAction SilentlyContinue"
      }
    ],
    "notes": "导入模块后，其导出的命令即可在当前PowerShell会话中使用。大多数常用的内置模块会自动加载，但一些特定领域的模块（如ActiveDirectory、Azure等）需要手动导入。对于某些模块，可能需要以管理员身份运行PowerShell。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Install-Module",
    "summary": "从在线库（如 PowerShell Gallery）安装 PowerShell 模块",
    "examples": [
      {
        "description": "从 PowerShell Gallery 安装 'Az' 模块到当前用户的模块路径",
        "code": "Install-Module -Name Az -Scope CurrentUser"
      },
      {
        "description": "强制安装或重新安装 'Pester' 模块，不进行确认提示",
        "code": "Install-Module -Name Pester -Force"
      },
      {
        "description": "安装特定版本的模块",
        "code": "Install-Module -Name Az.Accounts -RequiredVersion 2.7.0"
      },
      {
        "description": "从指定仓库安装模块",
        "code": "Install-Module -Name MyCustomModule -Repository MyPrivateGallery"
      }
    ],
    "notes": "这是获取和安装第三方或微软官方模块的重要命令。它通常需要互联网连接。默认的模块源是 PowerShell Gallery。你可能需要先安装 'NuGet' 包提供程序 (`Install-PackageProvider -Name NuGet -Force`)才能使用此命令。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Find-Module",
    "summary": "在注册的存储库中查找 PowerShell 模块",
    "examples": [
      {
        "description": "查找所有可用的模块",
        "code": "Find-Module"
      },
      {
        "description": "查找名称中包含 'AD' 的模块",
        "code": "Find-Module *AD*"
      },
      {
        "description": "查找 'Az' 模块的预发行版本",
        "code": "Find-Module -Name Az -AllowPrerelease"
      },
      {
        "description": "查找并显示 'Az.Compute' 模块的详细信息",
        "code": "Find-Module -Name Az.Compute | Format-List *"
      }
    ],
    "notes": "此命令用于探索 PowerShell Gallery 或其他已注册的模块仓库。它只查找模块，不进行安装。通常在安装模块前，先用此命令确认模块的名称和可用版本。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Get-PSDrive",
    "summary": "获取当前会话中的 PowerShell 驱动器信息",
    "examples": [
      {
        "description": "列出所有可用的 PowerShell 驱动器",
        "code": "Get-PSDrive"
      },
      {
        "description": "仅列出文件系统驱动器（如 C:, D:）",
        "code": "Get-PSDrive -PSProvider FileSystem"
      },
      {
        "description": "查看注册表 HKLM 驱动器的详细信息",
        "code": "Get-PSDrive HKLM"
      },
      {
        "description": "查找网络映射驱动器",
        "code": "Get-PSDrive -PSProvider FileSystem | Where-Object {$_.DisplayRoot -like '\\\\'}"
      }
    ],
    "notes": "PowerShell 驱动器是PowerShell提供程序映射的逻辑驱动器，不仅包括磁盘驱动器，还包括注册表（HKLM:, HKCU:）、环境变量（Env:）、函数（Function:）等。这使得你可以用统一的方式（例如 `Get-ChildItem`）来管理不同类型的数据存储。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Get-PSProvider",
    "summary": "获取当前会话中的 PowerShell 提供程序",
    "examples": [
      {
        "description": "列出所有可用的 PowerShell 提供程序",
        "code": "Get-PSProvider"
      },
      {
        "description": "获取 'FileSystem' 提供程序的详细信息",
        "code": "Get-PSProvider FileSystem"
      }
    ],
    "notes": "PowerShell 提供程序是一个 .NET 程序，它允许你访问特定数据存储（如文件系统、注册表、证书存储、环境变量等）中的数据。每个提供程序都提供一组 Cmdlet 来管理其数据存储中的项。这是PowerShell统一管理不同数据源的基础。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Get-ChildItem",
    "summary": "获取指定位置中的项和子项（文件和目录），类似于 Unix/Linux 的 `ls` 或 Windows 的 `dir`",
    "examples": [
      {
        "description": "列出当前目录的所有文件和文件夹",
        "code": "Get-ChildItem"
      },
      {
        "description": "递归列出指定目录（包括子目录）中的所有文件和文件夹",
        "code": "Get-ChildItem -Path 'C:\\Windows' -Recurse -Depth 2"
      },
      {
        "description": "仅列出当前目录下的文件",
        "code": "Get-ChildItem -File"
      },
      {
        "description": "仅列出当前目录下的文件夹",
        "code": "Get-ChildItem -Directory"
      },
      {
        "description": "显示包括隐藏文件和系统文件在内的所有文件和文件夹",
        "code": "Get-ChildItem -Path 'C:\\' -Force"
      },
      {
        "description": "列出当前目录下所有以 '.log' 结尾的文件",
        "code": "Get-ChildItem -Path '.' -Include '*.log'"
      },
      {
        "description": "列出当前目录下所有名称不包含 'temp' 的文件和文件夹",
        "code": "Get-ChildItem -Exclude *temp*"
      }
    ],
    "notes": "常用别名：`ls`, `dir`, `gci`。这是文件系统操作中最基础和最常用的命令。它的输出是对象，因此可以方便地通过管道 (`|`) 传递给其他命令进行筛选、排序或进一步处理。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Set-Location",
    "summary": "设置当前工作位置（目录），类似于 Unix/Linux 的 `cd` 或 Windows 的 `chdir`",
    "examples": [
      {
        "description": "将当前工作目录更改为 'C:\\Temp'",
        "code": "Set-Location C:\\Temp"
      },
      {
        "description": "返回到上一个工作目录",
        "code": "Set-Location -"
      },
      {
        "description": "更改到注册表路径 HKLM:\\SOFTWARE",
        "code": "Set-Location HKLM:\\SOFTWARE"
      },
      {
        "description": "使用别名更改目录",
        "code": "cd C:\\Users\\Public\\Documents"
      }
    ],
    "notes": "常用别名：`cd`, `chdir`。此命令不仅适用于文件系统路径，也适用于其他 PowerShell 驱动器（如注册表、证书存储等）。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Get-Location",
    "summary": "获取当前 PowerShell 工作位置（目录）",
    "examples": [
      {
        "description": "显示当前工作目录的完整路径",
        "code": "Get-Location"
      },
      {
        "description": "使用别名获取当前工作目录",
        "code": "pwd"
      },
      {
        "description": "获取当前位置的路径名称",
        "code": "(Get-Location).Path"
      }
    ],
    "notes": "常用别名：`pwd`。它用于确认你当前在PowerShell文件系统或其他PSDrive中的位置。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "New-Item",
    "summary": "创建新的文件、目录或注册表项等",
    "examples": [
      {
        "description": "在当前目录下创建一个新文件 'newfile.txt'",
        "code": "New-Item -Name \"newfile.txt\" -ItemType File"
      },
      {
        "description": "在指定路径创建一个新文件夹 'MyFolder'",
        "code": "New-Item -Path 'C:\\Temp' -Name \"MyFolder\" -ItemType Directory"
      },
      {
        "description": "创建一个新的注册表项 'HKCU:\\Software\\MyApplication'",
        "code": "New-Item -Path HKCU:\\Software -Name \"MyApplication\""
      },
      {
        "description": "创建文件并立即写入内容",
        "code": "New-Item -Path 'C:\\Temp\\log.txt' -ItemType File -Value \"Initial log entry\""
      }
    ],
    "notes": "`-ItemType` 参数是关键，它定义了要创建的项的类型。支持的文件系统项类型包括 `File` 和 `Directory`。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Remove-Item",
    "summary": "删除一个或多个文件、目录、注册表项或其他PowerShell项",
    "examples": [
      {
        "description": "删除文件 'oldfile.txt'",
        "code": "Remove-Item -Path \"oldfile.txt\""
      },
      {
        "description": "删除非空目录 'MyOldFolder' 及其所有内容，不进行确认提示",
        "code": "Remove-Item -Path 'C:\\Temp\\MyOldFolder' -Recurse -Force"
      },
      {
        "description": "删除所有以 '.bak' 结尾的文件",
        "code": "Remove-Item -Path '*.bak'"
      },
      {
        "description": "删除注册表项 'HKCU:\\Software\\MyApplication' 及其所有子项和值",
        "code": "Remove-Item -Path HKCU:\\Software\\MyApplication -Recurse"
      }
    ],
    "notes": "在使用 `-Recurse` 或 `-Force` 参数时要格外小心，因为它们会跳过安全提示，可能导致数据丢失。`-Recurse` 用于删除非空目录。`-Force` 用于强制删除受保护或隐藏的文件。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Copy-Item",
    "summary": "复制一个或多个文件或目录到指定位置",
    "examples": [
      {
        "description": "将文件 'source.txt' 复制到 'destination.txt'",
        "code": "Copy-Item -Path \"source.txt\" -Destination \"destination.txt\""
      },
      {
        "description": "将文件 'report.docx' 复制到 'C:\\Archives' 目录",
        "code": "Copy-Item -Path \"report.docx\" -Destination 'C:\\Archives'"
      },
      {
        "description": "递归复制整个目录 'source_dir' 及其内容到 'dest_dir'",
        "code": "Copy-Item -Path 'C:\\source_dir' -Destination 'D:\\dest_dir' -Recurse"
      },
      {
        "description": "复制所有以 '.log' 结尾的文件到备份目录",
        "code": "Copy-Item -Path '*.log' -Destination 'C:\\LogBackup'"
      }
    ],
    "notes": "`-Recurse` 参数对于复制文件夹及其内容至关重要。如果目标文件或文件夹已存在，`Copy-Item` 默认会抛出错误，除非你使用 `-Force` 参数进行覆盖。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Move-Item",
    "summary": "移动一个或多个文件或目录到指定位置",
    "examples": [
      {
        "description": "将文件 'temp.txt' 移动到 'C:\\Archive' 目录",
        "code": "Move-Item -Path \"temp.txt\" -Destination 'C:\\Archive'"
      },
      {
        "description": "将目录 'OldFolder' 移动到 'NewLocation' 并重命名为 'ArchivedFolder'",
        "code": "Move-Item -Path 'C:\\OldFolder' -Destination 'D:\\NewLocation\\ArchivedFolder'"
      },
      {
        "description": "移动所有以 '.tmp' 结尾的文件到回收站 (PowerShell Core 7+)",
        "code": "Move-Item -Path '*.tmp' -Destination 'Trash:'"
      }
    ],
    "notes": "移动操作相当于先复制再删除原文件。如果目标位置已存在同名文件或目录，默认会报错，除非你使用 `-Force` 参数进行覆盖或合并。对于文件夹，它会移动整个文件夹，无需 `-Recurse`。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Rename-Item",
    "summary": "重命名文件、目录或其他PowerShell项",
    "examples": [
      {
        "description": "将文件 'report.pdf' 重命名为 'final_report.pdf'",
        "code": "Rename-Item -Path \"report.pdf\" -NewName \"final_report.pdf\""
      },
      {
        "description": "将文件夹 'OldData' 重命名为 'ArchivedData'",
        "code": "Rename-Item -Path 'C:\\OldData' -NewName \"ArchivedData\""
      },
      {
        "description": "重命名注册表项 'HKCU:\\Software\\MyApplication' 为 'MyNewApp'",
        "code": "Rename-Item -Path HKCU:\\Software\\MyApplication -NewName \"MyNewApp\""
      }
    ],
    "notes": "此命令只改变项的名称，不改变其位置。如果新名称已经存在，默认会报错。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Get-Content",
    "summary": "获取文件或项的内容，类似于 Unix/Linux 的 `cat`",
    "examples": [
      {
        "description": "显示文件 'logfile.txt' 的所有内容",
        "code": "Get-Content -Path \"logfile.txt\""
      },
      {
        "description": "显示文件 'config.ini' 的前5行内容",
        "code": "Get-Content -Path \"config.ini\" -TotalCount 5"
      },
      {
        "description": "显示文件 'messages.log' 的最后10行内容",
        "code": "Get-Content -Path \"messages.log\" -Tail 10"
      },
      {
        "description": "实时监控文件 'events.log' 的新内容（类似于 `tail -f`）",
        "code": "Get-Content -Path \"events.log\" -Wait"
      },
      {
        "description": "以单行字符串形式获取文件所有内容 (而非字符串数组)",
        "code": "Get-Content -Path \"script.ps1\" -Raw"
      }
    ],
    "notes": "对于大文件，`-TotalCount` 和 `-Tail` 参数非常有用。`-Wait` 参数会保持 Cmdlet 运行，直到按 Ctrl+C 退出，或者文件被删除。`-Raw` 在处理大文件时性能更好，因为它避免了按行分割。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Set-Content",
    "summary": "将指定内容写入文件或项，如果文件不存在则创建，如果存在则覆盖",
    "examples": [
      {
        "description": "创建或覆盖文件 'info.txt'，写入“Hello PowerShell!”",
        "code": "Set-Content -Path \"info.txt\" -Value \"Hello PowerShell!\""
      },
      {
        "description": "将变量的内容写入文件",
        "code": "$text = \"这是多行文本`n第二行文本\"\nSet-Content -Path \"multiline.txt\" -Value $text"
      },
      {
        "description": "将文件 'source.txt' 的内容复制到 'target.txt' (覆盖)",
        "code": "Get-Content -Path \"source.txt\" | Set-Content -Path \"target.txt\""
      }
    ],
    "notes": "此命令会覆盖目标文件的现有内容。如果要追加内容，请使用 `Add-Content`。可以指定编码方式，例如 `-Encoding UTF8`。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Add-Content",
    "summary": "将指定内容追加到文件或项的末尾",
    "examples": [
      {
        "description": "向文件 'logfile.txt' 追加一行日志",
        "code": "Add-Content -Path \"logfile.txt\" -Value \"[$(Get-Date)] Script executed successfully.\""
      },
      {
        "description": "从另一个文件追加内容",
        "code": "Get-Content -Path \"part1.txt\" | Add-Content -Path \"full_document.txt\""
      }
    ],
    "notes": "如果目标文件不存在，`Add-Content` 会自动创建它。此命令非常适合日志记录和数据追加任务。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Clear-Content",
    "summary": "从文件或项中删除所有内容，但不删除文件本身",
    "examples": [
      {
        "description": "清空文件 'temp.log' 的内容",
        "code": "Clear-Content -Path \"temp.log\""
      },
      {
        "description": "清空指定目录下所有 '.tmp' 文件的内容",
        "code": "Get-ChildItem -Path 'C:\\Temp' -Filter '*.tmp' | Clear-Content"
      }
    ],
    "notes": "此命令对于清理日志文件或临时文件很有用，而无需删除和重新创建文件。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Test-Path",
    "summary": "确定路径的所有元素是否存在",
    "examples": [
      {
        "description": "检查文件 'script.ps1' 是否存在",
        "code": "Test-Path -Path \"script.ps1\""
      },
      {
        "description": "检查目录 'C:\\MyFolder' 是否存在",
        "code": "Test-Path -Path 'C:\\MyFolder'"
      },
      {
        "description": "检查注册表项是否存在",
        "code": "Test-Path -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion"
      },
      {
        "description": "检查路径是否存在并且是一个文件",
        "code": "Test-Path -Path \"report.pdf\" -PathType Leaf"
      },
      {
        "description": "检查路径是否存在并且是一个目录",
        "code": "Test-Path -Path 'C:\\Temp' -PathType Container"
      }
    ],
    "notes": "返回布尔值 (`$true` 或 `$false`)。常用于脚本中，在执行操作前验证路径是否存在，防止错误。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Split-Path",
    "summary": "返回指定路径的组成部分，如父目录、文件名或扩展名",
    "examples": [
      {
        "description": "获取文件路径的父目录",
        "code": "Split-Path -Path 'C:\\Folder\\Subfolder\\file.txt'"
      },
      {
        "description": "获取文件路径的文件名部分",
        "code": "Split-Path -Path 'C:\\Folder\\Subfolder\\file.txt' -Leaf"
      },
      {
        "description": "获取文件路径的扩展名",
        "code": "Split-Path -Path 'C:\\Folder\\file.txt' -Extension"
      },
      {
        "description": "获取路径的根目录或限定符",
        "code": "Split-Path -Path 'C:\\Folder\\file.txt' -Qualifier"
      }
    ],
    "notes": "对于处理和解析路径字符串非常有用，尤其是在脚本中动态构建或分析文件路径时。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Join-Path",
    "summary": "将路径和子路径组合成一个单一的路径",
    "examples": [
      {
        "description": "组合父目录和文件名",
        "code": "Join-Path -Path 'C:\\Logs' -ChildPath '2023\\app.log'"
      },
      {
        "description": "组合多个路径部分",
        "code": "Join-Path -Path 'C:\\Users' -ChildPath 'Administrator' | Join-Path -ChildPath 'Documents'"
      },
      {
        "description": "使用数组作为子路径",
        "code": "Join-Path -Path 'C:\\Data' -ChildPath ('Sub1', 'File.txt')"
      }
    ],
    "notes": "此命令会自动处理路径分隔符（如 `/` 或 `\\`），确保生成正确的路径字符串，避免手动拼接时可能出现的错误。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Select-Object",
    "summary": "选择对象的指定属性或唯一对象，或选择对象的一个子集",
    "examples": [
      {
        "description": "从进程对象中选择进程名、ID和CPU使用率",
        "code": "Get-Process | Select-Object Name, Id, CPU"
      },
      {
        "description": "选择所有进程，并展开 'Modules' 属性以查看所有模块",
        "code": "Get-Process | Select-Object Name, Id, -ExpandProperty Modules"
      },
      {
        "description": "获取前5个运行时间最长的进程",
        "code": "Get-Process | Sort-Object StartTime | Select-Object -Last 5 Name, StartTime"
      },
      {
        "description": "选择唯一的操作系统版本字符串",
        "code": "Get-WmiObject Win32_OperatingSystem | Select-Object -ExpandProperty Caption -Unique"
      },
      {
        "description": "通过计算属性添加一个自定义列",
        "code": "Get-Process | Select-Object Name, Id, @{Name='WorkingSetMB'; Expression={$_.WS / 1MB}}"
      }
    ],
    "notes": "这是PowerShell管道中最常用的命令之一，用于定制输出。它允许你精确控制对象显示哪些数据，甚至可以创建新的计算属性。常用别名：`select`。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Where-Object",
    "summary": "根据属性值筛选对象，只传递符合指定条件的对象",
    "examples": [
      {
        "description": "筛选出所有正在运行的服务",
        "code": "Get-Service | Where-Object {$_.Status -eq 'Running'}"
      },
      {
        "description": "查找 CPU 使用率大于 10 的进程",
        "code": "Get-Process | Where-Object {$_.CPU -gt 10}"
      },
      {
        "description": "查找名称以 'win' 开头或以 'def' 结尾的服务",
        "code": "Get-Service | Where-Object {$_.Name -like 'win*' -or $_.Name -like '*def'}"
      },
      {
        "description": "查找文件名与正则表达式匹配的文件",
        "code": "Get-ChildItem | Where-Object {$_.Name -match '^a.*\\.txt$'}"
      },
      {
        "description": "查找在过去24小时内修改过的文件",
        "code": "Get-ChildItem | Where-Object {$_.LastWriteTime -ge (Get-Date).AddDays(-1)}"
      }
    ],
    "notes": "常用别名：`where`, `?`。这是管道中用于数据筛选的核心命令。`$_` 是一个自动变量，代表当前管道中的对象。支持多种比较运算符 (`-eq`, `-ne`, `-gt`, `-ge`, `-lt`, `-le`, `-like`, `-notlike`, `-match`, `-notmatch`, `-contains`, `-notcontains`, `-in`, `-notin`, `-is`, `-isnot`) 和逻辑运算符 (`-and`, `-or`, `-xor`, `-not`).",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Sort-Object",
    "summary": "根据一个或多个属性的值对对象进行排序",
    "examples": [
      {
        "description": "按服务名称升序排序",
        "code": "Get-Service | Sort-Object Name"
      },
      {
        "description": "按 CPU 使用率降序排序进程",
        "code": "Get-Process | Sort-Object CPU -Descending"
      },
      {
        "description": "按名称和CPU使用率进行多级排序",
        "code": "Get-Process | Sort-Object Name, CPU -Descending"
      },
      {
        "description": "按文件大小降序排序，并仅显示前10个最大文件",
        "code": "Get-ChildItem -File | Sort-Object Length -Descending | Select-Object -First 10 Name, Length"
      }
    ],
    "notes": "常用别名：`sort`。默认是升序排序。当指定多个属性时，排序优先级从左到右。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Group-Object",
    "summary": "根据指定属性的值对对象进行分组",
    "examples": [
      {
        "description": "按服务状态对服务进行分组",
        "code": "Get-Service | Group-Object Status"
      },
      {
        "description": "按进程名称对进程进行分组，并计算每个组中的项数",
        "code": "Get-Process | Group-Object ProcessName | Select-Object Name, Count"
      },
      {
        "description": "按文件扩展名对文件进行分组，并显示每个组的文件名",
        "code": "Get-ChildItem -File | Group-Object Extension"
      },
      {
        "description": "按文件扩展名分组，但不显示每个组的详细元素",
        "code": "Get-ChildItem -File | Group-Object Extension -NoElement"
      }
    ],
    "notes": "常用别名：`group`。此命令对于数据分析和汇总非常有用。输出对象包含 `Name` (组的属性值)、`Count` (该组中的项数) 和 `Group` (该组中的原始对象集合)。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Measure-Object",
    "summary": "计算对象的数值属性或计算集合中的对象数",
    "examples": [
      {
        "description": "计算当前目录下的文件和文件夹总数",
        "code": "Get-ChildItem | Measure-Object"
      },
      {
        "description": "计算所有正在运行进程的内存（WS）总和",
        "code": "Get-Process | Measure-Object -Property WS -Sum"
      },
      {
        "description": "计算所有文件的总大小、平均大小、最小和最大大小",
        "code": "Get-ChildItem -File | Measure-Object -Property Length -Sum -Average -Minimum -Maximum"
      },
      {
        "description": "计算文件总行数",
        "code": "(Get-Content -Path \"script.ps1\" | Measure-Object -Line).Lines"
      }
    ],
    "notes": "常用别名：`measure`。此命令对于获取统计数据非常方便，可以用于数值属性（如文件大小、进程内存）或简单的计数。它还可以用于计算文件的行数、字数和字符数（使用 `-Line`, `-Word`, `-Character`）。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Format-Table",
    "summary": "将命令的输出格式化为表格",
    "examples": [
      {
        "description": "以表格形式显示正在运行的服务，并自动调整列宽",
        "code": "Get-Service | Where-Object {$_.Status -eq 'Running'} | Format-Table -AutoSize"
      },
      {
        "description": "仅显示进程名称、ID和CPU，并强制换行显示过长的内容",
        "code": "Get-Process | Format-Table Name, ID, CPU -Wrap"
      },
      {
        "description": "显示进程的私有工作集内存 (Private Working Set) 和句柄数，按指定列名格式化",
        "code": "Get-Process | Format-Table Name, @{Label='PrivateWS(MB)'; Expression={$_.PrivateWorkingSet / 1MB; FormatString='N2'}}, Handles -AutoSize"
      }
    ],
    "notes": "常用别名：`ft`。`Format-Table` 是一个“格式化”Cmdlet，它将输入对象转换为文本格式以供显示。这意味着它应该通常是管道中的最后一个命令，因为其输出不再是对象，无法被其他Cmdlet进一步处理。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Format-List",
    "summary": "将命令的输出格式化为列表，每个属性显示在新行上",
    "examples": [
      {
        "description": "以列表形式显示指定服务的详细信息",
        "code": "Get-Service -Name 'Spooler' | Format-List *"
      },
      {
        "description": "显示所有进程的名称和ID",
        "code": "Get-Process | Format-List Name, ID"
      }
    ],
    "notes": "常用别名：`fl`。与 `Format-Table` 类似，`Format-List` 也是一个格式化Cmdlet，应作为管道中的最后一步。它特别适用于显示具有许多属性的对象，或当表格格式无法清晰显示所有数据时。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Format-Custom",
    "summary": "使用自定义视图格式化命令的输出",
    "examples": [
      {
        "description": "使用为服务对象定义的自定义视图格式化服务输出",
        "code": "Get-Service | Format-Custom"
      }
    ],
    "notes": "此命令允许高级用户通过XML格式化文件 (.ps1xml) 定义自定义显示视图。在日常使用中不常用，但在需要特定、复杂输出格式时非常强大。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Out-GridView",
    "summary": "将命令的输出发送到交互式、可排序和可筛选的网格视图窗口",
    "examples": [
      {
        "description": "在网格视图中显示所有正在运行的进程",
        "code": "Get-Process | Out-GridView"
      },
      {
        "description": "在网格视图中显示服务，并允许用户选择多个服务对象返回到管道中",
        "code": "Get-Service | Out-GridView -PassThru"
      }
    ],
    "notes": "这是一个非常方便的工具，用于可视化大量数据。用户可以在图形界面中进行排序、筛选和搜索。`-PassThru` 参数允许用户在网格视图中选择一个或多个对象，并将它们传递回PowerShell管道进行进一步处理。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Get-Member",
    "summary": "获取对象的所有成员（属性和方法）的信息",
    "examples": [
      {
        "description": "显示 'Get-Process' 命令输出对象的成员",
        "code": "Get-Process | Get-Member"
      },
      {
        "description": "仅显示进程对象的属性",
        "code": "Get-Process | Get-Member -MemberType Property"
      },
      {
        "description": "仅显示进程对象的方法",
        "code": "Get-Process | Get-Member -MemberType Method"
      },
      {
        "description": "查看字符串对象的可用属性和方法",
        "code": "'Hello World' | Get-Member"
      }
    ],
    "notes": "常用别名：`gm`。这是理解PowerShell对象模型和发现对象能力的**最重要**命令。通过它，你可以知道一个对象有哪些可用的数据（属性）和可以执行的操作（方法），这是编写有效脚本的基础。",
    "shell_type": "PowerShell Cmdlet",
    "category": "Core General",
    "applies_to": "Windows/AD/Azure"
  },
  {
    "name": "Write-Host",
    "summary": "将自定义输出写入控制台 (Writes custom output to the console)",
    "examples": [
      {
        "description": "在控制台输出一条简单消息",
        "code": "Write-Host \"Hello, PowerShell!\""
      },
      {
        "description": "以特定颜色输出警告信息",
        "code": "Write-Host \"警告：磁盘空间不足！\" -ForegroundColor Yellow -BackgroundColor Black"
      },
      {
        "description": "不换行输出消息",
        "code": "Write-Host \"Processing...\" -NoNewline; Start-Sleep -Seconds 2; Write-Host \"Done.\""
      }
    ],
    "notes": "此Cmdlet主要用于向用户提供直接的、不通过管道的数据，因此不适合用于脚本中的数据流处理。它会将数据直接写入主机的显示器（如控制台），而不是返回对象。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (用于脚本的交互式输出和用户提示)"
  },
  {
    "name": "Write-Output",
    "summary": "将指定对象写入管道 (Sends the specified objects to the pipeline)",
    "examples": [
      {
        "description": "将字符串写入管道",
        "code": "Write-Output \"This goes to the pipeline.\""
      },
      {
        "description": "将一个对象写入管道 (通常是命令的默认行为)",
        "code": "Get-Service | Write-Output # 效果同 Get-Service"
      },
      {
        "description": "强制将函数内部的某些数据发送到管道",
        "code": "function Get-MyData { Write-Host \"Loading...\"; Write-Output \"Data loaded.\" }\nGet-MyData"
      }
    ],
    "notes": "这是PowerShell命令的默认输出行为。当一个命令完成执行时，如果没有明确指定输出，它会自动将结果对象通过 `Write-Output` 发送到管道。在函数或脚本中，明确使用 `Write-Output` 可以确保数据被正确地发送到管道以供后续命令处理，尤其是在有其他 `Write-Host` 等非管道输出的情况下。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (脚本中的核心数据输出机制)"
  },
  {
    "name": "Write-Verbose",
    "summary": "将详细信息写入管道中的详细信息流 (Writes verbose messages to the verbose stream in PowerShell)",
    "examples": [
      {
        "description": "在脚本中输出详细信息 (需要脚本或函数运行时带 -Verbose 参数)",
        "code": "function Test-Verbose { param([string]$Name) Write-Verbose \"Processing user: $Name\"; Write-Output \"Done for $Name\" }\nTest-Verbose -Name \"John Doe\" -Verbose"
      }
    ],
    "notes": "此Cmdlet用于在脚本或函数中提供更详细的执行过程信息，但这些信息只有在用户在调用命令时明确指定 `-Verbose` 通用参数后才会显示。这对于调试和理解复杂脚本的内部逻辑非常有用，但不会污染默认输出。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (脚本开发与调试)"
  },
  {
    "name": "Write-Warning",
    "summary": "将警告消息写入警告流 (Writes a warning message to the warning stream)",
    "examples": [
      {
        "description": "在控制台输出警告消息",
        "code": "Write-Warning \"此操作可能需要较长时间，请耐心等待。\""
      },
      {
        "description": "根据条件输出警告",
        "code": "if ($DiskSpace -lt 10GB) { Write-Warning \"低磁盘空间告警！\" }"
      }
    ],
    "notes": "此Cmdlet用于向用户发出非致命的警告。警告默认会显示在控制台中，但不会中断脚本的执行（除非 `$ErrorActionPreference` 被设置为 `Stop` ）。这有助于在脚本运行中提醒用户潜在的问题或非标准情况。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (脚本中的错误处理和用户反馈)"
  },
  {
    "name": "Write-Error",
    "summary": "将终止或非终止错误写入错误流 (Writes a non-terminating or terminating error to the error stream)",
    "examples": [
      {
        "description": "输出一个非终止错误（脚本继续执行）",
        "code": "Write-Error \"文件未找到，但操作将继续。\""
      },
      {
        "description": "输出一个终止错误（使用 -ErrorAction Stop 或 Throw 强制中断脚本）",
        "code": "try { Get-Item C:\\NonExistentFile.txt -ErrorAction Stop } catch { Write-Error \"捕获到严重错误：$($_.Exception.Message)\" }"
      },
      {
        "description": "在函数中抛出错误",
        "code": "function Get-MandatoryFile { param([string]$Path) if (-not (Test-Path $Path)) { Throw \"文件 '$Path' 不存在！\" } return Get-Content $Path }"
      }
    ],
    "notes": "此Cmdlet用于报告错误。默认情况下，它会生成一个非终止错误，脚本会继续执行。但可以通过 `ErrorAction` 参数或 `Throw` 关键字来生成终止错误，从而中断脚本执行。错误信息会被添加到 `$Error` 自动变量中，方便后续审查和处理。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (脚本中的错误报告和异常处理)"
  },
  {
    "name": "Read-Host",
    "summary": "从控制台读取一行输入 (Reads a line of input from the console)",
    "examples": [
      {
        "description": "提示用户输入姓名",
        "code": "$name = Read-Host \"请输入您的姓名\""
      },
      {
        "description": "提示用户输入密码（以安全字符串形式，不在控制台回显）",
        "code": "$password = Read-Host \"请输入密码\" -AsSecureString"
      }
    ],
    "notes": "此Cmdlet用于从用户获取交互式输入。`-AsSecureString` 参数对于密码或其他敏感信息至关重要，因为它会将输入转换为 `SecureString` 对象，避免明文显示和存储。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (交互式脚本和凭据输入)"
  },
  {
    "name": "Out-File",
    "summary": "将输出发送到文件 (Sends output to a file)",
    "examples": [
      {
        "description": "将命令的输出写入新文件 (如果文件存在则覆盖)",
        "code": "Get-Service | Out-File -FilePath \"C:\\temp\\services.txt\""
      },
      {
        "description": "将输出追加到现有文件末尾",
        "code": "Get-Date | Out-File -FilePath \"C:\\temp\\log.txt\" -Append"
      },
      {
        "description": "指定输出文件的编码",
        "code": "Get-Content \"C:\\input.txt\" | Out-File -FilePath \"C:\\output.txt\" -Encoding UTF8"
      },
      {
        "description": "防止覆盖现有文件",
        "code": "Get-Process | Out-File -FilePath \"C:\\temp\\processes.txt\" -NoClobber"
      }
    ],
    "notes": "这是将PowerShell对象输出到文件的主要方式之一。与 `>` 或 `>>` 运算符不同，`Out-File` 提供更多控制，如编码、追加模式和文件覆盖保护。默认编码通常是UTF-16（UCS-2 LE BOM），这可能导致文本编辑器中出现乱码，因此建议在需要时明确指定 `-Encoding UTF8` 或其他编码。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (日志记录、报告生成、数据导出)"
  },
  {
    "name": "Export-Csv",
    "summary": "将对象转换为一系列逗号分隔值 (CSV) 字符串，并将其保存到文件 (Converts objects into a series of comma-separated value (CSV) strings and saves them in a file)",
    "examples": [
      {
        "description": "将服务列表导出到CSV文件",
        "code": "Get-Service | Export-Csv -Path \"C:\\temp\\services.csv\""
      },
      {
        "description": "导出时不包含类型信息（推荐）",
        "code": "Get-Process | Export-Csv -Path \"C:\\temp\\processes.csv\" -NoTypeInformation"
      },
      {
        "description": "追加数据到现有CSV文件",
        "code": "Get-Item C:\\temp\\* | Export-Csv -Path \"C:\\temp\\file_info.csv\" -Append -NoTypeInformation"
      },
      {
        "description": "使用不同分隔符导出 (例如Tab分隔)",
        "code": "Get-EventLog -LogName System -Newest 10 | Export-Csv -Path \"C:\\temp\\events.tsv\" -Delimiter \"`t\" -NoTypeInformation"
      }
    ],
    "notes": "这是将PowerShell对象数据导出为结构化CSV格式的最常用方法，方便在Excel或其他数据分析工具中打开。强烈建议使用 `-NoTypeInformation` 参数，以避免在CSV文件的第一行出现 `#TYPE System.Management.Automation.PSCustomObject` 这样的元数据。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (数据导出、报告、与其他系统的数据交换)"
  },
  {
    "name": "Import-Csv",
    "summary": "将CSV文件中的项作为自定义对象导入 (Creates custom objects from the items in a CSV file)",
    "examples": [
      {
        "description": "从CSV文件导入数据",
        "code": "$services = Import-Csv -Path \"C:\\temp\\services.csv\""
      },
      {
        "description": "导入后筛选数据",
        "code": "Import-Csv -Path \"C:\\temp\\processes.csv\" | Where-Object {$_.CPU -gt 100}"
      },
      {
        "description": "指定头部信息（当CSV没有头部行时）",
        "code": "Import-Csv -Path \"C:\\data.txt\" -Header \"ID\", \"Name\", \"Value\""
      }
    ],
    "notes": "此Cmdlet能够将CSV文件中的行转换为PowerShell对象，其中每列的标题成为对象的属性名，每行的值成为属性值。这使得CSV数据可以像其他PowerShell对象一样进行操作、筛选和处理。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (数据导入、配置加载、与其他系统的数据交换)"
  },
  {
    "name": "ConvertFrom-Json",
    "summary": "将JSON格式的字符串转换为PowerShell对象 (Converts a JSON formatted string to a PowerShell object)",
    "examples": [
      {
        "description": "将简单的JSON字符串转换为对象",
        "code": "$jsonString = '{\"Name\":\"Alice\", \"Age\":30}'; $data = $jsonString | ConvertFrom-Json"
      },
      {
        "description": "处理包含数组的JSON字符串",
        "code": "$jsonArray = '[{\"Item\":\"Apple\"}, {\"Item\":\"Banana\"}]'; $list = $jsonArray | ConvertFrom-Json"
      },
      {
        "description": "结合 Invoke-RestMethod 处理Web API响应",
        "code": "$githubUser = Invoke-RestMethod -Uri \"https://api.github.com/users/octocat\" | ConvertFrom-Json # 通常 Invoke-RestMethod 会自动处理JSON"
      }
    ],
    "notes": "在与Web API、REST服务或任何使用JSON作为数据交换格式的系统交互时非常常用。它使得你可以轻松地将JSON响应解析为易于操作的PowerShell对象。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (Web API集成、数据解析)"
  },
  {
    "name": "ConvertTo-Json",
    "summary": "将对象转换为JSON格式的字符串 (Converts an object to a JSON formatted string)",
    "examples": [
      {
        "description": "将PowerShell哈希表转换为JSON字符串",
        "code": "$data = @{Name='Bob'; Age=25}; $json = $data | ConvertTo-Json"
      },
      {
        "description": "将Cmdlet输出转换为JSON字符串",
        "code": "Get-Service -Name wuauserv | ConvertTo-Json"
      },
      {
        "description": "控制输出JSON的深度（默认是2）",
        "code": "Get-Process -Name svchost | ConvertTo-Json -Depth 3"
      }
    ],
    "notes": "与 `ConvertFrom-Json` 互补，用于将PowerShell对象序列化为JSON字符串，常用于将数据发送到Web服务或存储为JSON格式的文件。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (Web API数据准备、数据导出)"
  },
  {
    "name": "ConvertFrom-Csv",
    "summary": "将CSV格式的字符串转换为PowerShell对象 (Converts comma-separated value (CSV) strings to custom objects)",
    "examples": [
      {
        "description": "将CSV字符串转换为对象",
        "code": "$csvString = \"Name,Age\nAlice,30\nBob,25\"; $data = $csvString | ConvertFrom-Csv"
      },
      {
        "description": "读取CSV文件内容后转换为对象",
        "code": "(Get-Content \"C:\\temp\\data.csv\") | ConvertFrom-Csv"
      }
    ],
    "notes": "类似于 `Import-Csv`，但它操作的是内存中的字符串而不是文件。在从其他命令或网络接收到CSV格式的字符串时非常有用。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (字符串数据解析)"
  },
  {
    "name": "ConvertTo-Csv",
    "summary": "将对象转换为一系列逗号分隔值 (CSV) 字符串 (Converts objects into a series of comma-separated value (CSV) strings)",
    "examples": [
      {
        "description": "将服务列表转换为CSV字符串",
        "code": "Get-Service | ConvertTo-Csv"
      },
      {
        "description": "不包含类型信息（推荐）",
        "code": "Get-Process | ConvertTo-Csv -NoTypeInformation"
      }
    ],
    "notes": "类似于 `Export-Csv`，但它将CSV字符串输出到管道，而不是直接写入文件。这允许你将CSV数据作为字符串进一步处理，例如发送到网络或嵌入到其他报告中。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (字符串数据准备)"
  },
  {
    "name": "Out-String",
    "summary": "将对象作为一系列字符串写入管道 (Sends the input objects to the pipeline as a series of strings)",
    "examples": [
      {
        "description": "将对象的格式化输出捕获为单个字符串",
        "code": "$stringOutput = Get-Service | Out-String"
      },
      {
        "description": "获取对象的原始字符串表示",
        "code": "$rawString = [string](Get-Date)"
      }
    ],
    "notes": "这个Cmdlet通常用于将复杂对象的格式化文本表示捕获为字符串，这在需要将PowerShell的输出作为文本传递给其他不理解PowerShell对象的工具（例如某些外部命令行工具或日志文件）时非常有用。它保留了PowerShell默认的格式化规则（如 `Format-Table` 或 `Format-List`）。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (文本处理、日志记录、与其他文本工具集成)"
  },
  {
    "name": "Start-Transcript",
    "summary": "开始记录PowerShell会话的特定部分或全部 (Starts a transcript of a specific portion or all of a PowerShell session)",
    "examples": [
      {
        "description": "开始记录当前会话到默认位置（通常是用户文档目录下的PowerShell子目录）",
        "code": "Start-Transcript"
      },
      {
        "description": "开始记录会话并指定日志文件路径，如果文件存在则追加内容",
        "code": "Start-Transcript -Path \"C:\\temp\\MyPowerShellLog.txt\" -Append"
      },
      {
        "description": "强制开始记录（覆盖现有文件）",
        "code": "Start-Transcript -Path \"C:\\temp\\MyPowerShellLog.txt\" -Force"
      },
      {
        "description": "在脚本中开始和停止记录",
        "code": "Start-Transcript -Path \"C:\\temp\\ScriptLog.txt\" -Append\nWrite-Host \"Executing script...\"\nGet-Process\nStop-Transcript"
      }
    ],
    "notes": "对于审计、故障排除或记录自动化脚本的执行历史非常有用。它会捕获所有输入命令和所有输出，包括错误和警告。在生产环境中运行关键脚本时，强烈推荐使用此Cmdlet进行日志记录。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (审计、故障排除、自动化日志)"
  },
  {
    "name": "Stop-Transcript",
    "summary": "停止通过 Start-Transcript 开始的会话记录 (Stops a transcript started by the Start-Transcript cmdlet)",
    "examples": [
      {
        "description": "停止当前正在进行的会话记录",
        "code": "Stop-Transcript"
      }
    ],
    "notes": "用于结束 `Start-Transcript` 命令开始的记录。在记录完成后，日志文件会被关闭和保存。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (审计、故障排除、自动化日志)"
  },
  {
    "name": "Measure-Command",
    "summary": "测量脚本块的执行时间 (Measures the time it takes to run a script block)",
    "examples": [
      {
        "description": "测量一个简单命令的执行时间",
        "code": "Measure-Command { Get-Service }"
      },
      {
        "description": "测量一个较复杂脚本块的执行时间",
        "code": "Measure-Command {\n  $largeList = 1..100000 | ForEach-Object { $_ * 2 }\n  $sum = ($largeList | Measure-Object -Sum).Sum\n  Write-Host \"Sum: $sum\"\n}"
      }
    ],
    "notes": "此Cmdlet用于性能分析，可以帮助你优化脚本和命令的执行效率。它返回一个 `TimeSpan` 对象，其中包含 `Days`, `Hours`, `Minutes`, `Seconds`, `Milliseconds` 等属性。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (脚本性能分析和优化)"
  },
  {
    "name": "Start-Sleep",
    "summary": "暂停脚本或会话的活动 (Suspends the activity in a script or session)",
    "examples": [
      {
        "description": "暂停执行5秒",
        "code": "Start-Sleep -Seconds 5"
      },
      {
        "description": "暂停执行200毫秒",
        "code": "Start-Sleep -Milliseconds 200"
      }
    ],
    "notes": "常用于在自动化脚本中引入延迟，以等待某个操作完成，或者避免在短时间内对系统或API进行过度请求。在某些场景下，也可以使用 `Wait-Event` 或其他更高级的同步机制。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (脚本自动化、API调用限速)"
  },
  {
    "name": "New-Object",
    "summary": "创建指定 .NET Framework 类或 COM 组件的实例 (Creates an instance of a specified .NET Framework class or COM object)",
    "examples": [
      {
        "description": "创建 System.Net.WebClient 对象 (用于下载文件)",
        "code": "$wc = New-Object System.Net.WebClient"
      },
      {
        "description": "创建 System.Collections.ArrayList 对象 (动态数组)",
        "code": "$list = New-Object System.Collections.ArrayList"
      },
      {
        "description": "创建自定义PowerShell对象 (更常用的是 [PSCustomObject])",
        "code": "$obj = New-Object PSCustomObject -Property @{ Name = \"Test\"; Value = 123 }"
      },
      {
        "description": "创建 COM 对象 (例如 Excel)",
        "code": "$excel = New-Object -ComObject Excel.Application"
      }
    ],
    "notes": "PowerShell是一个基于.NET的语言，`New-Object` 允许脚本直接与.NET类库和COM对象交互，从而极大地扩展了其功能，可以完成很多PowerShell内置Cmdlet无法直接实现的任务。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (高级脚本、COM自动化、.NET集成)"
  },
  {
    "name": "Add-Type",
    "summary": "将 .NET Framework 类型（类）添加到 PowerShell 会话中 (Adds a .NET Framework type (class) to a PowerShell session)",
    "examples": [
      {
        "description": "加载一个 .NET 程序集以便使用其中的类型",
        "code": "Add-Type -AssemblyName \"System.Windows.Forms\""
      },
      {
        "description": "在内存中编译并加载C#代码块",
        "code": "Add-Type -TypeDefinition @\"\npublic class MyHelper {\n    public static string Greet(string name) { return \"Hello, \" + name; }\n}\n\"@\n[MyHelper]::Greet(\"World\")"
      }
    ],
    "notes": "此Cmdlet在PowerShell脚本中提供对更高级.NET功能的访问。你可以加载预编译的DLL文件（程序集）或直接在脚本中编写C#代码并即时编译加载，这对于实现复杂逻辑、调用非公开API或优化性能非常有用。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (高级脚本、.NET互操作性、自定义功能扩展)"
  },
  {
    "name": "Get-Date",
    "summary": "获取当前日期和时间 (Gets the current date and time)",
    "examples": [
      {
        "description": "获取当前日期和时间",
        "code": "Get-Date"
      },
      {
        "description": "以特定格式显示日期和时间",
        "code": "Get-Date -Format \"yyyy-MM-dd HH:mm:ss\""
      },
      {
        "description": "获取N天前的日期",
        "code": "(Get-Date).AddDays(-7)"
      },
      {
        "description": "获取Unix时间戳 (自1970年1月1日以来的秒数)",
        "code": "(Get-Date -UFormat %s)"
      }
    ],
    "notes": "处理日期和时间的基本Cmdlet。返回一个 `DateTime` 对象，该对象具有丰富的属性和方法（如 `AddDays()`, `ToString()`, `DayOfWeek` 等），便于进行日期计算和格式化。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (日志记录、时间戳、日期计算)"
  },
  {
    "name": "Get-Random",
    "summary": "获取随机选择的数字或对象 (Gets a randomly selected number or object)",
    "examples": [
      {
        "description": "获取一个0到2,147,483,647之间的随机整数",
        "code": "Get-Random"
      },
      {
        "description": "获取一个1到100之间的随机整数",
        "code": "Get-Random -Minimum 1 -Maximum 101"
      },
      {
        "description": "从列表中随机选择一个元素",
        "code": "$list = \"Apple\", \"Banana\", \"Cherry\"; Get-Random -InputObject $list"
      },
      {
        "description": "从列表中随机选择3个不重复的元素",
        "code": "$list = 1..10; Get-Random -InputObject $list -Count 3 -NoRepeat"
      }
    ],
    "notes": "常用于生成随机密码、随机文件名、随机测试数据或在脚本中实现随机选择逻辑。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (自动化、测试、安全)"
  },
  {
    "name": "Enable-PSRemoting",
    "summary": "配置计算机以接收PowerShell远程命令 (Configures the computer to receive PowerShell remote commands)",
    "examples": [
      {
        "description": "启用本地计算机的PowerShell远程功能",
        "code": "Enable-PSRemoting -Force"
      }
    ],
    "notes": "此命令配置Windows远程管理 (WinRM) 服务和防火墙规则，允许PowerShell通过HTTP/HTTPS接收和处理来自其他计算机的命令。它是远程管理PowerShell的基础。执行此命令通常需要管理员权限。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows (远程管理基础)"
  },
  {
    "name": "Test-WSMan",
    "summary": "测试WinRM服务是否正在远程计算机上运行 (Tests whether the WinRM service is running on a remote computer)",
    "examples": [
      {
        "description": "测试远程计算机的WinRM连接",
        "code": "Test-WSMan -ComputerName \"RemoteServer01\""
      }
    ],
    "notes": "用于诊断PowerShell远程连接问题的第一步。如果此命令失败，则表明远程计算机上的WinRM服务未运行、防火墙阻止连接或存在网络问题。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows (远程管理诊断)"
  },
  {
    "name": "Invoke-Command",
    "summary": "在本地或远程计算机上运行命令或脚本块 (Runs commands or script blocks on local or remote computers)",
    "examples": [
      {
        "description": "在远程计算机上执行一个简单命令",
        "code": "Invoke-Command -ComputerName \"RemoteServer01\" -ScriptBlock { Get-Service -Name spooler }"
      },
      {
        "description": "使用凭据在多台远程计算机上执行脚本",
        "code": "$cred = Get-Credential\nInvoke-Command -ComputerName \"Server01\", \"Server02\" -ScriptBlock { Get-Disk | Select-Object FriendlyName, Size } -Credential $cred"
      },
      {
        "description": "异步执行命令并作为后台作业",
        "code": "Invoke-Command -ComputerName \"RemoteServer01\" -ScriptBlock { Get-EventLog -LogName System -Newest 100 } -AsJob"
      },
      {
        "description": "在脚本块中访问本地变量 (使用 $using: 作用域修饰符)",
        "code": "$filePath = \"C:\\temp\\output.txt\"\nInvoke-Command -ComputerName \"RemoteServer01\" -ScriptBlock { Get-Content $using:filePath }"
      }
    ],
    "notes": "这是PowerShell远程处理的核心Cmdlet，允许你在多台计算机上并行或串行执行命令和脚本。它通过WinRM协议工作，是自动化大规模Windows环境的关键工具。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (远程自动化、批量管理)"
  },
  {
    "name": "Enter-PSSession",
    "summary": "启动一个交互式远程会话 (Starts an interactive remote session)",
    "examples": [
      {
        "description": "进入远程计算机的交互式会话",
        "code": "Enter-PSSession -ComputerName \"RemoteServer01\""
      },
      {
        "description": "使用凭据进入远程会话",
        "code": "$cred = Get-Credential\nEnter-PSSession -ComputerName \"RemoteServer01\" -Credential $cred"
      }
    ],
    "notes": "此Cmdlet允许你进入一个远程PowerShell环境，就像直接在远程计算机的控制台上操作一样。你可以在远程会话中执行命令，访问文件系统、注册表等。退出会话使用 `Exit-PSSession`。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (远程故障排除、交互式管理)"
  },
  {
    "name": "Exit-PSSession",
    "summary": "退出当前的交互式会话 (Exits the current interactive session)",
    "examples": [
      {
        "description": "退出远程PowerShell会话",
        "code": "Exit-PSSession"
      }
    ],
    "notes": "当你在 `Enter-PSSession` 进入远程会话后，使用此命令返回到本地PowerShell会话。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (远程故障排除、交互式管理)"
  },
  {
    "name": "New-PSSession",
    "summary": "创建新的PowerShell会话 (Creates new PowerShell sessions)",
    "examples": [
      {
        "description": "创建到远程计算机的持久会话",
        "code": "$session = New-PSSession -ComputerName \"RemoteServer01\""
      },
      {
        "description": "在多个远程计算机上创建会话数组",
        "code": "$sessions = New-PSSession -ComputerName \"Server01\", \"Server02\", \"Server03\""
      }
    ],
    "notes": "与 `Enter-PSSession` 区别在于，`New-PSSession` 创建的是**持久会话**。这些会话可以在多个 `Invoke-Command` 调用中重用，从而减少连接开销。当你在多个命令之间需要保持状态或多次连接同一台机器时，使用持久会话会更高效。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (远程批量自动化、持久连接)"
  },
  {
    "name": "Remove-PSSession",
    "summary": "关闭PowerShell会话 (Closes PowerShell sessions)",
    "examples": [
      {
        "description": "关闭所有打开的PSSession",
        "code": "Get-PSSession | Remove-PSSession"
      },
      {
        "description": "关闭特定的PSSession",
        "code": "Remove-PSSession -Session $session"
      }
    ],
    "notes": "用于清理不再需要的持久会话，释放资源。在完成远程操作后，通常会使用此命令。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (远程批量自动化、持久连接)"
  },
  {
    "name": "Get-Credential",
    "summary": "获取包含凭据对象的PowerShell凭据对象 (Gets a PowerShell credential object that contains a credential object)",
    "examples": [
      {
        "description": "打开凭据输入框，用户输入用户名和密码",
        "code": "$cred = Get-Credential"
      },
      {
        "description": "预设用户名，只提示输入密码",
        "code": "$cred = Get-Credential -UserName \"Administrator\""
      },
      {
        "description": "将安全字符串转换为凭据对象 (不推荐直接在脚本中硬编码密码)",
        "code": "$securePwd = ConvertTo-SecureString \"MyPassword\" -AsPlainText -Force\n$cred = New-Object System.Management.Automation.PSCredential (\"MyUser\", $securePwd)"
      }
    ],
    "notes": "此Cmdlet用于安全地获取用户名和密码，并将其封装为 `PSCredential` 对象。这个对象可以在许多需要身份验证的Cmdlet中作为 `-Credential` 参数的值，如 `Invoke-Command`、`Connect-AzAccount` 等，而避免在脚本中暴露明文密码。",
    "shell_type": "Cmdlet",
    "usage_context": "Windows/AD/Azure (安全凭据管理)"
  },
  {
    "name": "Get-ComputerInfo",
    "summary": "获取本地计算机和操作系统的详细信息 (Get detailed information about the local computer and operating system)",
    "examples": [
      {
        "description": "获取所有可用的计算机信息",
        "code": "Get-ComputerInfo"
      },
      {
        "description": "获取操作系统版本、架构和安装日期",
        "code": "Get-ComputerInfo -Property OsName, OsVersion, OsArchitecture, OsInstallDate"
      },
      {
        "description": "筛选并显示所有包含 'Windows' 的属性信息",
        "code": "Get-ComputerInfo | Where-Object { $_.Name -like '*Windows*' } | Format-List"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别，用于快速获取操作系统、硬件、网络配置等全面的信息。它比直接进行WMI查询更用户友好且数据结构更清晰。通常不需要额外安装，是PowerShell Core/7+ 和Windows PowerShell 5.1+ 的内置命令。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Restart-Computer",
    "summary": "重启一台或多台计算机 (Restarts one or more computers)",
    "examples": [
      {
        "description": "立即重启本地计算机",
        "code": "Restart-Computer"
      },
      {
        "description": "强制重启名为 'Server01' 的远程计算机",
        "code": "Restart-Computer -ComputerName Server01 -Force"
      },
      {
        "description": "在重启前提示确认，并等待30秒后执行",
        "code": "Restart-Computer -Confirm -Wait -Delay 30"
      },
      {
        "description": "使用特定凭据重启远程计算机",
        "code": "Restart-Computer -ComputerName RemotePC -Credential (Get-Credential) -Force"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。默认情况下，它会提示用户确认。`-Force` 参数可以跳过确认提示，用于脚本自动化。`-Wait` 会使命令阻塞，直到远程计算机重新联机并可达。需要目标计算机启用PowerShell Remoting (WinRM) 以进行远程操作。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Stop-Computer",
    "summary": "关闭一台或多台计算机 (Shuts down one or more computers)",
    "examples": [
      {
        "description": "立即关闭本地计算机",
        "code": "Stop-Computer"
      },
      {
        "description": "强制关闭名为 'Server02' 的远程计算机",
        "code": "Stop-Computer -ComputerName Server02 -Force"
      },
      {
        "description": "使用特定凭据关闭远程计算机",
        "code": "Stop-Computer -ComputerName RemotePC -Credential (Get-Credential) -Force"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。与 `Restart-Computer` 类似，也支持远程操作，并需要目标计算机启用PowerShell Remoting。`-Force` 参数在脚本中很有用，但应谨慎使用。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Get-CimInstance",
    "summary": "获取CIM（通用信息模型）类的实例或关联 (Gets CIM (Common Information Model) class instances or associations)",
    "examples": [
      {
        "description": "获取本地计算机的操作系统信息",
        "code": "Get-CimInstance -ClassName Win32_OperatingSystem"
      },
      {
        "description": "获取远程计算机 'Server02' 的所有逻辑磁盘信息",
        "code": "Get-CimInstance -ClassName Win32_LogicalDisk -ComputerName Server02"
      },
      {
        "description": "获取所有正在运行的服务（WMI查询）",
        "code": "Get-CimInstance -ClassName Win32_Service -Filter \"State='Running'\""
      },
      {
        "description": "获取指定进程的详细信息",
        "code": "Get-CimInstance -ClassName Win32_Process -Filter \"Name='notepad.exe'\""
      },
      {
        "description": "查看 'Win32_Process' 类的所有属性和方法",
        "code": "Get-CimClass -ClassName Win32_Process | Select-Object -ExpandProperty Properties | Format-Table"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。它是 `Get-WmiObject` (旧版命令) 的推荐替代品，使用WS-Management (WS-Man)协议进行远程操作，通常无需额外安装。CIM 是 WMI 的底层技术，提供了访问系统配置、状态、性能数据的标准化接口。熟悉WMI/CIM类名是使用此命令的关键。可以使用 `Get-CimClass -ClassName Win32_*` 来发现类。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Invoke-CimMethod",
    "summary": "调用CIM实例的方法 (Invokes a method of a CIM instance)",
    "examples": [
      {
        "description": "重启本地名为 'spooler' 的打印后台处理服务",
        "code": "(Get-CimInstance -ClassName Win32_Service -Filter \"Name='spooler'\") | Invoke-CimMethod -MethodName 'StopService'\n(Get-CimInstance -ClassName Win32_Service -Filter \"Name='spooler'\") | Invoke-CimMethod -MethodName 'StartService'"
      },
      {
        "description": "在远程计算机 'Server03' 上调用 `Win32_OperatingSystem` 类的 `Reboot` 方法",
        "code": "Invoke-CimMethod -ClassName Win32_OperatingSystem -MethodName 'Reboot' -ComputerName Server03"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。它允许你直接调用CIM对象暴露的方法来执行操作，这是自动化系统管理的重要方式。例如，你可以启动、停止、暂停服务，重启计算机，修改网络配置等。与 `Get-CimInstance` 配合使用。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Get-HotFix",
    "summary": "获取已安装的修补程序（更新）信息 (Gets information about hotfixes (updates) that have been applied)",
    "examples": [
      {
        "description": "获取本地计算机上所有已安装的修补程序",
        "code": "Get-HotFix"
      },
      {
        "description": "获取指定ID的修补程序信息",
        "code": "Get-HotFix -Id KB1234567"
      },
      {
        "description": "获取指定日期之后安装的修补程序",
        "code": "Get-HotFix -Description 'Security Update' -InstalledOn (Get-Date).AddMonths(-1)"
      },
      {
        "description": "从远程计算机获取修补程序列表",
        "code": "Get-HotFix -ComputerName Server01, Server02"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于查看操作系统和软件的补丁安装情况。在审计和故障排除中非常有用。可以通过 `InstalledOn` 属性查看安装日期。对于远程计算机，需要WinRM支持。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Get-WindowsFeature",
    "summary": "获取Windows服务器角色和功能的信息 (Gets information about Windows server roles and features)",
    "examples": [
      {
        "description": "列出所有可用的Windows功能和角色及其安装状态",
        "code": "Get-WindowsFeature"
      },
      {
        "description": "查找所有名称中包含 'Web-Server' 的功能",
        "code": "Get-WindowsFeature -Name *Web-Server*"
      },
      {
        "description": "获取所有已安装的功能和角色",
        "code": "Get-WindowsFeature | Where-Object {$_.Installed -eq $true}"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别，**仅适用于Windows Server操作系统**。它用于管理服务器上的角色和功能，例如安装IIS、AD DS等。它由 `ServerManager` 模块提供，该模块通常在Windows Server上默认可用。在客户端Windows版本上，此命令不可用。",
    "shell_type": "PowerShell Cmdlet (Module: ServerManager)",
    "category": "Windows"
  },
  {
    "name": "Install-WindowsFeature",
    "summary": "在Windows服务器上安装指定的角色或功能 (Installs specified Windows server roles or features)",
    "examples": [
      {
        "description": "安装Web服务器 (IIS) 角色",
        "code": "Install-WindowsFeature -Name Web-Server"
      },
      {
        "description": "同时安装Web服务器和FTP服务器，并包含所有管理工具",
        "code": "Install-WindowsFeature -Name Web-Server, Ftp-Server -IncludeManagementTools"
      },
      {
        "description": "在安装后不需要重启服务器 (如果功能允许)",
        "code": "Install-WindowsFeature -Name 'Feature-Name' -Restart:$false"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别，**仅适用于Windows Server操作系统**。它是自动化服务器部署和配置的关键命令。`-IncludeAllSubFeature` 可以安装所有子功能，`-IncludeManagementTools` 可以安装管理工具。需要管理员权限。它由 `ServerManager` 模块提供。",
    "shell_type": "PowerShell Cmdlet (Module: ServerManager)",
    "category": "Windows"
  },
  {
    "name": "Uninstall-WindowsFeature",
    "summary": "从Windows服务器上卸载指定的角色或功能 (Uninstalls specified Windows server roles or features)",
    "examples": [
      {
        "description": "卸载Web服务器 (IIS) 角色",
        "code": "Uninstall-WindowsFeature -Name Web-Server"
      },
      {
        "description": "卸载指定功能，并在不需要重启时跳过重启",
        "code": "Uninstall-WindowsFeature -Name 'Feature-Name' -Restart:$false"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别，**仅适用于Windows Server操作系统**。与 `Install-WindowsFeature` 对应，用于移除不再需要的服务器角色或功能。需要管理员权限。它由 `ServerManager` 模块提供。",
    "shell_type": "PowerShell Cmdlet (Module: ServerManager)",
    "category": "Windows"
  },
  {
    "name": "Get-PnpDevice",
    "summary": "获取即插即用 (Plug and Play) 设备的信息 (Gets information about Plug and Play devices)",
    "examples": [
      {
        "description": "列出所有即插即用设备",
        "code": "Get-PnpDevice"
      },
      {
        "description": "查找所有显示适配器",
        "code": "Get-PnpDevice -Class DisplayAdapter"
      },
      {
        "description": "查找所有已禁用且当前存在的设备",
        "code": "Get-PnpDevice -PresentOnly | Where-Object {$_.Status -eq 'Error' -or $_.Status -eq 'Degraded'}"
      },
      {
        "description": "按设备实例ID查找特定设备",
        "code": "Get-PnpDevice -InstanceId 'PCI\\VEN_10EC&DEV_8168&SUBSYS_816810EC&REV_0C\\4&2306771F&0&00E4'"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于查询硬件设备的状态和属性，对于硬件故障排除或设备管理非常有用。通常不需要额外安装，是PowerShell的内置功能。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Disable-PnpDevice",
    "summary": "禁用即插即用设备 (Disables a Plug and Play device)",
    "examples": [
      {
        "description": "禁用所有名为 'Intel(R) Ethernet Connection' 的网络适配器",
        "code": "Get-PnpDevice -FriendlyName 'Intel(R) Ethernet Connection*' | Disable-PnpDevice -Confirm"
      },
      {
        "description": "根据实例ID禁用特定设备",
        "code": "Disable-PnpDevice -InstanceId 'PCI\\VEN_10EC&DEV_8168&SUBSYS_816810EC&REV_0C\\4&2306771F&0&00E4' -Confirm:$false"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于禁用硬件设备，常用于故障排除或临时隔离硬件问题。需要管理员权限。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Enable-PnpDevice",
    "summary": "启用即插即用设备 (Enables a Plug and Play device)",
    "examples": [
      {
        "description": "启用所有名为 'Intel(R) Ethernet Connection' 的网络适配器",
        "code": "Get-PnpDevice -FriendlyName 'Intel(R) Ethernet Connection*' | Enable-PnpDevice -Confirm"
      },
      {
        "description": "根据实例ID启用特定设备",
        "code": "Enable-PnpDevice -InstanceId 'PCI\\VEN_10EC&DEV_8168&SUBSYS_816810EC&REV_0C\\4&2306771F&0&00E4' -Confirm:$false"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于启用之前被禁用的硬件设备。需要管理员权限。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Get-Process",
    "summary": "获取本地或远程计算机上运行的进程 (Gets the processes that are running on a local or remote computer)",
    "examples": [
      {
        "description": "获取所有正在运行的进程",
        "code": "Get-Process"
      },
      {
        "description": "按名称查找特定进程 (如 Notepad)",
        "code": "Get-Process -Name notepad"
      },
      {
        "description": "按ID查找进程",
        "code": "Get-Process -Id 1234"
      },
      {
        "description": "查找占用CPU时间最多的前10个进程",
        "code": "Get-Process | Sort-Object CPU -Descending | Select-Object -First 10 -Property Name, Id, CPU"
      },
      {
        "description": "获取远程计算机上的进程",
        "code": "Get-Process -ComputerName Server01"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。是监视和管理系统进程的基础工具。可以通过进程名、ID、模块等属性进行筛选。支持远程获取进程信息。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Stop-Process",
    "summary": "停止一个或多个运行中的进程 (Stops one or more running processes)",
    "examples": [
      {
        "description": "停止所有名为 'notepad' 的进程，并在执行前提示确认",
        "code": "Stop-Process -Name notepad -Confirm"
      },
      {
        "description": "强制停止特定ID的进程",
        "code": "Stop-Process -Id 5678 -Force"
      },
      {
        "description": "通过管道停止进程",
        "code": "Get-Process -Name chrome | Stop-Process"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于终止不需要的或无响应的进程。`-Force` 参数可以强制终止进程，但应谨慎使用，因为可能导致数据丢失或系统不稳定。需要相应权限。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Start-Process",
    "summary": "启动一个或多个进程 (Starts one or more processes)",
    "examples": [
      {
        "description": "启动记事本程序",
        "code": "Start-Process -FilePath notepad.exe"
      },
      {
        "description": "以管理员权限启动PowerShell新会话",
        "code": "Start-Process -FilePath powershell.exe -Verb RunAs"
      },
      {
        "description": "打开一个URL链接",
        "code": "Start-Process -FilePath 'https://www.google.com'"
      },
      {
        "description": "启动程序并等待其完成",
        "code": "Start-Process -FilePath 'installer.exe' -Wait"
      },
      {
        "description": "启动一个隐藏窗口的程序",
        "code": "Start-Process -FilePath 'script.cmd' -WindowStyle Hidden"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于启动新的应用程序或脚本。`-Verb RunAs` 参数可以请求以管理员权限运行。`-Wait` 参数在自动化脚本中非常有用，可以确保一个进程完成后再继续执行脚本。在PowerShell Core/7中，`Start-Process` 可以直接启动URL，这在Windows PowerShell中通常需要 `Start-Item`。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Restart-Process",
    "summary": "停止并重新启动一个或多个进程 (Stops and then restarts one or more processes)",
    "examples": [
      {
        "description": "重启所有名为 'explorer' 的进程",
        "code": "Restart-Process -Name explorer"
      },
      {
        "description": "通过管道重启进程",
        "code": "Get-Process -Name sqlservr | Restart-Process -Force"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。方便地重启应用程序，尤其适用于那些在更改配置后需要重启才能生效的进程。需要相应权限。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Debug-Process",
    "summary": "附加调试器到一个或多个运行中的进程 (Attaches a debugger to one or more running processes)",
    "examples": [
      {
        "description": "附加默认调试器到 Notepad 进程",
        "code": "Debug-Process -Name notepad"
      },
      {
        "description": "附加默认调试器到指定ID的进程",
        "code": "Debug-Process -Id 1234"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。主要用于开发和故障排除，将注册的调试器（如Visual Studio Debugger）附加到指定进程。通常需要管理员权限。日常系统管理中不常用，但在特定故障场景下很有用。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Get-Service",
    "summary": "获取本地或远程计算机上服务的相关信息 (Gets information about the services that are running on a local or remote computer)",
    "examples": [
      {
        "description": "获取所有服务",
        "code": "Get-Service"
      },
      {
        "description": "获取所有正在运行的服务",
        "code": "Get-Service | Where-Object {$_.Status -eq 'Running'}"
      },
      {
        "description": "查找名称中包含 'Print' 的服务",
        "code": "Get-Service -Name *Print*"
      },
      {
        "description": "获取远程计算机上的服务信息",
        "code": "Get-Service -ComputerName Server01"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。是管理Windows服务的核心命令。可以查看服务的名称、显示名称、状态、启动类型等。支持远程获取服务信息。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Stop-Service",
    "summary": "停止一个或多个运行中的服务 (Stops one or more running services)",
    "examples": [
      {
        "description": "停止 'Spooler' 打印后台处理服务",
        "code": "Stop-Service -Name Spooler"
      },
      {
        "description": "强制停止指定服务及其所有依赖服务",
        "code": "Stop-Service -Name 'ServiceName' -Force"
      },
      {
        "description": "通过管道停止服务",
        "code": "Get-Service -DisplayName 'Windows Update' | Stop-Service -Confirm"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于停止运行中的服务。`-Force` 参数可以强制停止服务和其依赖的服务。需要管理员权限。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Start-Service",
    "summary": "启动一个或多个停止的服务 (Starts one or more stopped services)",
    "examples": [
      {
        "description": "启动 'Spooler' 打印后台处理服务",
        "code": "Start-Service -Name Spooler"
      },
      {
        "description": "通过管道启动多个服务",
        "code": "Get-Service -DisplayName 'Print Spooler', 'Fax' | Start-Service"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于启动已停止的服务。需要管理员权限。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Restart-Service",
    "summary": "停止并重新启动一个或多个服务 (Stops and then restarts one or more services)",
    "examples": [
      {
        "description": "重启 'Spooler' 打印后台处理服务",
        "code": "Restart-Service -Name Spooler"
      },
      {
        "description": "强制重启指定服务",
        "code": "Restart-Service -Name 'ServiceName' -Force"
      },
      {
        "description": "重启所有状态为 'Running' 的服务",
        "code": "Get-Service | Where-Object {$_.Status -eq 'Running'} | Restart-Service -WhatIf"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。是管理Windows服务的常用操作，方便在更改配置或解决临时问题后刷新服务状态。需要管理员权限。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Set-Service",
    "summary": "更改一个或多个服务的属性 (Changes the properties of one or more services)",
    "examples": [
      {
        "description": "将 'Spooler' 服务的启动类型设置为禁用",
        "code": "Set-Service -Name Spooler -StartupType Disabled"
      },
      {
        "description": "将 'Windows Search' 服务设置为自动启动，并立即启动它",
        "code": "Set-Service -Name WSearch -StartupType Automatic -Status Running"
      },
      {
        "description": "修改服务的描述",
        "code": "Set-Service -Name 'ServiceName' -Description '自定义服务描述'"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于修改服务的配置，如启动类型 (Automatic, Manual, Disabled)、显示名称、描述等。需要管理员权限。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "New-Service",
    "summary": "创建新的Windows服务 (Creates a new Windows service)",
    "examples": [
      {
        "description": "创建一个新的服务，指向一个可执行文件",
        "code": "New-Service -Name \"MyCustomService\" -BinaryPathName \"C:\\Program Files\\MyServiceApp\\MyService.exe\" -DisplayName \"我的自定义服务\" -StartupType Automatic"
      },
      {
        "description": "创建一个需要特定账户运行的服务",
        "code": "New-Service -Name \"AppService\" -BinaryPathName \"C:\\Path\\To\\App.exe\" -Credential (Get-Credential) -DisplayName \"应用程序服务\""
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于注册一个新的Windows服务。这通常用于将后台应用程序或脚本作为服务运行。需要管理员权限。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Remove-Service",
    "summary": "删除一个Windows服务 (Deletes a Windows service)",
    "examples": [
      {
        "description": "删除名为 \"MyCustomService\" 的服务",
        "code": "Remove-Service -Name \"MyCustomService\" -Confirm"
      },
      {
        "description": "强制删除一个服务，不进行确认",
        "code": "Remove-Service -Name \"OldService\" -Force"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于从系统中移除不再需要的服务。删除操作不可逆，请谨慎使用。需要管理员权限。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Test-Connection",
    "summary": "对本地或远程计算机执行 ping 操作 (Pings a local or remote computer)",
    "examples": [
      {
        "description": "ping 'www.google.com' 四次",
        "code": "Test-Connection -TargetName www.google.com -Count 4"
      },
      {
        "description": "测试到远程计算机的连接，并显示详细信息",
        "code": "Test-Connection -TargetName Server01 -BufferSize 32 -Delay 1 -Count 2 -Detailed"
      },
      {
        "description": "测试到多台计算机的连接",
        "code": "Test-Connection -TargetName ('Server01', 'Server02', '192.168.1.1')"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。功能类似于传统的 `ping` 命令，但它返回的是结构化对象，更便于在PowerShell中进行处理和分析。支持使用凭据进行远程主机测试，但通常仅限于PowerShell Remoting。对于纯粹的ICMP ping，通常不需要凭据。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Resolve-DnsName",
    "summary": "解析DNS域名或IP地址 (Resolves a DNS domain name or IP address)",
    "examples": [
      {
        "description": "解析 'www.google.com' 的A记录",
        "code": "Resolve-DnsName -Name www.google.com"
      },
      {
        "description": "解析指定域名的MX记录",
        "code": "Resolve-DnsName -Name example.com -Type MX"
      },
      {
        "description": "使用特定DNS服务器解析域名",
        "code": "Resolve-DnsName -Name internalapp -Server 192.168.1.10"
      },
      {
        "description": "执行反向DNS查找 (PTR记录)",
        "code": "Resolve-DnsName -Name 8.8.8.8 -Type PTR"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。功能类似于 `nslookup` 或 `dig`，但返回结构化对象，便于脚本处理。是排查DNS问题的重要工具。通常不需要额外安装。",
    "shell_type": "PowerShell Cmdlet (Built-in)",
    "category": "Windows"
  },
  {
    "name": "Get-NetIPAddress",
    "summary": "获取IP地址配置信息 (Gets IP address configuration information)",
    "examples": [
      {
        "description": "获取所有网络适配器上的IP地址",
        "code": "Get-NetIPAddress"
      },
      {
        "description": "获取指定接口的IPv4地址",
        "code": "Get-NetIPAddress -InterfaceAlias 'Ethernet' -AddressFamily IPv4"
      },
      {
        "description": "查找所有配置了特定网关的IP地址",
        "code": "Get-NetIPAddress | Where-Object {$_.Gateway -eq '192.168.1.1'}"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于查看网络接口的IP地址、子网掩码、网关等信息。是网络配置和故障排除的重要工具。通常不需要额外安装，由 `NetAdapter` 模块提供。",
    "shell_type": "PowerShell Cmdlet (Module: NetAdapter)",
    "category": "Windows"
  },
  {
    "name": "New-NetIPAddress",
    "summary": "配置新的IP地址 (Configures a new IP address)",
    "examples": [
      {
        "description": "在指定接口上配置一个静态IPv4地址",
        "code": "New-NetIPAddress -InterfaceAlias 'Ethernet' -IPAddress '192.168.1.100' -PrefixLength 24 -DefaultGateway '192.168.1.1'"
      },
      {
        "description": "在指定接口上添加一个辅助IP地址",
        "code": "New-NetIPAddress -InterfaceAlias 'Ethernet' -IPAddress '192.168.1.101' -PrefixLength 24"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于在网络适配器上添加新的IP地址配置。可以用于配置静态IP。需要管理员权限。",
    "shell_type": "PowerShell Cmdlet (Module: NetAdapter)",
    "category": "Windows"
  },
  {
    "name": "Set-NetIPAddress",
    "summary": "修改现有的IP地址配置 (Modifies existing IP address configuration)",
    "examples": [
      {
        "description": "更改指定IP地址的网关",
        "code": "Set-NetIPAddress -IPAddress '192.168.1.100' -DefaultGateway '192.168.1.254'"
      },
      {
        "description": "将现有IP地址更改为新IP",
        "code": "Set-NetIPAddress -IPAddress '192.168.1.100' -NewIPAddress '192.168.1.105'"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于修改现有IP地址的属性，如IP地址本身、子网前缀长度、网关等。需要管理员权限。",
    "shell_type": "PowerShell Cmdlet (Module: NetAdapter)",
    "category": "Windows"
  },
  {
    "name": "Remove-NetIPAddress",
    "summary": "移除一个IP地址配置 (Removes an IP address configuration)",
    "examples": [
      {
        "description": "移除指定IP地址",
        "code": "Remove-NetIPAddress -IPAddress '192.168.1.100' -Confirm:$false"
      },
      {
        "description": "移除指定接口上的所有IPv6地址",
        "code": "Get-NetIPAddress -InterfaceAlias 'Ethernet' -AddressFamily IPv6 | Remove-NetIPAddress -Confirm:$false"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于从网络适配器移除不再需要的IP地址。需要管理员权限。",
    "shell_type": "PowerShell Cmdlet (Module: NetAdapter)",
    "category": "Windows"
  },
  {
    "name": "Get-NetAdapter",
    "summary": "获取网络适配器的基本属性 (Gets the basic properties of the network adapters)",
    "examples": [
      {
        "description": "获取所有网络适配器",
        "code": "Get-NetAdapter"
      },
      {
        "description": "获取所有已启用的网络适配器",
        "code": "Get-NetAdapter | Where-Object {$_.Status -eq 'Up'}"
      },
      {
        "description": "获取指定名称的网络适配器",
        "code": "Get-NetAdapter -Name 'Ethernet'"
      },
      {
        "description": "获取所有隐藏的网络适配器（如VPN适配器）",
        "code": "Get-NetAdapter -IncludeHidden"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于查看网络适配器的名称、状态、MAC地址、链接速度等信息。是网络故障排除和自动化配置的基础。通常不需要额外安装，由 `NetAdapter` 模块提供。",
    "shell_type": "PowerShell Cmdlet (Module: NetAdapter)",
    "category": "Windows"
  },
  {
    "name": "Disable-NetAdapter",
    "summary": "禁用网络适配器 (Disables a network adapter)",
    "examples": [
      {
        "description": "禁用名为 'Ethernet' 的网络适配器",
        "code": "Disable-NetAdapter -Name 'Ethernet' -Confirm"
      },
      {
        "description": "禁用所有处于'Up'状态的网络适配器 (仅限测试环境)",
        "code": "Get-NetAdapter | Where-Object {$_.Status -eq 'Up'} | Disable-NetAdapter -Confirm"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于禁用指定的网络适配器。禁用后，该适配器将无法进行网络通信。需要管理员权限。",
    "shell_type": "PowerShell Cmdlet (Module: NetAdapter)",
    "category": "Windows"
  },
  {
    "name": "Enable-NetAdapter",
    "summary": "启用网络适配器 (Enables a network adapter)",
    "examples": [
      {
        "description": "启用名为 'Ethernet' 的网络适配器",
        "code": "Enable-NetAdapter -Name 'Ethernet'"
      },
      {
        "description": "启用所有处于'Disabled'状态的网络适配器",
        "code": "Get-NetAdapter | Where-Object {$_.Status -eq 'Disabled'} | Enable-NetAdapter"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于启用之前被禁用的网络适配器。需要管理员权限。",
    "shell_type": "PowerShell Cmdlet (Module: NetAdapter)",
    "category": "Windows"
  },
  {
    "name": "Rename-NetAdapter",
    "summary": "重命名网络适配器 (Renames a network adapter)",
    "examples": [
      {
        "description": "将名为 'Ethernet' 的网络适配器重命名为 'LAN'",
        "code": "Rename-NetAdapter -Name 'Ethernet' -NewName 'LAN'"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于更改网络适配器的显示名称。重命名有助于管理多个网络接口。需要管理员权限。",
    "shell_type": "PowerShell Cmdlet (Module: NetAdapter)",
    "category": "Windows"
  },
  {
    "name": "Get-DnsClientServerAddress",
    "summary": "获取DNS客户端的服务器地址配置 (Gets DNS client server addresses)",
    "examples": [
      {
        "description": "获取所有网络适配器上的DNS服务器地址",
        "code": "Get-DnsClientServerAddress"
      },
      {
        "description": "获取指定接口的DNS服务器地址",
        "code": "Get-DnsClientServerAddress -InterfaceAlias 'Ethernet'"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于查看网络适配器配置的DNS服务器地址。是排查DNS解析问题的重要工具。通常不需要额外安装，由 `DnsClient` 模块提供。",
    "shell_type": "PowerShell Cmdlet (Module: DnsClient)",
    "category": "Windows"
  },
  {
    "name": "Set-DnsClientServerAddress",
    "summary": "设置DNS客户端的服务器地址 (Sets DNS client server addresses)",
    "examples": [
      {
        "description": "为名为 'Ethernet' 的网络适配器设置静态DNS服务器",
        "code": "Set-DnsClientServerAddress -InterfaceAlias 'Ethernet' -ServerAddresses (\"8.8.8.8\", \"8.8.4.4\")"
      },
      {
        "description": "将指定接口的DNS配置设置为自动 (DHCP)",
        "code": "Set-DnsClientServerAddress -InterfaceAlias 'Ethernet' -ServerAddresses (\"Dhcp\")"
      }
    ],
    "notes": "此命令属于**Windows**系统管理类别。用于配置网络适配器的DNS服务器地址。这对于更改网络环境或解决DNS解析问题非常有用。需要管理员权限。",
    "shell_type": "PowerShell Cmdlet (Module: DnsClient)",
    "category": "Windows"
  },
  {
    "name": "Get-WinEvent",
    "summary": "从Windows事件日志中获取事件 (Get events from Windows event logs)",
    "examples": [
      {
        "description": "获取系统日志中最新的10条错误事件",
        "code": "Get-WinEvent -LogName System -Level 2 -MaxEvents 10"
      },
      {
        "description": "获取过去24小时内所有应用程序日志中的警告和错误事件",
        "code": "Get-WinEvent -FilterHashtable @{LogName='Application'; Level=2,3; StartTime=(Get-Date).AddDays(-1)}"
      },
      {
        "description": "查找安全日志中登录失败的事件 (Event ID 4625)",
        "code": "Get-WinEvent -LogName Security -FilterXPath \"*[System[(EventID=4625)]]\""
      },
      {
        "description": "从指定文件中读取事件日志 (如归档的.evtx文件)",
        "code": "Get-WinEvent -Path 'C:\\Temp\\ArchivedLog.evtx' -MaxEvents 50"
      }
    ],
    "notes": "这是用于查询Windows事件日志的核心Cmdlet，比旧的 `Get-EventLog` 更强大和灵活，支持XPath过滤和从EVTX文件读取。`Level` 参数：1 (Critical), 2 (Error), 3 (Warning), 4 (Information), 5 (Verbose)。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Clear-WinEvent",
    "summary": "清除Windows事件日志 (Clear events from Windows event logs)",
    "examples": [
      {
        "description": "清除应用程序日志",
        "code": "Clear-WinEvent -LogName Application"
      },
      {
        "description": "强制清除所有事件日志",
        "code": "Get-WinEvent -ListLog * | Clear-WinEvent -Force -Confirm:$false"
      }
    ],
    "notes": "用于清空指定事件日志中的所有条目。谨慎使用 `-Force` 和 `-Confirm:$false` 参数，因为它会永久删除日志记录。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Write-EventLog",
    "summary": "将事件写入Windows事件日志 (Write an event to a Windows event log)",
    "examples": [
      {
        "description": "将一条信息性消息写入应用程序日志",
        "code": "Write-EventLog -LogName Application -Source \"PowerShell Script\" -EventId 1000 -EntryType Information -Message \"脚本 'MyScript.ps1' 已成功完成。\""
      },
      {
        "description": "将一条警告消息写入系统日志",
        "code": "Write-EventLog -LogName System -Source \"MyApplication\" -EventId 2001 -EntryType Warning -Message \"配置路径 'C:\\config.xml' 不存在。\""
      }
    ],
    "notes": "允许脚本或其他程序将自定义事件写入Windows事件日志。`Source` 参数必须是已注册的事件源，否则需要先创建或使用已有的。通常用于脚本记录自身运行状态或错误信息，以便通过事件查看器进行集中管理。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Get-LocalUser",
    "summary": "获取本地用户账户 (Gets local user accounts)",
    "examples": [
      {
        "description": "获取所有本地用户账户",
        "code": "Get-LocalUser"
      },
      {
        "description": "获取名为 'Guest' 的本地用户账户",
        "code": "Get-LocalUser -Name Guest"
      },
      {
        "description": "获取指定用户的详细属性",
        "code": "(Get-LocalUser -Name 'AdminUser').Enabled"
      }
    ],
    "notes": "此Cmdlet属于 `Microsoft.PowerShell.LocalAccounts` 模块，通常在Windows 10、Windows Server 2016及更高版本上默认可用。在旧版本上可能需要手动安装：`Install-Module -Name Microsoft.PowerShell.LocalAccounts`。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "New-LocalUser",
    "summary": "创建本地用户账户 (Creates a local user account)",
    "examples": [
      {
        "description": "创建一个新用户 'NewUser'，设置密码永不过期，并启用账户",
        "code": "$password = Read-Host -AsSecureString \"请输入密码\"\nNew-LocalUser -Name \"NewUser\" -Password $password -FullName \"新用户\" -Description \"测试账户\" -PasswordNeverExpires $true -Enabled $true"
      },
      {
        "description": "创建一个不带密码的禁用用户",
        "code": "New-LocalUser -Name \"TempUser\" -NoPassword -Enabled $false"
      }
    ],
    "notes": "创建本地用户账户。出于安全考虑，密码应使用 `Read-Host -AsSecureString` 或其他安全方法获取，而不是直接作为明文参数传递。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Set-LocalUser",
    "summary": "修改本地用户账户属性 (Modifies a local user account)",
    "examples": [
      {
        "description": "启用本地用户 'DisabledUser'",
        "code": "Set-LocalUser -Name \"DisabledUser\" -Enabled $true"
      },
      {
        "description": "修改用户 'TestUser' 的描述和全名",
        "code": "Set-LocalUser -Name \"TestUser\" -Description \"新描述\" -FullName \"测试用户\""
      },
      {
        "description": "设置用户 'TempUser' 密码过期日期为明天",
        "code": "$tomorrow = (Get-Date).AddDays(1)\nSet-LocalUser -Name \"TempUser\" -AccountExpires $tomorrow"
      }
    ],
    "notes": "用于修改现有本地用户账户的各种属性，如启用/禁用状态、密码过期策略、全名和描述等。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Remove-LocalUser",
    "summary": "删除本地用户账户 (Removes a local user account)",
    "examples": [
      {
        "description": "删除名为 'OldUser' 的本地用户账户",
        "code": "Remove-LocalUser -Name \"OldUser\" -Confirm:$false"
      }
    ],
    "notes": "删除本地用户账户。使用 `-Confirm:$false` 可以跳过确认提示，在脚本中常用。一旦删除，用户数据可能无法恢复，谨慎操作。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Enable-LocalUser",
    "summary": "启用本地用户账户 (Enables a local user account)",
    "examples": [
      {
        "description": "启用名为 'InactiveUser' 的本地用户账户",
        "code": "Enable-LocalUser -Name \"InactiveUser\""
      }
    ],
    "notes": "将本地用户账户的状态从禁用更改为启用。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Disable-LocalUser",
    "summary": "禁用本地用户账户 (Disables a local user account)",
    "examples": [
      {
        "description": "禁用名为 'SuspendedUser' 的本地用户账户",
        "code": "Disable-LocalUser -Name \"SuspendedUser\""
      }
    ],
    "notes": "将本地用户账户的状态从启用更改为禁用，用户将无法登录。账户本身不会被删除。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Get-LocalGroup",
    "summary": "获取本地安全组 (Gets local security groups)",
    "examples": [
      {
        "description": "获取所有本地组",
        "code": "Get-LocalGroup"
      },
      {
        "description": "获取 'Administrators' 本地组",
        "code": "Get-LocalGroup -Name Administrators"
      }
    ],
    "notes": "Cmdlet属于 `Microsoft.PowerShell.LocalAccounts` 模块。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "New-LocalGroup",
    "summary": "创建本地安全组 (Creates a local security group)",
    "examples": [
      {
        "description": "创建一个名为 'MyAdmins' 的本地组",
        "code": "New-LocalGroup -Name \"MyAdmins\" -Description \"本地管理组\""
      }
    ],
    "notes": "创建新的本地安全组。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Remove-LocalGroup",
    "summary": "删除本地安全组 (Removes a local security group)",
    "examples": [
      {
        "description": "删除名为 'OldGroup' 的本地组",
        "code": "Remove-LocalGroup -Name \"OldGroup\" -Confirm:$false"
      }
    ],
    "notes": "删除本地安全组。请注意，删除组不会删除组内的成员账户。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Add-LocalGroupMember",
    "summary": "将用户或组添加到本地组 (Adds a user or group to a local group)",
    "examples": [
      {
        "description": "将本地用户 'NewUser' 添加到 'Administrators' 组",
        "code": "Add-LocalGroupMember -Group \"Administrators\" -Member \"NewUser\""
      },
      {
        "description": "将域用户 'DOMAIN\\DomainUser' 添加到 'Remote Desktop Users' 组",
        "code": "Add-LocalGroupMember -Group \"Remote Desktop Users\" -Member \"DOMAIN\\DomainUser\""
      }
    ],
    "notes": "将一个或多个用户账户或组添加到指定的本地组。`Member` 可以是本地账户名、域账户名或SID。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Remove-LocalGroupMember",
    "summary": "将用户或组从本地组中移除 (Removes a user or group from a local group)",
    "examples": [
      {
        "description": "从 'Users' 组中移除本地用户 'OldUser'",
        "code": "Remove-LocalGroupMember -Group \"Users\" -Member \"OldUser\" -Confirm:$false"
      }
    ],
    "notes": "将一个或多个用户账户或组从指定的本地组中移除。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Get-LocalGroupMember",
    "summary": "获取本地组的成员 (Gets the members of a local group)",
    "examples": [
      {
        "description": "获取 'Administrators' 组的所有成员",
        "code": "Get-LocalGroupMember -Group \"Administrators\""
      },
      {
        "description": "获取所有本地组的成员",
        "code": "Get-LocalGroup | ForEach-Object { Get-LocalGroupMember -Group $_.Name }"
      }
    ],
    "notes": "列出指定本地组中的所有成员。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Get-NetFirewallRule",
    "summary": "获取网络防火墙规则 (Gets network firewall rules)",
    "examples": [
      {
        "description": "获取所有启用的入站防火墙规则",
        "code": "Get-NetFirewallRule -Direction Inbound -Action Allow -Enabled $true"
      },
      {
        "description": "查找允许TCP端口80入站的规则",
        "code": "Get-NetFirewallRule | Where-Object { $_.Action -eq 'Allow' -and $_.Direction -eq 'Inbound' -and $_.LocalPort -like '*80*' }"
      },
      {
        "description": "获取名称中包含 'SMB' 的防火墙规则",
        "code": "Get-NetFirewallRule -DisplayName *SMB*"
      }
    ],
    "notes": "用于查询Windows Defender防火墙（高级安全）的规则。这是管理防火墙规则的主要Cmdlet。它比旧的 `netsh advfirewall` 命令更PowerShell化。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "New-NetFirewallRule",
    "summary": "创建网络防火墙规则 (Creates a new network firewall rule)",
    "examples": [
      {
        "description": "创建一个入站规则，允许TCP端口3389 (RDP)",
        "code": "New-NetFirewallRule -DisplayName \"Allow RDP Inbound\" -Direction Inbound -Action Allow -Protocol TCP -LocalPort 3389 -Profile Any -Enabled $true"
      },
      {
        "description": "创建一个出站规则，阻止程序 'notepad.exe' 的网络访问",
        "code": "New-NetFirewallRule -DisplayName \"Block Notepad Outbound\" -Direction Outbound -Action Block -Program \"%SystemRoot%\\System32\\notepad.exe\" -Profile Any -Enabled $true"
      },
      {
        "description": "创建一个入站规则，仅允许来自特定IP地址的SSH连接",
        "code": "New-NetFirewallRule -DisplayName \"Allow SSH from Specific IP\" -Direction Inbound -Action Allow -Protocol TCP -LocalPort 22 -RemoteAddress \"192.168.1.100\" -Profile Private -Enabled $true"
      }
    ],
    "notes": "创建新的防火墙规则。参数众多，但 `-DisplayName`、`-Direction`、`-Action`、`-Protocol`、`-LocalPort`/`-RemotePort`、`-Program`、`-RemoteAddress`、`-Profile` 和 `-Enabled` 是最常用的。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Remove-NetFirewallRule",
    "summary": "删除网络防火墙规则 (Removes network firewall rules)",
    "examples": [
      {
        "description": "删除显示名称为 'Allow RDP Inbound' 的防火墙规则",
        "code": "Remove-NetFirewallRule -DisplayName \"Allow RDP Inbound\" -Confirm:$false"
      },
      {
        "description": "删除所有出站的 'Block' 规则",
        "code": "Get-NetFirewallRule -Direction Outbound -Action Block | Remove-NetFirewallRule -Confirm:$false"
      }
    ],
    "notes": "删除一个或多个防火墙规则。使用 `-Confirm:$false` 可避免交互式确认。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Get-NetTCPConnection",
    "summary": "获取TCP连接信息 (Gets information about the TCP connections)",
    "examples": [
      {
        "description": "列出所有当前的TCP连接",
        "code": "Get-NetTCPConnection"
      },
      {
        "description": "查找所有处于 'Listen' 状态的TCP连接",
        "code": "Get-NetTCPConnection | Where-Object { $_.State -eq 'Listen' }"
      },
      {
        "description": "查找本地端口为80的TCP连接",
        "code": "Get-NetTCPConnection -LocalPort 80"
      }
    ],
    "notes": "提供类似于 `netstat` 命令的功能，但以对象形式返回结果，更易于筛选和处理。常见的 `State` 包括 `Listen`, `Established`, `TimeWait`, `CloseWait` 等。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Get-NetRoute",
    "summary": "获取网络路由表信息 (Gets information about network routes)",
    "examples": [
      {
        "description": "显示所有网络路由",
        "code": "Get-NetRoute"
      },
      {
        "description": "查找默认网关路由",
        "code": "Get-NetRoute -DestinationPrefix \"0.0.0.0/0\""
      }
    ],
    "notes": "获取TCP/IP路由表的信息，等同于 `route print` 命令。结果以对象形式呈现，便于脚本处理。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Get-NetConnectionProfile",
    "summary": "获取网络连接配置文件 (Gets a network connection profile)",
    "examples": [
      {
        "description": "获取所有网络连接配置文件",
        "code": "Get-NetConnectionProfile"
      },
      {
        "description": "获取特定网络接口的连接配置文件",
        "code": "Get-NetConnectionProfile -InterfaceAlias \"Ethernet\""
      }
    ],
    "notes": "返回网络连接的类别（域、私有、公共）。这个信息对于防火墙规则和网络发现非常重要。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Set-NetConnectionProfile",
    "summary": "设置网络连接配置文件 (Sets a network connection profile)",
    "examples": [
      {
        "description": "将 'Ethernet' 接口的网络类别设置为 'Private'",
        "code": "Set-NetConnectionProfile -InterfaceAlias \"Ethernet\" -NetworkCategory Private"
      },
      {
        "description": "将所有当前处于 'Public' 状态的连接切换到 'Private' (慎用！)",
        "code": "Get-NetConnectionProfile | Where-Object { $_.NetworkCategory -eq 'Public' } | Set-NetConnectionProfile -NetworkCategory Private"
      }
    ],
    "notes": "修改网络连接的类别。更改类别会影响防火墙规则的应用方式。在受控环境中，将网络类别设置为 `DomainAuthenticated` 或 `Private` 通常比 `Public` 更安全。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Get-ScheduledTask",
    "summary": "获取计划任务 (Gets scheduled tasks)",
    "examples": [
      {
        "description": "获取所有已注册的计划任务",
        "code": "Get-ScheduledTask"
      },
      {
        "description": "获取名称中包含 'Backup' 的计划任务",
        "code": "Get-ScheduledTask -TaskName *Backup*"
      },
      {
        "description": "获取所有正在运行的计划任务",
        "code": "Get-ScheduledTask | Where-Object { $_.State -eq 'Running' }"
      }
    ],
    "notes": "用于管理Windows计划任务。它取代了旧的 `schtasks.exe` 命令行工具，提供更结构化的对象输出。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Disable-ScheduledTask",
    "summary": "禁用计划任务 (Disables a scheduled task)",
    "examples": [
      {
        "description": "禁用名为 'MyDailyTask' 的计划任务",
        "code": "Disable-ScheduledTask -TaskName \"MyDailyTask\""
      }
    ],
    "notes": "禁用计划任务，使其不再按计划运行，但任务本身不会被删除。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Enable-ScheduledTask",
    "summary": "启用计划任务 (Enables a scheduled task)",
    "examples": [
      {
        "description": "启用名为 'MyDailyTask' 的计划任务",
        "code": "Enable-ScheduledTask -TaskName \"MyDailyTask\""
      }
    ],
    "notes": "启用之前被禁用的计划任务，使其恢复按计划运行。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Start-ScheduledTask",
    "summary": "启动计划任务 (Starts a scheduled task)",
    "examples": [
      {
        "description": "立即启动名为 'MyBackupTask' 的计划任务",
        "code": "Start-ScheduledTask -TaskName \"MyBackupTask\""
      }
    ],
    "notes": "手动触发计划任务的立即执行，不影响其预设的触发器。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Stop-ScheduledTask",
    "summary": "停止计划任务 (Stops a scheduled task)",
    "examples": [
      {
        "description": "停止名为 'LongRunningReport' 的正在运行的计划任务",
        "code": "Stop-ScheduledTask -TaskName \"LongRunningReport\""
      }
    ],
    "notes": "停止一个当前正在执行的计划任务。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Unregister-ScheduledTask",
    "summary": "注销计划任务 (Unregisters a scheduled task)",
    "examples": [
      {
        "description": "注销名为 'OldTask' 的计划任务",
        "code": "Unregister-ScheduledTask -TaskName \"OldTask\" -Confirm:$false"
      }
    ],
    "notes": "从系统中永久删除计划任务。使用 `-Confirm:$false` 可以跳过确认。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Register-ScheduledTask",
    "summary": "注册计划任务 (Registers a scheduled task)",
    "examples": [
      {
        "description": "注册一个每天上午9点运行PowerShell脚本的计划任务",
        "code": "$action = New-ScheduledTaskAction -Execute 'powershell.exe' -Argument '-File \"C:\\Scripts\\DailyReport.ps1\"'\n$trigger = New-ScheduledTaskTrigger -Daily -At '9am'\nRegister-ScheduledTask -TaskName \"DailyReportGenerator\" -Action $action -Trigger $trigger -Description \"每天上午生成报告\" -User 'System'"
      },
      {
        "description": "注册一个当用户登录时运行的计划任务",
        "code": "$action = New-ScheduledTaskAction -Execute 'C:\\Path\\To\\MyApp.exe'\n$trigger = New-ScheduledTaskTrigger -AtLogon\nRegister-ScheduledTask -TaskName \"LaunchMyAppAtLogon\" -Action $action -Trigger $trigger"
      }
    ],
    "notes": "这是创建新计划任务的核心Cmdlet。它通常需要配合 `New-ScheduledTaskAction` (定义任务执行的命令) 和 `New-ScheduledTaskTrigger` (定义何时执行任务) 一起使用。`User` 参数指定任务运行的凭据，如 `System`、`Administrator` 或其他指定的用户。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "New-ScheduledTaskAction",
    "summary": "创建计划任务操作 (Creates a scheduled task action)",
    "examples": [
      {
        "description": "创建一个执行特定EXE文件的操作",
        "code": "New-ScheduledTaskAction -Execute 'C:\\Program Files\\MyTool\\tool.exe' -Argument '-config C:\\config.txt'"
      },
      {
        "description": "创建一个执行PowerShell脚本的操作",
        "code": "New-ScheduledTaskAction -Execute 'powershell.exe' -Argument '-NoProfile -NonInteractive -File \"C:\\Scripts\\MyScript.ps1\"'"
      }
    ],
    "notes": "定义计划任务要执行的程序或脚本及其参数。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "New-ScheduledTaskTrigger",
    "summary": "创建计划任务触发器 (Creates a scheduled task trigger)",
    "examples": [
      {
        "description": "创建一个每天上午10点运行的触发器",
        "code": "New-ScheduledTaskTrigger -Daily -At '10am'"
      },
      {
        "description": "创建一个每周一和周五下午5点运行的触发器",
        "code": "New-ScheduledTaskTrigger -Weekly -DaysOfWeek Monday,Friday -At '5pm'"
      },
      {
        "description": "创建一个任务注册后立即运行，并重复每隔15分钟持续4小时的触发器",
        "code": "New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -Minutes 15) -RepetitionDuration (New-TimeSpan -Hours 4)"
      }
    ],
    "notes": "定义计划任务何时触发的条件。支持多种触发类型，如 `-Once` (一次性), `-Daily` (每天), `-Weekly` (每周), `-Monthly` (每月), `-AtLogon` (登录时), `-AtStartup` (启动时), `-OnEvent` (当事件发生时)。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Set-ScheduledTask",
    "summary": "修改计划任务 (Modifies a scheduled task)",
    "examples": [
      {
        "description": "修改现有计划任务的描述",
        "code": "Set-ScheduledTask -TaskName \"MyTask\" -Description \"新的任务描述\""
      },
      {
        "description": "修改现有计划任务的动作 (例如更改执行的脚本路径)",
        "code": "$newTaskAction = New-ScheduledTaskAction -Execute 'powershell.exe' -Argument '-File \"C:\\Scripts\\NewScript.ps1\"'\nSet-ScheduledTask -TaskName \"MyTask\" -Action $newTaskAction"
      }
    ],
    "notes": "用于修改已存在的计划任务的配置，例如更改其动作、触发器或描述。通常你需要先获取任务对象，然后修改其属性，最后再 `Set-ScheduledTask`。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Get-Disk",
    "summary": "获取磁盘对象 (Gets the specified Disk objects or all Disk objects)",
    "examples": [
      {
        "description": "获取所有物理磁盘",
        "code": "Get-Disk"
      },
      {
        "description": "获取磁盘号为0的磁盘",
        "code": "Get-Disk -Number 0"
      },
      {
        "description": "查找脱机状态的磁盘",
        "code": "Get-Disk | Where-Object { $_.IsOffline -eq $true }"
      }
    ],
    "notes": "用于磁盘管理，可以替代 `diskpart` 和图形界面的磁盘管理工具。Cmdlet属于 `Storage` 模块。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Initialize-Disk",
    "summary": "初始化磁盘 (Initializes a RAW disk for first use)",
    "examples": [
      {
        "description": "初始化磁盘号为1的磁盘为GPT分区样式",
        "code": "Initialize-Disk -Number 1 -PartitionStyle GPT -Confirm:$false"
      }
    ],
    "notes": "将一个未初始化的磁盘（RAW状态）转换为可用的磁盘，选择MBR或GPT分区样式。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Get-Partition",
    "summary": "获取分区信息 (Gets a Partition object or all Partition objects)",
    "examples": [
      {
        "description": "获取磁盘号为0的所有分区",
        "code": "Get-Partition -DiskNumber 0"
      },
      {
        "description": "获取所有带有驱动器号的分区",
        "code": "Get-Partition | Where-Object {$_.DriveLetter}"
      }
    ],
    "notes": "获取磁盘上的分区信息。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "New-Partition",
    "summary": "创建分区 (Creates a new Partition object)",
    "examples": [
      {
        "description": "在磁盘号为1的未分配空间上创建新的主分区，并分配驱动器号'F'",
        "code": "Get-Disk -Number 1 | New-Partition -UseMaximumSize -DriveLetter F"
      },
      {
        "description": "在磁盘号为2的磁盘上创建20GB的主分区",
        "code": "Get-Disk -Number 2 | New-Partition -Size 20GB"
      }
    ],
    "notes": "在未分配的磁盘空间上创建新的分区。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Format-Volume",
    "summary": "格式化卷 (Formats one or more volumes)",
    "examples": [
      {
        "description": "将驱动器D:格式化为NTFS，并命名为 'DataDrive'",
        "code": "Format-Volume -DriveLetter D -FileSystem NTFS -NewFileSystemLabel \"DataDrive\" -Confirm:$false"
      },
      {
        "description": "快速格式化驱动器E:为exFAT",
        "code": "Format-Volume -DriveLetter E -FileSystem exFAT -QuickFormat -Confirm:$false"
      }
    ],
    "notes": "对卷进行格式化。`FileSystem` 参数支持 NTFS, FAT32, exFAT, ReFS。使用 `-Confirm:$false` 在脚本中自动确认。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Get-Volume",
    "summary": "获取卷信息 (Gets the specified Volume objects or all Volume objects)",
    "examples": [
      {
        "description": "获取所有卷",
        "code": "Get-Volume"
      },
      {
        "description": "获取驱动器号为C:的卷",
        "code": "Get-Volume -DriveLetter C"
      },
      {
        "description": "显示所有NTFS卷及其剩余空间",
        "code": "Get-Volume | Where-Object { $_.FileSystem -eq 'NTFS' } | Select-Object DriveLetter, FileSystem, Size, SizeRemaining, @{Name='UsedPercent'; Expression={($_.Size - $_.SizeRemaining) / $_.Size * 100 | ForEach-Object { \"{0:N2}%\" -f $_ }}}"
      }
    ],
    "notes": "获取卷（文件系统）的详细信息，包括文件系统类型、大小、剩余空间等。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Optimize-Volume",
    "summary": "优化卷 (Optimizes a volume or removes unnecessary files)",
    "examples": [
      {
        "description": "对C盘进行碎片整理和分析",
        "code": "Optimize-Volume -DriveLetter C -Defrag -Analyze"
      },
      {
        "description": "对所有NTFS卷进行Trim优化 (适用于SSD)",
        "code": "Get-Volume | Where-Object { $_.FileSystem -eq 'NTFS' -and $_.DriveType -eq 'Fixed' } | Optimize-Volume -Retrim -Verbose"
      }
    ],
    "notes": "执行磁盘优化操作，如碎片整理 (HDD) 或Trim (SSD)。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Mount-DiskImage",
    "summary": "挂载虚拟硬盘或ISO文件 (Mounts a virtual hard disk (VHD) or ISO file)",
    "examples": [
      {
        "description": "挂载一个ISO文件",
        "code": "Mount-DiskImage -ImagePath 'C:\\Temp\\Windows.iso'"
      },
      {
        "description": "挂载一个VHDX文件，并将其设为只读",
        "code": "Mount-DiskImage -ImagePath 'C:\\VirtualDisks\\MyVM.vhdx' -ReadOnly"
      }
    ],
    "notes": "将ISO文件或虚拟硬盘文件（VHD/VHDX）挂载为本地磁盘驱动器。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Dismount-DiskImage",
    "summary": "卸载虚拟硬盘或ISO文件 (Dismounts a virtual hard disk (VHD) or ISO file)",
    "examples": [
      {
        "description": "卸载已挂载的ISO文件",
        "code": "Dismount-DiskImage -ImagePath 'C:\\Temp\\Windows.iso'"
      },
      {
        "description": "卸载所有已挂载的磁盘镜像",
        "code": "Get-DiskImage | Dismount-DiskImage"
      }
    ],
    "notes": "卸载之前通过 `Mount-DiskImage` 挂载的虚拟磁盘或ISO文件。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Get-Acl",
    "summary": "获取文件或文件夹的访问控制列表 (ACL) (Gets the access control list (ACL) of a file or folder)",
    "examples": [
      {
        "description": "获取文件 'C:\\file.txt' 的ACL",
        "code": "Get-Acl -Path \"C:\\file.txt\""
      },
      {
        "description": "获取文件夹 'C:\\Data' 及其子项的ACL",
        "code": "Get-ChildItem -Path \"C:\\Data\" -Recurse | Get-Acl"
      },
      {
        "description": "仅显示特定用户的访问规则",
        "code": "(Get-Acl \"C:\\file.txt\").Access | Where-Object { $_.IdentityReference -like '*User1*' }"
      }
    ],
    "notes": "用于查看文件系统对象（文件、文件夹）或注册表项的权限信息。返回一个 `AccessControlList` 对象，你可以检查其 `Access` 属性来查看具体的访问规则（Access Control Entries - ACEs）。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Set-Acl",
    "summary": "设置文件或文件夹的访问控制列表 (ACL) (Sets the access control list (ACL) of a file or folder)",
    "examples": [
      {
        "description": "复制一个文件的ACL到另一个文件",
        "code": "$acl = Get-Acl \"C:\\Source.txt\"\nSet-Acl -Path \"C:\\Destination.txt\" -AclObject $acl"
      },
      {
        "description": "为文件夹添加一个允许读写的访问规则",
        "code": "$path = \"C:\\SharedFolder\"\n$acl = Get-Acl $path\n$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule(\"Users\", \"Read,Write\", \"Allow\")\n$acl.AddAccessRule($accessRule)\nSet-Acl -Path $path -AclObject $acl"
      },
      {
        "description": "移除特定用户的访问规则 (需先获取规则对象)",
        "code": "$path = \"C:\\SharedFolder\"\n$acl = Get-Acl $path\n$ruleToRemove = $acl.Access | Where-Object { $_.IdentityReference -eq 'DOMAIN\\OldUser' -and $_.FileSystemRights -eq 'Read'}\n$acl.RemoveAccessRule($ruleToRemove)\nSet-Acl -Path $path -AclObject $acl"
      }
    ],
    "notes": "用于修改文件系统对象或注册表项的权限。通常需要先用 `Get-Acl` 获取现有ACL，然后修改该ACL对象（添加/移除规则），最后用 `Set-Acl` 应用更改。操作复杂，需非常小心，错误配置可能导致访问问题。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Get-Certificate",
    "summary": "获取证书 (Gets certificates)",
    "examples": [
      {
        "description": "获取当前用户个人证书存储区的所有证书",
        "code": "Get-Certificate -StoreLocation CurrentUser -StoreName My"
      },
      {
        "description": "按主题名称查找证书",
        "code": "Get-Certificate -StoreLocation LocalMachine -StoreName Root -Subject \"CN=Microsoft Root Certificate Authority\""
      },
      {
        "description": "按指纹查找特定证书",
        "code": "Get-Certificate -Thumbprint \"YourCertificateThumbprintHere\""
      }
    ],
    "notes": "用于从证书存储区（如个人、根、受信任的发布者等）查询证书。对于管理Web服务器、WSUS、RDP等服务的证书非常有用。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Export-Certificate",
    "summary": "导出证书 (Exports a certificate)",
    "examples": [
      {
        "description": "导出证书到CER文件 (不带私钥)",
        "code": "Get-Certificate -Thumbprint \"YourThumbprint\" | Export-Certificate -FilePath \"C:\\temp\\mycert.cer\""
      },
      {
        "description": "导出证书到Pfx文件 (带私钥，需密码)",
        "code": "Get-Certificate -Thumbprint \"YourThumbprint\" | Export-PfxCertificate -FilePath \"C:\\temp\\mycert.pfx\" -Password (Read-Host -AsSecureString \"请输入Pfx密码\")"
      }
    ],
    "notes": "用于将证书从证书存储区导出到文件。导出Pfx格式时，需要私钥，且通常需要提供密码来保护。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Remove-Certificate",
    "summary": "移除证书 (Removes a certificate)",
    "examples": [
      {
        "description": "按指纹移除证书",
        "code": "Remove-Certificate -Thumbprint \"YourThumbprint\" -Confirm:$false"
      },
      {
        "description": "移除所有过期证书 (谨慎操作！)",
        "code": "Get-Certificate -StoreLocation LocalMachine -StoreName My | Where-Object { $_.NotAfter -lt (Get-Date) } | Remove-Certificate -Confirm:$false"
      }
    ],
    "notes": "从证书存储区中删除证书。谨慎使用，因为这可能会影响依赖该证书的服务。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Get-ExecutionPolicy",
    "summary": "获取PowerShell执行策略 (Gets the PowerShell execution policies)",
    "examples": [
      {
        "description": "获取当前会话的执行策略",
        "code": "Get-ExecutionPolicy"
      },
      {
        "description": "获取所有范围的执行策略",
        "code": "Get-ExecutionPolicy -List"
      }
    ],
    "notes": "PowerShell执行策略是一种安全功能，控制PowerShell加载配置文件和运行脚本的条件。了解当前策略对于脚本执行至关重要。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Set-ExecutionPolicy",
    "summary": "设置PowerShell执行策略 (Sets the PowerShell execution policies)",
    "examples": [
      {
        "description": "将当前用户的执行策略设置为 'RemoteSigned'",
        "code": "Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser"
      },
      {
        "description": "将本地机器的执行策略设置为 'Bypass' (不推荐在生产环境使用)",
        "code": "Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine -Force"
      }
    ],
    "notes": "用于修改PowerShell执行脚本的策略。\n- **`Restricted` (默认):** 不加载任何配置文件，不运行任何脚本。\n- **`AllSigned`:** 运行所有经过数字签名的脚本，包括本地脚本和远程脚本。\n- **`RemoteSigned` (推荐):** 运行本地脚本，但要求从互联网下载的脚本必须经过数字签名。\n- **`Unrestricted`:** 允许运行所有脚本，不检查签名。存在安全风险。\n- **`Bypass`:** 不阻止任何操作，不显示警告或提示。最高风险。\n- **`Undefined`:** 删除当前作用域的执行策略。如果所有作用域都为 `Undefined`，则默认使用 `Restricted`。\n`Scope` 参数：`CurrentUser`, `LocalMachine`, `Process`, `UserPolicy`, `MachinePolicy`。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Get-PackageProvider",
    "summary": "获取程序包提供程序 (Gets a list of package providers that are connected to Package Management)",
    "examples": [
      {
        "description": "获取所有可用的程序包提供程序",
        "code": "Get-PackageProvider"
      },
      {
        "description": "查找名为 'NuGet' 的提供程序",
        "code": "Get-PackageProvider -Name NuGet"
      }
    ],
    "notes": "属于 `PackageManagement` 模块。用于发现和管理PowerShell的包管理能力，如安装、卸载软件包。PowerShellGet模块也依赖于它。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Install-PackageProvider",
    "summary": "安装程序包提供程序 (Installs a package provider)",
    "examples": [
      {
        "description": "安装 'NuGet' 程序包提供程序 (用于安装PowerShell模块)",
        "code": "Install-PackageProvider -Name NuGet -Force -Confirm:$false"
      },
      {
        "description": "安装 'Chocolatey' 程序包提供程序 (需系统上先安装Chocolatey)",
        "code": "Install-PackageProvider -Name Chocolatey -Force"
      }
    ],
    "notes": "在安装模块或软件包之前，通常需要先安装相应的包提供程序，如NuGet（PowerShell Gallery的依赖）、Chocolatey等。使用 `-Force` 可以跳过版本检查和确认提示。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Find-Package",
    "summary": "查找可用的软件包 (Finds available packages in connected package sources)",
    "examples": [
      {
        "description": "从所有已注册的源查找名为 '7zip' 的软件包",
        "code": "Find-Package -Name 7zip"
      },
      {
        "description": "从 'PowerShellGallery' 源查找名为 'Pester' 的模块",
        "code": "Find-Package -Name Pester -Source PowerShellGallery"
      }
    ],
    "notes": "用于搜索已注册的包源中可用的软件包。通常用于在安装前确认软件包是否存在。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Install-Package",
    "summary": "安装软件包 (Installs packages from connected package sources)",
    "examples": [
      {
        "description": "安装 '7zip' 软件包 (假设已安装Chocolatey提供程序)",
        "code": "Install-Package -Name 7zip -ProviderName Chocolatey"
      },
      {
        "description": "安装 'Pester' 模块 (PowerShell模块，通过NuGet提供程序)",
        "code": "Install-Package -Name Pester -ProviderName NuGet -Scope CurrentUser"
      }
    ],
    "notes": "安装软件包。`ProviderName` 是关键参数，用于指定通过哪个包提供程序进行安装。`Scope` 参数指定安装范围 (当前用户或所有用户)。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Get-Package",
    "summary": "获取已安装的软件包 (Gets a list of software packages that are installed on the local computer)",
    "examples": [
      {
        "description": "获取所有已安装的软件包",
        "code": "Get-Package"
      },
      {
        "description": "获取名为 'Google Chrome' 的已安装应用程序",
        "code": "Get-Package -Name \"Google Chrome\""
      },
      {
        "description": "获取所有已安装的PowerShell模块",
        "code": "Get-Package -ProviderName NuGet"
      }
    ],
    "notes": "列出系统上已安装的软件包。结果可能包括通过MSI、Chocolatey、winget等安装的软件以及PowerShell模块。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Uninstall-Package",
    "summary": "卸载软件包 (Uninstalls one or more packages)",
    "examples": [
      {
        "description": "卸载名为 '7zip' 的软件包 (假设通过Chocolatey安装)",
        "code": "Uninstall-Package -Name 7zip -ProviderName Chocolatey -Confirm:$false"
      },
      {
        "description": "卸载 'Pester' PowerShell模块",
        "code": "Uninstall-Package -Name Pester -ProviderName NuGet -Confirm:$false"
      }
    ],
    "notes": "卸载已安装的软件包。与 `Install-Package` 类似，`ProviderName` 参数是必需的，以指定正确的卸载方式。",
    "shell_type": "Cmdlet",
    "platform": "Windows"
  },
  {
    "name": "Import-Module ActiveDirectory",
    "summary": "导入Active Directory PowerShell模块 (Imports the Active Directory PowerShell module)",
    "examples": [
      {
        "description": "导入Active Directory模块",
        "code": "Import-Module ActiveDirectory"
      },
      {
        "description": "强制重新导入Active Directory模块，即使它已加载",
        "code": "Import-Module ActiveDirectory -Force"
      },
      {
        "description": "在导入时指定域控制器 (可选，但推荐用于大型或多域环境)",
        "code": "Import-Module ActiveDirectory -Server \"DC01.yourdomain.com\""
      }
    ],
    "notes": "这是使用任何Active Directory管理Cmdlet的首要步骤。该模块不是Windows默认加载的，需要显式导入。它适用于 **Windows/AD** 环境。\n\n**安装Active Directory模块 (RSAT)**：\n- **Windows 10/11 (最新版本):**\n  `Add-WindowsCapability -Online -Name Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0`\n- **Windows Server (作为域控制器):** 随AD DS角色一同安装。\n  `Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools`\n- **Windows Server (作为管理工具):**\n  `Install-WindowsFeature -Name RSAT-ADDS`\n- **旧版Windows 10或通过GUI安装:** 打开'设置' -> '应用' -> '可选功能' -> '添加功能'，搜索并安装 'RSAT: Active Directory 域服务和轻型目录服务工具'。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Get-ADDomain",
    "summary": "获取Active Directory域的信息 (Gets information about an Active Directory domain)",
    "examples": [
      {
        "description": "获取当前用户所在域的详细信息",
        "code": "Get-ADDomain"
      },
      {
        "description": "获取特定属性 (如DomainMode、DNSRoot)",
        "code": "Get-ADDomain | Select-Object DomainMode, DNSRoot, ForestMode"
      }
    ],
    "notes": "此命令用于检索当前或指定Active Directory域的配置信息和操作状态。这对于了解域的健康状况和功能级别非常有用。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Get-ADForest",
    "summary": "获取Active Directory林的信息 (Gets information about an Active Directory forest)",
    "examples": [
      {
        "description": "获取当前用户所在林的详细信息",
        "code": "Get-ADForest"
      },
      {
        "description": "获取特定属性 (如RootDomain、Domains、ForestMode)",
        "code": "Get-ADForest | Select-Object RootDomain, Domains, ForestMode, GlobalCatalogs"
      }
    ],
    "notes": "此命令用于检索当前或指定Active Directory林的配置信息和操作状态。这对于了解林的结构、信任关系和功能级别非常有用。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Get-ADDomainController",
    "summary": "获取一个或多个Active Directory域控制器 (Gets one or more Active Directory domain controllers)",
    "examples": [
      {
        "description": "获取当前域中所有域控制器的信息",
        "code": "Get-ADDomainController -Filter *"
      },
      {
        "description": "获取特定站点中的域控制器",
        "code": "Get-ADDomainController -Site \"Default-First-Site-Name\""
      },
      {
        "description": "获取一个域控制器，并检查其可用性",
        "code": "Get-ADDomainController -Discover | Select-Object Name, IPAddress, IsGlobalCatalog, OperatingSystem, @{Name='PingStatus';Expression={Test-Connection $_.IPAddress -Count 1 -Quiet}}"
      },
      {
        "description": "获取主域控制器 (PDC Emulator)",
        "code": "(Get-ADDomain).PDCEmulator | Get-ADDomainController"
      }
    ],
    "notes": "此命令用于查询和列出域控制器的信息，可以根据各种条件进行筛选。对于监控DC健康状况、查找特定DC或进行跨DC操作非常重要。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Set-ADDefaultParameter",
    "summary": "为Active Directory Cmdlet设置默认参数值 (Sets default parameter values for Active Directory cmdlets)",
    "examples": [
      {
        "description": "设置所有AD Cmdlet默认连接到指定的域控制器",
        "code": "Set-ADDefaultParameter -Server \"DC02.yourdomain.com\""
      },
      {
        "description": "设置默认的搜索基础DN",
        "code": "Set-ADDefaultParameter -SearchBase \"OU=Users,DC=yourdomain,DC=com\""
      },
      {
        "description": "清除默认参数设置",
        "code": "Set-ADDefaultParameter -Clear"
      }
    ],
    "notes": "此命令允许你为所有后续的Active Directory Cmdlet设置默认参数值，例如默认连接的域控制器或默认的LDAP搜索基础。这在自动化脚本中非常有用，可以避免在每个命令中重复指定相同的参数。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Get-ADUser",
    "summary": "获取一个或多个Active Directory用户 (Gets one or more Active Directory users)",
    "examples": [
      {
        "description": "按SAMAccountName获取用户 'john.doe' 的默认属性",
        "code": "Get-ADUser -Identity \"john.doe\""
      },
      {
        "description": "获取所有用户，并指定获取额外的属性 (如 EmailAddress, Department)",
        "code": "Get-ADUser -Filter * -Properties EmailAddress, Department"
      },
      {
        "description": "查找所有已禁用的用户账户",
        "code": "Get-ADUser -Filter {Enabled -eq $false}"
      },
      {
        "description": "查找所有用户，并按Display Name排序，然后显示DisplayName和LastLogonTimestamp",
        "code": "Get-ADUser -Filter * -Properties LastLogonTimestamp | Sort-Object DisplayName | Format-Table DisplayName, LastLogonTimestamp"
      },
      {
        "description": "根据电子邮件地址查找用户",
        "code": "Get-ADUser -Filter \"EmailAddress -eq 'john.doe@yourdomain.com'\""
      }
    ],
    "notes": "这是Active Directory用户管理中最常用的命令之一。`-Filter` 参数支持LDAP语法，也可以使用PowerShell表达式，后者更推荐。`-Properties *` 会获取所有可用的属性，但通常性能较差，建议只指定所需的属性。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "New-ADUser",
    "summary": "创建新的Active Directory用户 (Creates a new Active Directory user)",
    "examples": [
      {
        "description": "在指定OU中创建一个新用户，并设置密码和账户启用状态",
        "code": "$password = Read-Host -AsSecureString \"请输入密码\"\nNew-ADUser -Name \"Jane Smith\" -SamAccountName \"jane.smith\" -GivenName \"Jane\" -Surname \"Smith\" -Path \"OU=Sales,OU=Users,DC=yourdomain,DC=com\" -AccountPassword $password -Enabled $true -DisplayName \"Jane Smith (Sales)\""
      },
      {
        "description": "创建一个不带密码且强制首次登录修改密码的用户",
        "code": "New-ADUser -Name \"temp.user\" -SamAccountName \"temp.user\" -Path \"OU=Temp,OU=Users,DC=yourdomain,DC=com\" -ChangePasswordAtLogon $true -Enabled $true"
      }
    ],
    "notes": "此命令用于在Active Directory中创建新的用户对象。`-AccountPassword` 参数需要一个`SecureString`对象，以提高安全性。`-Path` 参数指定了新用户所在的组织单位(OU)的DN。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Set-ADUser",
    "summary": "修改Active Directory用户的属性 (Modifies the properties of an Active Directory user)",
    "examples": [
      {
        "description": "修改用户 'john.doe' 的部门和办公室",
        "code": "Set-ADUser -Identity \"john.doe\" -Department \"IT\" -Office \"Building A, Floor 2\""
      },
      {
        "description": "禁用用户 'jane.smith' 的账户",
        "code": "Set-ADUser -Identity \"jane.smith\" -Enabled $false"
      },
      {
        "description": "将用户的 DisplayName 设置为特定的格式",
        "code": "$user = Get-ADUser -Identity \"old.name\"\nSet-ADUser -Identity $user -DisplayName \"$($user.Surname), $($user.GivenName)\""
      },
      {
        "description": "设置用户密码永不过期",
        "code": "Set-ADUser -Identity \"john.doe\" -PasswordNeverExpires $true"
      }
    ],
    "notes": "此命令用于修改现有Active Directory用户的各种属性。你可以通过`-Identity`参数指定用户（可以是`SamAccountName`, `DistinguishedName`, `UserPrincipalName`等）。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Remove-ADUser",
    "summary": "从Active Directory中删除用户 (Removes an Active Directory user)",
    "examples": [
      {
        "description": "删除用户 'temp.user' (会提示确认)",
        "code": "Remove-ADUser -Identity \"temp.user\""
      },
      {
        "description": "不提示确认强制删除用户 'old.user'",
        "code": "Remove-ADUser -Identity \"old.user\" -Confirm:$false"
      },
      {
        "description": "查找所有禁用超过90天的用户并删除",
        "code": "Get-ADUser -Filter {Enabled -eq $false -and LastLogonDate -lt (Get-Date).AddDays(-90)} | ForEach-Object { Remove-ADUser -Identity $_.SamAccountName -Confirm:$false }"
      }
    ],
    "notes": "此命令用于从Active Directory中删除一个或多个用户对象。这是一个破坏性操作，使用时应谨慎。`-Confirm:$false` 参数可以跳过确认提示，但在脚本中应小心使用。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Enable-ADAccount",
    "summary": "启用Active Directory账户 (Enables an Active Directory account)",
    "examples": [
      {
        "description": "启用用户 'john.doe' 的账户",
        "code": "Enable-ADAccount -Identity \"john.doe\""
      }
    ],
    "notes": "此命令专门用于启用已被禁用的AD用户或计算机账户。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Disable-ADAccount",
    "summary": "禁用Active Directory账户 (Disables an Active Directory account)",
    "examples": [
      {
        "description": "禁用用户 'jane.smith' 的账户",
        "code": "Disable-ADAccount -Identity \"jane.smith\""
      }
    ],
    "notes": "此命令专门用于禁用AD用户或计算机账户。禁用账户后，用户将无法登录。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Unlock-ADAccount",
    "summary": "解锁Active Directory账户 (Unlocks an Active Directory account)",
    "examples": [
      {
        "description": "解锁用户 'user.locked' 的账户",
        "code": "Unlock-ADAccount -Identity \"user.locked\""
      },
      {
        "description": "解锁所有被锁定的用户账户",
        "code": "Search-ADAccount -LockedOut | Unlock-ADAccount"
      }
    ],
    "notes": "此命令用于解锁因多次密码尝试失败而被锁定的Active Directory用户账户。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Set-ADAccountPassword",
    "summary": "设置Active Directory账户的密码 (Sets the password for an Active Directory account)",
    "examples": [
      {
        "description": "为用户 'john.doe' 重置密码 (需要提供SecureString)",
        "code": "$newPassword = Read-Host -AsSecureString \"请输入新密码\"\nSet-ADAccountPassword -Identity \"john.doe\" -NewPassword $newPassword -Reset"
      },
      {
        "description": "设置用户密码并强制下次登录时更改",
        "code": "$newPassword = Read-Host -AsSecureString \"请输入新密码\"\nSet-ADAccountPassword -Identity \"jane.smith\" -NewPassword $newPassword -Reset -PassThru | Set-ADUser -ChangePasswordAtLogon $true"
      }
    ],
    "notes": "此命令用于重置或更改Active Directory用户账户的密码。`-Reset` 参数表示强制重置，不关心旧密码。与`Set-ADUser`相比，此命令更专注于密码操作。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Move-ADObject",
    "summary": "移动Active Directory对象到另一个位置 (Moves an Active Directory object to another location)",
    "examples": [
      {
        "description": "将用户 'john.doe' 从 'OU=OldOU' 移动到 'OU=NewOU'",
        "code": "$user = Get-ADUser -Identity \"john.doe\"\nMove-ADObject -Identity $user -TargetPath \"OU=NewOU,DC=yourdomain,DC=com\""
      },
      {
        "description": "移动一个OU及其所有子对象",
        "code": "$oldOU = Get-ADOrganizationalUnit -Identity \"OU=OldSales,DC=yourdomain,DC=com\"\nMove-ADObject -Identity $oldOU -TargetPath \"OU=Departments,DC=yourdomain,DC=com\""
      }
    ],
    "notes": "此命令用于将任何Active Directory对象（如用户、计算机、组、OU）从其当前位置移动到新的OU或容器中。这会改变对象的`DistinguishedName`。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Get-ADGroup",
    "summary": "获取一个或多个Active Directory组 (Gets one or more Active Directory groups)",
    "examples": [
      {
        "description": "获取所有安全组",
        "code": "Get-ADGroup -Filter {GroupCategory -eq 'Security'}"
      },
      {
        "description": "获取特定组 'Domain Admins' 的所有属性",
        "code": "Get-ADGroup -Identity \"Domain Admins\" -Properties *"
      },
      {
        "description": "查找所有作用域为 'Global' 的组",
        "code": "Get-ADGroup -Filter {GroupScope -eq 'Global'} | Select-Object Name, GroupScope"
      }
    ],
    "notes": "此命令用于查询和列出Active Directory组的信息，可以根据名称、类型或LDAP过滤器进行筛选。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "New-ADGroup",
    "summary": "创建新的Active Directory组 (Creates a new Active Directory group)",
    "examples": [
      {
        "description": "在指定OU中创建一个新的全局安全组",
        "code": "New-ADGroup -Name \"IT Helpdesk\" -GroupScope Global -GroupCategory Security -Path \"OU=Groups,DC=yourdomain,DC=com\" -Description \"IT Helpdesk Team Members\""
      },
      {
        "description": "创建一个通用分发组",
        "code": "New-ADGroup -Name \"All Employees\" -GroupScope Universal -GroupCategory Distribution -Path \"OU=Distribution Lists,DC=yourdomain,DC=com\" -DisplayName \"All Company Employees\""
      }
    ],
    "notes": "此命令用于在Active Directory中创建新的组对象。你需要指定组的名称、作用域(`GroupScope`: DomainLocal, Global, Universal) 和类别(`GroupCategory`: Security, Distribution) 以及所在的OU路径。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Set-ADGroup",
    "summary": "修改Active Directory组的属性 (Modifies the properties of an Active Directory group)",
    "examples": [
      {
        "description": "修改组 'IT Helpdesk' 的描述",
        "code": "Set-ADGroup -Identity \"IT Helpdesk\" -Description \"Team responsible for IT support and user assistance.\""
      },
      {
        "description": "将组的 DisplayName 修改为不同于Name的值",
        "code": "Set-ADGroup -Identity \"OldGroupName\" -DisplayName \"New Display Name for Group\""
      }
    ],
    "notes": "此命令用于修改现有Active Directory组的各种属性。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Remove-ADGroup",
    "summary": "从Active Directory中删除组 (Removes an Active Directory group)",
    "examples": [
      {
        "description": "删除组 'OldGroup' (会提示确认)",
        "code": "Remove-ADGroup -Identity \"OldGroup\""
      },
      {
        "description": "不提示确认强制删除组 'TempUsersGroup'",
        "code": "Remove-ADGroup -Identity \"TempUsersGroup\" -Confirm:$false"
      }
    ],
    "notes": "此命令用于从Active Directory中删除一个或多个组对象。这是一个破坏性操作，使用时应谨慎。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Add-ADGroupMember",
    "summary": "向Active Directory组中添加一个或多个成员 (Adds one or more members to an Active Directory group)",
    "examples": [
      {
        "description": "将用户 'john.doe' 添加到 'IT Helpdesk' 组",
        "code": "Add-ADGroupMember -Identity \"IT Helpdesk\" -Members \"john.doe\""
      },
      {
        "description": "将多个用户添加到组",
        "code": "Add-ADGroupMember -Identity \"Sales Team\" -Members \"jane.smith\", \"peter.jones\""
      },
      {
        "description": "使用管道将用户添加到组",
        "code": "Get-ADUser -Filter {Department -eq 'Marketing'} | Add-ADGroupMember -Identity \"Marketing Users\""
      }
    ],
    "notes": "此命令用于向Active Directory组中添加用户、计算机或其它组作为成员。`-Members` 参数可以接受单个成员或成员数组。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Remove-ADGroupMember",
    "summary": "从Active Directory组中移除一个或多个成员 (Removes one or more members from an Active Directory group)",
    "examples": [
      {
        "description": "将用户 'john.doe' 从 'IT Helpdesk' 组中移除",
        "code": "Remove-ADGroupMember -Identity \"IT Helpdesk\" -Members \"john.doe\""
      },
      {
        "description": "移除多个成员",
        "code": "Remove-ADGroupMember -Identity \"Sales Team\" -Members \"jane.smith\", \"peter.jones\""
      }
    ],
    "notes": "此命令用于从Active Directory组中移除成员。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Get-ADGroupMember",
    "summary": "获取Active Directory组的成员 (Gets the members of an Active Directory group)",
    "examples": [
      {
        "description": "获取 'Domain Admins' 组的所有直接成员",
        "code": "Get-ADGroupMember -Identity \"Domain Admins\""
      },
      {
        "description": "递归获取组 'Sales Team' 的所有成员 (包括嵌套组的成员)",
        "code": "Get-ADGroupMember -Identity \"Sales Team\" -Recursive"
      },
      {
        "description": "只获取组的用户成员",
        "code": "Get-ADGroupMember -Identity \"IT Support\" | Where-Object {$_.objectClass -eq 'user'}"
      }
    ],
    "notes": "此命令用于列出指定Active Directory组的成员。`-Recursive` 参数对于查看嵌套组成员非常有用。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Get-ADPrincipalGroupMembership",
    "summary": "获取Active Directory主体所属的所有组 (Gets all of the Active Directory groups that a principal belongs to)",
    "examples": [
      {
        "description": "获取用户 'john.doe' 所属的所有组 (包括其直接成员的组和通过嵌套组间接所属的组)",
        "code": "Get-ADPrincipalGroupMembership -Identity \"john.doe\""
      },
      {
        "description": "获取计算机账户 'CLIENT01$' 所属的组",
        "code": "Get-ADPrincipalGroupMembership -Identity \"CLIENT01$\""
      },
      {
        "description": "只列出用户直接所属的组 (不递归)",
        "code": "Get-ADPrincipalGroupMembership -Identity \"john.doe\" -Recursive:$false"
      }
    ],
    "notes": "此命令用于查询用户、计算机或组所属的所有组，包括直接成员和通过嵌套关系继承的组成员身份。与`Get-ADGroupMember`正好相反，它从主体的角度查询。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Get-ADComputer",
    "summary": "获取一个或多个Active Directory计算机 (Gets one or more Active Directory computers)",
    "examples": [
      {
        "description": "获取所有域内计算机的默认属性",
        "code": "Get-ADComputer -Filter *"
      },
      {
        "description": "获取特定计算机 'WINSERVER01' 的所有属性",
        "code": "Get-ADComputer -Identity \"WINSERVER01\" -Properties *"
      },
      {
        "description": "查找所有操作系统为 'Windows Server 2022 Standard' 的计算机",
        "code": "Get-ADComputer -Filter \"OperatingSystem -like '*Windows Server 2022 Standard*'\" | Select-Object Name, OperatingSystem, LastLogonDate"
      },
      {
        "description": "查找所有最近30天内没有登录的计算机",
        "code": "Get-ADComputer -Filter {LastLogonDate -lt (Get-Date).AddDays(-30)} -Properties LastLogonDate"
      }
    ],
    "notes": "此命令用于查询和列出Active Directory计算机对象的信息。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "New-ADComputer",
    "summary": "创建新的Active Directory计算机 (Creates a new Active Directory computer)",
    "examples": [
      {
        "description": "在指定OU中创建新的计算机对象",
        "code": "New-ADComputer -Name \"NEWSERVER01\" -Path \"OU=Servers,DC=yourdomain,DC=com\" -Description \"New production web server\""
      },
      {
        "description": "创建计算机对象并指定其DNS主机名",
        "code": "New-ADComputer -Name \"DESKTOP05\" -Path \"OU=Workstations,DC=yourdomain,DC=com\" -DNSHostName \"desktop05.yourdomain.com\""
      }
    ],
    "notes": "此命令用于在Active Directory中创建新的计算机对象。这通常在将物理或虚拟机加入域之前预创建对象时使用。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Set-ADComputer",
    "summary": "修改Active Directory计算机的属性 (Modifies the properties of an Active Directory computer)",
    "examples": [
      {
        "description": "修改计算机 'WINSERVER01' 的描述",
        "code": "Set-ADComputer -Identity \"WINSERVER01\" -Description \"Main SQL Server\""
      },
      {
        "description": "禁用计算机 'OLDLAPTOP' 的账户",
        "code": "Set-ADComputer -Identity \"OLDLAPTOP\" -Enabled $false"
      }
    ],
    "notes": "此命令用于修改现有Active Directory计算机的各种属性。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Remove-ADComputer",
    "summary": "从Active Directory中删除计算机 (Removes an Active Directory computer)",
    "examples": [
      {
        "description": "删除计算机 'OLDSERVER' (会提示确认)",
        "code": "Remove-ADComputer -Identity \"OLDSERVER\""
      },
      {
        "description": "不提示确认强制删除计算机 'TEMPVM'",
        "code": "Remove-ADComputer -Identity \"TEMPVM\" -Confirm:$false"
      }
    ],
    "notes": "此命令用于从Active Directory中删除一个或多个计算机对象。这是一个破坏性操作，使用时应谨慎。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Disable-ADComputer",
    "summary": "禁用Active Directory计算机账户 (Disables an Active Directory computer account)",
    "examples": [
      {
        "description": "禁用计算机 'LAPTOP01' 的账户",
        "code": "Disable-ADComputer -Identity \"LAPTOP01\""
      }
    ],
    "notes": "此命令专门用于禁用AD计算机账户。禁用后，该计算机将无法通过域进行身份验证。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Enable-ADComputer",
    "summary": "启用Active Directory计算机账户 (Enables an Active Directory computer account)",
    "examples": [
      {
        "description": "启用计算机 'LAPTOP01' 的账户",
        "code": "Enable-ADComputer -Identity \"LAPTOP01\""
      }
    ],
    "notes": "此命令专门用于启用已被禁用的AD计算机账户。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Reset-ADComputerPassword",
    "summary": "重置Active Directory计算机账户的密码 (Resets the password for an Active Directory computer account)",
    "examples": [
      {
        "description": "重置计算机 'DESKTOP01' 的账户密码 (通常用于解决计算机无法重新加入域的问题)",
        "code": "Reset-ADComputerPassword -Identity \"DESKTOP01\""
      }
    ],
    "notes": "此命令用于重置Active Directory中计算机账户的密码。计算机账户密码通常会自动管理，但在某些故障排除场景（如计算机无法重新加入域）时，可能需要手动重置。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Get-ADOrganizationalUnit",
    "summary": "获取一个或多个Active Directory组织单位 (Gets one or more Active Directory organizational units)",
    "examples": [
      {
        "description": "获取指定路径下的所有OU",
        "code": "Get-ADOrganizationalUnit -Filter * -SearchBase \"DC=yourdomain,DC=com\" -SearchScope OneLevel"
      },
      {
        "description": "按名称获取特定OU 'Sales Department'",
        "code": "Get-ADOrganizationalUnit -Identity \"OU=Sales Department,DC=yourdomain,DC=com\""
      },
      {
        "description": "查找所有受意外删除保护的OU",
        "code": "Get-ADOrganizationalUnit -Filter {ProtectedFromAccidentalDeletion -eq $true}"
      }
    ],
    "notes": "此命令用于查询和列出Active Directory组织单位(OU)的信息。OU是管理AD对象的基本容器，用于委派权限和应用组策略。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "New-ADOrganizationalUnit",
    "summary": "创建新的Active Directory组织单位 (Creates a new Active Directory organizational unit)",
    "examples": [
      {
        "description": "在域根目录下创建一个新的OU 'Marketing'",
        "code": "New-ADOrganizationalUnit -Name \"Marketing\" -Path \"DC=yourdomain,DC=com\" -Description \"Marketing Department OU\""
      },
      {
        "description": "在现有OU下创建子OU，并启用意外删除保护",
        "code": "New-ADOrganizationalUnit -Name \"Europe\" -Path \"OU=Global Offices,DC=yourdomain,DC=com\" -ProtectedFromAccidentalDeletion $true"
      }
    ],
    "notes": "此命令用于在Active Directory中创建新的组织单位。`ProtectedFromAccidentalDeletion` 参数是一个重要的安全特性，默认情况下为`$true`。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Set-ADOrganizationalUnit",
    "summary": "修改Active Directory组织单位的属性 (Modifies the properties of an Active Directory organizational unit)",
    "examples": [
      {
        "description": "修改OU 'Sales' 的描述",
        "code": "Set-ADOrganizationalUnit -Identity \"OU=Sales,DC=yourdomain,DC=com\" -Description \"Sales team and related resources.\""
      },
      {
        "description": "禁用OU的意外删除保护",
        "code": "Set-ADOrganizationalUnit -Identity \"OU=TestOU,DC=yourdomain,DC=com\" -ProtectedFromAccidentalDeletion $false"
      }
    ],
    "notes": "此命令用于修改现有Active Directory组织单位的各种属性。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Remove-ADOrganizationalUnit",
    "summary": "从Active Directory中删除组织单位 (Removes an Active Directory organizational unit)",
    "examples": [
      {
        "description": "删除空OU 'TestOU' (会提示确认)",
        "code": "Remove-ADOrganizationalUnit -Identity \"OU=TestOU,DC=yourdomain,DC=com\""
      },
      {
        "description": "强制删除非空OU 'OldProjects' 及其所有子对象 (请务必小心)",
        "code": "Remove-ADOrganizationalUnit -Identity \"OU=OldProjects,DC=yourdomain,DC=com\" -Recursive -Confirm:$false"
      }
    ],
    "notes": "此命令用于从Active Directory中删除一个或多个组织单位。如果OU包含任何子对象，必须使用`-Recursive`参数才能删除。如果OU受意外删除保护，需要先通过`Set-ADOrganizationalUnit -ProtectedFromAccidentalDeletion $false`禁用保护。这是一个破坏性操作，使用时应极其谨慎。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Get-ADObject",
    "summary": "获取一个或多个Active Directory对象 (Gets one or more Active Directory objects)",
    "examples": [
      {
        "description": "通过 DistinguishedName 获取特定对象 (例如，一个联系人对象)",
        "code": "Get-ADObject -Identity \"CN=John Doe Contact,CN=Users,DC=yourdomain,DC=com\""
      },
      {
        "description": "使用LDAP过滤器查找所有类型为 'contact' 的对象",
        "code": "Get-ADObject -LDAPFilter \"(objectClass=contact)\" -SearchBase \"DC=yourdomain,DC=com\""
      },
      {
        "description": "查找所有已删除的对象 (需要恢复权限)",
        "code": "Get-ADObject -Filter * -IncludeDeletedObjects -Properties isDeleted"
      },
      {
        "description": "查找所有服务账户 (ms-DS-ManagedServiceAccount 和 Group Managed Service Accounts)",
        "code": "Get-ADObject -Filter \"(objectClass=msDS-ManagedServiceAccount)|(objectClass=msDS-GroupManagedServiceAccount)\""
      }
    ],
    "notes": "此命令是获取Active Directory中任何类型对象的通用Cmdlet。当没有特定Cmdlet（如`Get-ADUser`、`Get-ADGroup`）来查询某种对象时，`Get-ADObject`就变得非常有用。它提供了最灵活的过滤选项，包括复杂的LDAP过滤器。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Search-ADAccount",
    "summary": "搜索Active Directory账户 (Searches Active Directory accounts)",
    "examples": [
      {
        "description": "查找所有被锁定的账户",
        "code": "Search-ADAccount -LockedOut"
      },
      {
        "description": "查找所有已禁用且超过90天未登录的用户",
        "code": "Search-ADAccount -AccountDisabled -AccountInactive -TimeSpan 90.00:00:00 -UsersOnly"
      },
      {
        "description": "查找所有密码永不过期的用户",
        "code": "Search-ADAccount -PasswordNeverExpires -UsersOnly"
      },
      {
        "description": "查找所有已过期密码的用户",
        "code": "Search-ADAccount -PasswordExpired -UsersOnly"
      },
      {
        "description": "查找最近30天内创建的所有用户账户",
        "code": "Search-ADAccount -AccountCreated -TimeSpan 30.00:00:00 -UsersOnly"
      }
    ],
    "notes": "此命令是一个高级搜索工具，专注于查找满足特定账户状态（如禁用、锁定、密码过期、不活动等）的用户或计算机账户。它简化了复杂的过滤操作。适用于 **Windows/AD** 环境。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ActiveDirectory)"
  },
  {
    "name": "Get-AdfsProperties",
    "summary": "获取ADFS服务器的属性 (Gets properties of the ADFS server)",
    "examples": [
      {
        "description": "获取ADFS服务器的当前配置属性",
        "code": "Get-AdfsProperties"
      },
      {
        "description": "查看ADFS服务的Federation Service Identifier",
        "code": "(Get-AdfsProperties).FederationServiceIdentifier"
      }
    ],
    "notes": "此命令用于检索ADFS（Active Directory Federation Services）服务器的全局配置设置。这对于诊断、审计和管理ADFS联邦服务非常有用。适用于 **Windows/AD** 环境。\n\n**前提条件:** 需安装 'AD FS Management' 工具或 'ADFS' PowerShell模块。在ADFS服务器上默认安装。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ADFS)"
  },
  {
    "name": "Get-AdfsRelyingPartyTrust",
    "summary": "获取ADFS信赖方信任 (Gets ADFS relying party trusts)",
    "examples": [
      {
        "description": "获取所有已配置的信赖方信任",
        "code": "Get-AdfsRelyingPartyTrust"
      },
      {
        "description": "获取名为 'Office 365 Identity Platform' 的信赖方信任的详细信息",
        "code": "Get-AdfsRelyingPartyTrust -Name \"Office 365 Identity Platform\""
      },
      {
        "description": "查找所有启用了 Ws-Federation 协议的信赖方信任",
        "code": "Get-AdfsRelyingPartyTrust | Where-Object { $_.ProtocolProfile -eq 'http://schemas.microsoft.com/ws/2007/04/federation/Claimxact' }"
      }
    ],
    "notes": "此命令用于检索ADFS中配置的信赖方信任信息。信赖方信任定义了ADFS如何与外部服务或应用程序（作为服务提供商）进行身份验证和声明交换。适用于 **Windows/AD** 环境。\n\n**前提条件:** 需安装 'AD FS Management' 工具或 'ADFS' PowerShell模块。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ADFS)"
  },
  {
    "name": "Add-AdfsRelyingPartyTrust",
    "summary": "添加ADFS信赖方信任 (Adds an ADFS relying party trust)",
    "examples": [
      {
        "description": "通过联邦元数据URL添加信赖方信任 (最常见的方式)",
        "code": "Add-AdfsRelyingPartyTrust -Name \"My SaaS App\" -MetadataUrl \"https://myapp.com/federationmetadata/2007-06/federationmetadata.xml\" -PassThru"
      },
      {
        "description": "手动添加信赖方信任，指定标识符和WS-Federation被动终结点URL",
        "code": "Add-AdfsRelyingPartyTrust -Name \"Custom Web App\" -Identifier \"urn:myapp:custom\" -WsFedEndpoint \"https://customapp.com/adfs\" -EncryptClaims $false -SigningCertificateRevocationCheck None -EncryptionCertificateRevocationCheck None"
      }
    ],
    "notes": "此命令用于在ADFS中配置新的信赖方信任，允许ADFS向新的应用程序或服务发布安全令牌。这是集成新应用程序进行单点登录（SSO）的关键步骤。适用于 **Windows/AD** 环境。\n\n**前提条件:** 需安装 'AD FS Management' 工具或 'ADFS' PowerShell模块。",
    "shell_type": "PowerShell Cmdlet (Requires Module: ADFS)"
  },
  {
    "name": "Get-DnsServerZone",
    "summary": "获取DNS服务器上的DNS区域 (Gets DNS zones on a DNS server)",
    "examples": [
      {
        "description": "获取本地DNS服务器上的所有DNS区域",
        "code": "Get-DnsServerZone"
      },
      {
        "description": "获取名为 'yourdomain.com' 的区域信息",
        "code": "Get-DnsServerZone -Name \"yourdomain.com\""
      },
      {
        "description": "在远程DNS服务器上获取区域信息",
        "code": "Get-DnsServerZone -ComputerName \"DC01.yourdomain.com\""
      },
      {
        "description": "获取所有Active Directory集成的区域",
        "code": "Get-DnsServerZone | Where-Object {$_.IsDsIntegrated}"
      }
    ],
    "notes": "此命令用于查询DNS服务器上配置的DNS区域。这对于管理和检查DNS配置非常重要，尤其是在Active Directory集成DNS的环境中。适用于 **Windows/AD** 环境。\n\n**前提条件:** 需安装 'DNS Server Tools' (RSAT的DNS部分) 或在DNS服务器本身上运行。",
    "shell_type": "PowerShell Cmdlet (Requires Module: DnsServer)"
  },
  {
    "name": "Get-DnsServerResourceRecord",
    "summary": "获取DNS服务器上的DNS资源记录 (Gets DNS resource records on a DNS server)",
    "examples": [
      {
        "description": "获取区域 'yourdomain.com' 中的所有资源记录",
        "code": "Get-DnsServerResourceRecord -ZoneName \"yourdomain.com\""
      },
      {
        "description": "获取区域 'yourdomain.com' 中名为 'www' 的A记录",
        "code": "Get-DnsServerResourceRecord -ZoneName \"yourdomain.com\" -Name \"www\" -RRType A"
      },
      {
        "description": "获取特定区域的所有MX记录",
        "code": "Get-DnsServerResourceRecord -ZoneName \"yourdomain.com\" -RRType MX"
      },
      {
        "description": "通过管道筛选并显示特定IP的A记录",
        "code": "Get-DnsServerResourceRecord -ZoneName \"yourdomain.com\" -RRType A | Where-Object {$_.RecordData.IPv4Address -eq '192.168.1.10'}"
      }
    ],
    "notes": "此命令用于查询DNS区域内的各种资源记录（如A记录、MX记录、CNAME记录等）。它是进行DNS故障排除和管理的核心工具。适用于 **Windows/AD** 环境。\n\n**前提条件:** 需安装 'DNS Server Tools' (RSAT的DNS部分) 或在DNS服务器本身上运行。",
    "shell_type": "PowerShell Cmdlet (Requires Module: DnsServer)"
  },
  {
    "name": "Add-DnsServerResourceRecordA",
    "summary": "添加一个A类型的DNS资源记录 (Adds an A type DNS resource record)",
    "examples": [
      {
        "description": "在区域 'yourdomain.com' 中添加一个A记录",
        "code": "Add-DnsServerResourceRecordA -ZoneName \"yourdomain.com\" -Name \"webserver\" -IPv4Address \"192.168.1.100\" -TimeToLive 3600"
      },
      {
        "description": "添加A记录并自动创建关联的PTR记录 (反向查找记录)",
        "code": "Add-DnsServerResourceRecordA -ZoneName \"yourdomain.com\" -Name \"fileserver\" -IPv4Address \"192.168.1.101\" -CreatePtr"
      }
    ],
    "notes": "此命令用于在DNS区域中创建IPv4地址的A记录。`-CreatePtr`参数可以方便地同时创建对应的反向查找记录。适用于 **Windows/AD** 环境。\n\n**前提条件:** 需安装 'DNS Server Tools' (RSAT的DNS部分) 或在DNS服务器本身上运行。",
    "shell_type": "PowerShell Cmdlet (Requires Module: DnsServer)"
  },
  {
    "name": "Remove-DnsServerResourceRecord",
    "summary": "移除DNS服务器上的DNS资源记录 (Removes DNS resource records from a DNS server)",
    "examples": [
      {
        "description": "移除区域 'yourdomain.com' 中名为 'oldserver' 的A记录",
        "code": "Remove-DnsServerResourceRecord -ZoneName \"yourdomain.com\" -RRType A -Name \"oldserver\" -RecordData \"192.168.1.50\" -Confirm:$false"
      },
      {
        "description": "移除所有特定IP地址的A记录 (使用管道和`Get-DnsServerResourceRecord`)",
        "code": "Get-DnsServerResourceRecord -ZoneName \"yourdomain.com\" -RRType A | Where-Object {$_.RecordData.IPv4Address -eq '192.168.1.50'} | Remove-DnsServerResourceRecord -Confirm:$false"
      }
    ],
    "notes": "此命令用于从DNS区域中删除资源记录。删除时需要指定区域名、记录类型、名称和记录数据，以确保删除正确的记录。由于操作的破坏性，通常建议使用`-Confirm:$false`进行静默删除时格外小心。适用于 **Windows/AD** 环境。\n\n**前提条件:** 需安装 'DNS Server Tools' (RSAT的DNS部分) 或在DNS服务器本身上运行。",
    "shell_type": "PowerShell Cmdlet (Requires Module: DnsServer)"
  },
  {
    "name": "Install-Module Az",
    "summary": "安装Azure PowerShell模块，它是管理Azure资源的主要工具。",
    "examples": [
      {
        "description": "为当前用户安装Az模块及其所有依赖项",
        "code": "Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force"
      },
      {
        "description": "为所有用户安装Az模块（需要管理员权限）",
        "code": "Install-Module -Name Az -Scope AllUsers -Repository PSGallery -Force"
      },
      {
        "description": "更新已安装的Az模块到最新版本",
        "code": "Update-Module -Name Az -Force"
      }
    ],
    "notes": "此命令用于安装 `Az` 模块，它是Microsoft官方推荐的Azure管理模块，取代了旧的 `AzureRM` 和 `AzureAD` 模块。安装前请确保PowerShell版本为5.1或更高，并且已安装 `PowerShellGet` 和 `PackageManagement` 模块（通常Windows 10/Server 2016+默认包含，旧系统可能需要更新）。`PSGallery` 是PowerShell官方模块库。",
    "shell_type": "PowerShell Cmdlet (PackageManagement/PowerShellGet Module)"
  },
  {
    "name": "Connect-AzAccount",
    "summary": "连接到Azure账户，进行身份验证以管理Azure资源。",
    "examples": [
      {
        "description": "通过交互式浏览器登录（最常用）",
        "code": "Connect-AzAccount"
      },
      {
        "description": "指定订阅ID登录",
        "code": "Connect-AzAccount -SubscriptionId \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\""
      },
      {
        "description": "指定租户ID登录（适用于多租户环境）",
        "code": "Connect-AzAccount -TenantId \"yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy\""
      },
      {
        "description": "使用服务主体（Service Principal）和证书登录（自动化脚本常用）",
        "code": "Connect-AzAccount -ServicePrincipal -Tenant \"yourtenant.onmicrosoft.com\" -ApplicationId \"yourAppId\" -CertificateThumbprint \"yourCertThumbprint\""
      }
    ],
    "notes": "这是Azure PowerShell操作的第一步。成功连接后，PowerShell会话将与Azure订阅关联，允许执行后续的Azure管理命令。建议使用交互式登录，它会弹出浏览器进行Azure AD身份验证。对于自动化脚本，应使用服务主体或托管标识进行非交互式登录。",
    "shell_type": "PowerShell Cmdlet (Az.Accounts Module)",
    "context": "Azure"
  },
  {
    "name": "Get-AzContext",
    "summary": "获取当前Azure PowerShell会话的上下文信息，包括当前订阅、租户和账户。",
    "examples": [
      {
        "description": "获取当前所有已登录的上下文",
        "code": "Get-AzContext"
      },
      {
        "description": "获取当前选定的上下文",
        "code": "(Get-AzContext).Subscription.Name"
      }
    ],
    "notes": "在管理多个Azure订阅时非常有用。它显示当前会话正在操作哪个账户和订阅。你可以有多个已登录的上下文，但一次只有一个是“当前”的。",
    "shell_type": "PowerShell Cmdlet (Az.Accounts Module)",
    "context": "Azure"
  },
  {
    "name": "Set-AzContext",
    "summary": "设置或切换当前Azure PowerShell会话的活动上下文（即选定要操作的订阅或租户）。",
    "examples": [
      {
        "description": "按订阅名称切换上下文",
        "code": "Set-AzContext -Subscription \"我的开发订阅\""
      },
      {
        "description": "按订阅ID切换上下文",
        "code": "Set-AzContext -SubscriptionId \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\""
      },
      {
        "description": "切换到特定租户下的订阅",
        "code": "Set-AzContext -SubscriptionName \"Dev Sub\" -TenantId \"yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy\""
      }
    ],
    "notes": "当你在一个账户下拥有多个订阅时，此命令允许你轻松切换当前操作的目标订阅。这是多订阅管理的关键命令。",
    "shell_type": "PowerShell Cmdlet (Az.Accounts Module)",
    "context": "Azure"
  },
  {
    "name": "Get-AzSubscription",
    "summary": "获取当前账户可访问的所有Azure订阅的信息。",
    "examples": [
      {
        "description": "列出所有可访问的订阅",
        "code": "Get-AzSubscription"
      },
      {
        "description": "按名称查找特定订阅",
        "code": "Get-AzSubscription -SubscriptionName \"生产环境订阅\""
      },
      {
        "description": "仅显示已启用的订阅",
        "code": "Get-AzSubscription | Where-Object { $_.State -eq 'Enabled' }"
      }
    ],
    "notes": "用于查看与当前Azure账户关联的所有订阅及其状态、ID等信息。可以帮助你确认订阅访问权限或查找特定订阅。",
    "shell_type": "PowerShell Cmdlet (Az.Accounts Module)",
    "context": "Azure"
  },
  {
    "name": "Disconnect-AzAccount",
    "summary": "断开当前PowerShell会话与Azure账户的连接。",
    "examples": [
      {
        "description": "断开当前所有Azure连接",
        "code": "Disconnect-AzAccount"
      },
      {
        "description": "断开指定用户名的Azure连接",
        "code": "Disconnect-AzAccount -Username \"user@example.com\""
      }
    ],
    "notes": "用于清除当前的Azure登录凭据和上下文。在完成Azure操作后，尤其是在共享环境中，建议断开连接以确保安全。",
    "shell_type": "PowerShell Cmdlet (Az.Accounts Module)",
    "context": "Azure"
  },
  {
    "name": "Get-AzAccessToken",
    "summary": "获取当前Azure PowerShell会话的访问令牌，可用于访问其他Azure服务或API。",
    "examples": [
      {
        "description": "获取用于Azure Resource Manager的访问令牌",
        "code": "Get-AzAccessToken"
      },
      {
        "description": "获取用于特定资源URI的访问令牌（如Azure Graph API）",
        "code": "Get-AzAccessToken -ResourceUrl \"https://graph.microsoft.com/\""
      },
      {
        "description": "将令牌保存到变量并解码查看",
        "code": "$token = Get-AzAccessToken\n($token.Token | ConvertFrom-Json).upn"
      }
    ],
    "notes": "对于需要直接与Azure REST API或第三方工具集成的自动化脚本非常有用。此令牌是Bearer Token，包含用于授权的凭据信息，应妥善保管。",
    "shell_type": "PowerShell Cmdlet (Az.Accounts Module)",
    "context": "Azure"
  },
  {
    "name": "Get-AzResourceGroup",
    "summary": "获取一个或多个Azure资源组的信息。",
    "examples": [
      {
        "description": "列出订阅中的所有资源组",
        "code": "Get-AzResourceGroup"
      },
      {
        "description": "获取名为 'MyResourceGroup' 的资源组",
        "code": "Get-AzResourceGroup -Name \"MyResourceGroup\""
      },
      {
        "description": "获取位于 'East US' 区域的所有资源组",
        "code": "Get-AzResourceGroup -Location \"eastus\""
      }
    ],
    "notes": "资源组是Azure中资源的逻辑容器。它是管理Azure资源的基本单位。通过此命令可以快速查看和筛选你的资源组。",
    "shell_type": "PowerShell Cmdlet (Az.Resources Module)",
    "context": "Azure"
  },
  {
    "name": "New-AzResourceGroup",
    "summary": "在Azure订阅中创建一个新的资源组。",
    "examples": [
      {
        "description": "在 'East US' 区域创建一个名为 'MyNewResourceGroup' 的资源组",
        "code": "New-AzResourceGroup -Name \"MyNewResourceGroup\" -Location \"eastus\""
      },
      {
        "description": "创建带有标签的资源组",
        "code": "New-AzResourceGroup -Name \"ProjectAlphaRG\" -Location \"westus2\" -Tag @{ Project=\"Alpha\"; Environment=\"Dev\" }"
      }
    ],
    "notes": "创建资源前，通常需要先创建对应的资源组。资源组名称在订阅内必须是唯一的，且区域一旦创建不可更改。标签是组织和管理Azure资源的重要方式。",
    "shell_type": "PowerShell Cmdlet (Az.Resources Module)",
    "context": "Azure"
  },
  {
    "name": "Remove-AzResourceGroup",
    "summary": "删除一个Azure资源组及其包含的所有资源。",
    "examples": [
      {
        "description": "删除名为 'MyOldResourceGroup' 的资源组（会提示确认）",
        "code": "Remove-AzResourceGroup -Name \"MyOldResourceGroup\""
      },
      {
        "description": "强制删除资源组及其所有资源，不提示确认",
        "code": "Remove-AzResourceGroup -Name \"MyOldResourceGroup\" -Force"
      },
      {
        "description": "在后台作业中删除资源组（非阻塞）",
        "code": "Remove-AzResourceGroup -Name \"MyOldResourceGroup\" -Force -AsJob"
      }
    ],
    "notes": "这是一个非常强大的命令，执行后**无法撤销**。删除资源组会同时删除其内部的所有资源，包括虚拟机、存储账户、数据库等。在生产环境中使用时务必谨慎，并确认无误。",
    "shell_type": "PowerShell Cmdlet (Az.Resources Module)",
    "context": "Azure"
  },
  {
    "name": "Move-AzResource",
    "summary": "将Azure资源从一个资源组移动到另一个资源组。",
    "examples": [
      {
        "description": "移动一个虚拟机到新的资源组",
        "code": "$vm = Get-AzVM -ResourceGroupName \"SourceRG\" -Name \"MyVM\"\nMove-AzResource -ResourceId $vm.Id -DestinationResourceGroupName \"TargetRG\""
      },
      {
        "description": "移动多个资源到目标资源组",
        "code": "$resourcesToMove = Get-AzResource -ResourceGroupName \"OldRG\" | Where-Object { $_.ResourceType -like \"Microsoft.Compute/*\" }\n$resourcesToMove | Move-AzResource -DestinationResourceGroupName \"NewRG\""
      }
    ],
    "notes": "并非所有资源类型都支持移动操作。移动资源通常不会改变资源的区域。移动完成后，资源的Resource ID会更新。移动操作可能需要一些时间，期间资源可能无法访问。移动前务必查阅Azure官方文档，了解特定资源类型的限制。",
    "shell_type": "PowerShell Cmdlet (Az.Resources Module)",
    "context": "Azure"
  },
  {
    "name": "Get-AzVM",
    "summary": "获取一个或多个Azure虚拟机的信息。",
    "examples": [
      {
        "description": "获取订阅中所有虚拟机的信息",
        "code": "Get-AzVM"
      },
      {
        "description": "获取指定资源组中的所有虚拟机",
        "code": "Get-AzVM -ResourceGroupName \"MyVMsRG\""
      },
      {
        "description": "获取特定虚拟机的信息，并显示其状态",
        "code": "Get-AzVM -ResourceGroupName \"MyVMsRG\" -Name \"MyWebAppVM\" -Status"
      },
      {
        "description": "获取所有正在运行的Linux虚拟机",
        "code": "Get-AzVM -Status | Where-Object { $_.PowerState -eq 'VM running' -and $_.OsType -eq 'Linux' }"
      }
    ],
    "notes": "`Get-AzVM` 是管理Azure虚拟机的核心命令。`-Status` 参数对于查看虚拟机当前的运行状态（如正在运行、已停止、正在解除分配等）至关重要。输出对象包含了VM的各种属性，如大小、操作系统、网络接口、存储等。",
    "shell_type": "PowerShell Cmdlet (Az.Compute Module)",
    "context": "Azure"
  },
  {
    "name": "New-AzVM",
    "summary": "在Azure中创建一个新的虚拟机。",
    "examples": [
      {
        "description": "创建一个简单的Windows虚拟机（简化示例，实际更复杂）",
        "code": "$rgName = \"MyNewVMsRG\"\n$location = \"eastus\"\n$vmName = \"MyWinVM\"\n$cred = Get-Credential\n\n# 创建网络配置\n$vnet = New-AzVirtualNetwork -ResourceGroupName $rgName -Location $location -Name \"MyVNet\" -AddressPrefix \"10.0.0.0/16\"\n$subnet = Add-AzVirtualNetworkSubnetConfig -Name \"default\" -AddressPrefix \"10.0.0.0/24\" -VirtualNetwork $vnet\n$vnet | Set-AzVirtualNetwork\n\n$pip = New-AzPublicIpAddress -ResourceGroupName $rgName -Location $location -Name \"MyWinVMPublicIP\" -AllocationMethod Static -Sku Standard\n$nic = New-AzNetworkInterface -ResourceGroupName $rgName -Location $location -Name \"MyWinVMNIC\" -SubnetId $subnet.Id -PublicIpAddressId $pip.Id\n\n# 创建VM配置\n$vmConfig = New-AzVMConfig -VMName $vmName -VMSize Standard_DS1_v2 | `\n    Set-AzVMOperatingSystem -Windows -ComputerName $vmName -Credential $cred -ProvisionVMAgent -EnableAutoUpdate | `\n    Set-AzVMSourceImage -PublisherName \"MicrosoftWindowsServer\" -Offer \"WindowsServer\" -Skus \"2019-Datacenter\" -Version \"latest\" | `\n    Add-AzVMNetworkInterface -Id $nic.Id\n\n# 创建VM\nNew-AzVM -ResourceGroupName $rgName -Location $location -VM $vmConfig"
      },
      {
        "description": "创建一个简单的Linux虚拟机（简化示例，实际更复杂）",
        "code": "$rgName = \"MyNewLinuxVMsRG\"\n$location = \"westus2\"\n$vmName = \"MyLinuxVM\"\n$username = \"azureuser\"\n$password = (ConvertTo-SecureString \"Password123!\" -AsPlainText -Force)\n\n$vnet = Get-AzVirtualNetwork -ResourceGroupName $rgName -Name \"MyLinuxVNet\"\n$subnet = $vnet | Select-Object -ExpandProperty Subnets | Where-Object {$_.Name -eq 'default'}\n$nic = New-AzNetworkInterface -ResourceGroupName $rgName -Location $location -Name \"MyLinuxVMNIC\" -SubnetId $subnet.Id\n\n$vmConfig = New-AzVMConfig -VMName $vmName -VMSize Standard_DS1_v2 | `\n    Set-AzVMOperatingSystem -Linux -ComputerName $vmName -Credential (New-Object System.Management.Automation.PSCredential($username, $password)) | `\n    Set-AzVMSourceImage -PublisherName \"Canonical\" -Offer \"UbuntuServer\" -Skus \"18.04-LTS\" -Version \"latest\" | `\n    Add-AzVMNetworkInterface -Id $nic.Id\n\nNew-AzVM -ResourceGroupName $rgName -Location $location -VM $vmConfig"
      }
    ],
    "notes": "`New-AzVM` 是一个复合命令，它需要与其他 `New-AzVMConfig`, `Set-AzVMOperatingSystem`, `Set-AzVMSourceImage`, `Add-AzVMNetworkInterface`, `Add-AzVMDataDisk` 等命令结合使用，以构建完整的虚拟机配置对象。在实际生产环境中，创建VM会涉及更多的网络、存储、安全组和诊断设置。",
    "shell_type": "PowerShell Cmdlet (Az.Compute Module)",
    "context": "Azure"
  },
  {
    "name": "Start-AzVM",
    "summary": "启动一个或多个Azure虚拟机。",
    "examples": [
      {
        "description": "启动名为 'MyWebAppVM' 的虚拟机",
        "code": "Start-AzVM -ResourceGroupName \"MyVMsRG\" -Name \"MyWebAppVM\""
      },
      {
        "description": "通过管道启动所有已停止的虚拟机",
        "code": "Get-AzVM -Status | Where-Object { $_.PowerState -eq 'VM deallocated' } | Start-AzVM"
      }
    ],
    "notes": "此命令将处于停止（已解除分配）状态的虚拟机启动。启动后，会开始计费。此操作是异步的，命令会立即返回，但VM的实际启动需要一些时间。",
    "shell_type": "PowerShell Cmdlet (Az.Compute Module)",
    "context": "Azure"
  },
  {
    "name": "Stop-AzVM",
    "summary": "停止一个或多个Azure虚拟机。",
    "examples": [
      {
        "description": "停止名为 'MyWebAppVM' 的虚拟机（会提示确认）",
        "code": "Stop-AzVM -ResourceGroupName \"MyVMsRG\" -Name \"MyWebAppVM\""
      },
      {
        "description": "强制停止虚拟机，并解除分配（不再计费计算资源）",
        "code": "Stop-AzVM -ResourceGroupName \"MyVMsRG\" -Name \"MyWebAppVM\" -Force -StayProvisioned:$false"
      },
      {
        "description": "停止所有资源组中的虚拟机",
        "code": "Get-AzVM | Stop-AzVM -Force -Confirm:$false"
      }
    ],
    "notes": "停止VM时，可以使用 `-Force` 强制关闭。`StayProvisioned:$false` 参数（或不带此参数）会将VM状态变为 `Deallocated`，此时将停止计费计算资源，但存储依然计费。`StayProvisioned:$true` 会将VM状态变为 `Stopped`，计算资源仍会计费。",
    "shell_type": "PowerShell Cmdlet (Az.Compute Module)",
    "context": "Azure"
  },
  {
    "name": "Restart-AzVM",
    "summary": "重启一个或多个Azure虚拟机。",
    "examples": [
      {
        "description": "重启名为 'MyWebAppVM' 的虚拟机",
        "code": "Restart-AzVM -ResourceGroupName \"MyVMsRG\" -Name \"MyWebAppVM\""
      }
    ],
    "notes": "此命令会将运行中的虚拟机进行正常重启。如果VM处于停止或解除分配状态，此命令将不起作用，需要先使用 `Start-AzVM`。",
    "shell_type": "PowerShell Cmdlet (Az.Compute Module)",
    "context": "Azure"
  },
  {
    "name": "Remove-AzVM",
    "summary": "删除一个或多个Azure虚拟机。",
    "examples": [
      {
        "description": "删除名为 'MyOldVM' 的虚拟机（会提示确认）",
        "code": "Remove-AzVM -ResourceGroupName \"MyVMsRG\" -Name \"MyOldVM\""
      },
      {
        "description": "强制删除虚拟机及其相关的OS盘和数据盘（如果它们在同一资源组且未被其他VM使用）",
        "code": "Remove-AzVM -ResourceGroupName \"MyVMsRG\" -Name \"MyOldVM\" -Force"
      },
      {
        "description": "通过管道删除所有解除分配的虚拟机",
        "code": "Get-AzVM -Status | Where-Object { $_.PowerState -eq 'VM deallocated' } | Remove-AzVM -Force"
      }
    ],
    "notes": "这是一个具有破坏性的命令。删除VM默认不会删除其关联的公共IP、网络接口和存储账户。但如果使用 `-Force`，它通常会尝试删除关联的OS盘和数据盘（如果这些磁盘没有设置租赁锁并且是作为VM创建的一部分而创建的）。请务必在执行前确认要删除的资源。",
    "shell_type": "PowerShell Cmdlet (Az.Compute Module)",
    "context": "Azure"
  },
  {
    "name": "Update-AzVM",
    "summary": "更新Azure虚拟机的属性和配置。",
    "examples": [
      {
        "description": "更改虚拟机的SKU/大小",
        "code": "$vm = Get-AzVM -ResourceGroupName \"MyVMsRG\" -Name \"MyVM\"\n$vm.HardwareProfile.VmSize = \"Standard_DS2_v2\"\nUpdate-AzVM -ResourceGroupName \"MyVMsRG\" -VM $vm"
      },
      {
        "description": "添加新的数据盘到虚拟机",
        "code": "$vm = Get-AzVM -ResourceGroupName \"MyVMsRG\" -Name \"MyVM\"\nAdd-AzVMDataDisk -VM $vm -Name \"NewDataDisk\" -Caching None -DiskSizeGB 100 -StorageAccountType Standard_LRS -Lun 1 -CreateOption Empty\nUpdate-AzVM -ResourceGroupName \"MyVMsRG\" -VM $vm"
      }
    ],
    "notes": "此命令通常与 `Get-AzVM` 结合使用。你首先获取VM对象，修改其属性，然后将修改后的对象传递给 `Update-AzVM`。某些更新（如调整大小）可能需要重启VM。",
    "shell_type": "PowerShell Cmdlet (Az.Compute Module)",
    "context": "Azure"
  },
  {
    "name": "Set-AzVMDiskExtension",
    "summary": "在Azure虚拟机上设置或更新磁盘扩展，常用于启用Azure磁盘加密。",
    "examples": [
      {
        "description": "启用Azure磁盘加密（ADE），需要已配置的Key Vault和应用程序注册",
        "code": "$keyVault = Get-AzKeyVault -VaultName \"MyKeyVault\" -ResourceGroupName \"MyKeyVaultRG\"\n$diskEncryptionKeyVaultUrl = $keyVault.VaultUri\n$diskEncryptionKeyVaultResourceId = $keyVault.ResourceId\n\nSet-AzVMDiskExtension -ResourceGroupName \"MyVMsRG\" -VMName \"MyVM\" -Name \"AzureDiskEncryption\" -DiskEncryptionKeyVaultUrl $diskEncryptionKeyVaultUrl -DiskEncryptionKeyVaultResourceId $diskEncryptionKeyVaultResourceId -VolumeType All -Force"
      }
    ],
    "notes": "此命令用于管理VM的扩展。启用磁盘加密是一个复杂的过程，通常还需要配置Azure Key Vault、权限以及可能的AAD应用程序注册。确保在执行前仔细阅读官方文档。",
    "shell_type": "PowerShell Cmdlet (Az.Compute Module)",
    "context": "Azure"
  },
  {
    "name": "Get-AzVMImage",
    "summary": "获取可用于创建Azure虚拟机的镜像信息。",
    "examples": [
      {
        "description": "列出所有在 'East US' 区域可用的镜像发布者",
        "code": "Get-AzVMImage -Location \"eastus\" | Select-Object PublisherName -Unique"
      },
      {
        "description": "列出 Canonical 公司提供的所有Ubuntu镜像",
        "code": "Get-AzVMImage -Location \"eastus\" -PublisherName \"Canonical\" -Offer \"UbuntuServer\" | Select-Object Sku -Unique"
      },
      {
        "description": "获取特定Windows Server 2019数据中心版镜像的最新版本",
        "code": "Get-AzVMImage -Location \"eastus\" -PublisherName \"MicrosoftWindowsServer\" -Offer \"WindowsServer\" -Skus \"2019-Datacenter\" -Version \"latest\""
      }
    ],
    "notes": "在创建新VM时，你需要指定一个VM镜像。此命令帮助你发现可用的镜像列表，包括公共镜像（如Ubuntu、Windows Server）和自定义镜像。通常会配合 `New-AzVM` 使用。",
    "shell_type": "PowerShell Cmdlet (Az.Compute Module)",
    "context": "Azure"
  },
  {
    "name": "Get-AzStorageAccount",
    "summary": "获取一个或多个Azure存储账户的信息。",
    "examples": [
      {
        "description": "获取订阅中所有存储账户",
        "code": "Get-AzStorageAccount"
      },
      {
        "description": "获取指定资源组中的所有存储账户",
        "code": "Get-AzStorageAccount -ResourceGroupName \"MyStorageRG\""
      },
      {
        "description": "按名称获取特定存储账户",
        "code": "Get-AzStorageAccount -ResourceGroupName \"MyStorageRG\" -Name \"mystorageaccount\""
      }
    ],
    "notes": "存储账户是Azure存储服务（Blob、文件、队列、表）的统一入口点。此命令用于查看账户的各种属性，如位置、SKU、复制策略、访问层等。",
    "shell_type": "PowerShell Cmdlet (Az.Storage Module)",
    "context": "Azure"
  },
  {
    "name": "New-AzStorageAccount",
    "summary": "在Azure中创建一个新的存储账户。",
    "examples": [
      {
        "description": "创建一个标准通用V2存储账户，LRS复制，在 'East US' 区域",
        "code": "New-AzStorageAccount -ResourceGroupName \"MyStorageRG\" -Name \"mynewsa12345\" -Location \"eastus\" -SkuName Standard_LRS -Kind StorageV2"
      },
      {
        "description": "创建一个高级Blob存储账户，ZRS复制，并启用分层命名空间（Data Lake Gen2）",
        "code": "New-AzStorageAccount -ResourceGroupName \"MyStorageRG\" -Name \"datalakestorage\" -Location \"eastus\" -SkuName Premium_ZRS -Kind BlockBlobStorage -EnableHierarchicalNamespace $true"
      }
    ],
    "notes": "创建存储账户时需要指定其名称（全局唯一）、区域、SKU（复制策略和性能层）和种类（如通用V2、Blob存储等）。存储账户是Azure中非常基础且重要的资源类型。",
    "shell_type": "PowerShell Cmdlet (Az.Storage Module)",
    "context": "Azure"
  },
  {
    "name": "Remove-AzStorageAccount",
    "summary": "删除一个或多个Azure存储账户。",
    "examples": [
      {
        "description": "删除名为 'myoldstorageaccount' 的存储账户（会提示确认）",
        "code": "Remove-AzStorageAccount -ResourceGroupName \"MyStorageRG\" -Name \"myoldstorageaccount\""
      },
      {
        "description": "强制删除存储账户，不提示确认",
        "code": "Remove-AzStorageAccount -ResourceGroupName \"MyStorageRG\" -Name \"myoldstorageaccount\" -Force"
      }
    ],
    "notes": "这是一个具有破坏性的命令，执行后**无法撤销**。删除存储账户会永久删除其内部的所有数据（Blob、文件、队列、表）。在生产环境中使用时务必谨慎。",
    "shell_type": "PowerShell Cmdlet (Az.Storage Module)",
    "context": "Azure"
  },
  {
    "name": "Get-AzStorageAccountKey",
    "summary": "获取Azure存储账户的访问密钥。",
    "examples": [
      {
        "description": "获取存储账户 'mystorageaccount' 的所有访问密钥",
        "code": "Get-AzStorageAccountKey -ResourceGroupName \"MyStorageRG\" -Name \"mystorageaccount\""
      },
      {
        "description": "获取并显示第一个密钥的Base64字符串",
        "code": "(Get-AzStorageAccountKey -ResourceGroupName \"MyStorageRG\" -Name \"mystorageaccount\").Value[0]"
      },
      {
        "description": "重新生成存储账户的第一个密钥",
        "code": "New-AzStorageAccountKey -ResourceGroupName \"MyStorageRG\" -Name \"mystorageaccount\" -KeyName \"key1\""
      }
    ],
    "notes": "存储账户密钥提供了对存储账户的完全访问权限，应像密码一样妥善保管。在自动化脚本中，通常建议使用SAS（共享访问签名）或托管标识而不是直接使用账户密钥。",
    "shell_type": "PowerShell Cmdlet (Az.Storage Module)",
    "context": "Azure"
  },
  {
    "name": "New-AzStorageContainer",
    "summary": "在Azure Blob存储账户中创建一个新的Blob容器。",
    "examples": [
      {
        "description": "获取存储账户上下文",
        "code": "$ctx = (Get-AzStorageAccount -ResourceGroupName \"MyStorageRG\" -Name \"mystorageaccount\").Context"
      },
      {
        "description": "在指定存储账户中创建名为 'mycontainer' 的容器",
        "code": "New-AzStorageContainer -Name \"mycontainer\" -Context $ctx"
      },
      {
        "description": "创建公共读取权限的容器",
        "code": "New-AzStorageContainer -Name \"publiccontainer\" -Permission Blob -Context $ctx"
      }
    ],
    "notes": "容器是Blob的逻辑分组。在上传Blob之前，需要先创建容器。`-Context` 参数是必需的，它通过 `Get-AzStorageAccount` 命令获取。",
    "shell_type": "PowerShell Cmdlet (Az.Storage Module)",
    "context": "Azure"
  },
  {
    "name": "Get-AzStorageBlob",
    "summary": "获取Azure Blob存储容器中的一个或多个Blob信息。",
    "examples": [
      {
        "description": "获取指定容器中的所有Blob",
        "code": "$ctx = (Get-AzStorageAccount -ResourceGroupName \"MyStorageRG\" -Name \"mystorageaccount\").Context\nGet-AzStorageBlob -Container \"mycontainer\" -Context $ctx"
      },
      {
        "description": "获取特定名称的Blob",
        "code": "Get-AzStorageBlob -Container \"mycontainer\" -Blob \"myfile.txt\" -Context $ctx"
      },
      {
        "description": "获取以 'log' 开头的所有Blob",
        "code": "Get-AzStorageBlob -Container \"mycontainer\" -Prefix \"log\" -Context $ctx"
      }
    ],
    "notes": "此命令用于列出、筛选和检索Blob的信息，例如大小、修改时间、Content-Type等。它不会下载Blob内容，仅获取其元数据。",
    "shell_type": "PowerShell Cmdlet (Az.Storage Module)",
    "context": "Azure"
  },
  {
    "name": "Set-AzStorageBlobContent",
    "summary": "将本地文件上传到Azure Blob存储。",
    "examples": [
      {
        "description": "将本地 'C:\\data\\file.txt' 上传到 'mycontainer' 下的 'file.txt'",
        "code": "$ctx = (Get-AzStorageAccount -ResourceGroupName \"MyStorageRG\" -Name \"mystorageaccount\").Context\nSet-AzStorageBlobContent -Container \"mycontainer\" -File \"C:\\data\\file.txt\" -Blob \"file.txt\" -Context $ctx"
      },
      {
        "description": "上传文件并覆盖同名Blob（如果存在）",
        "code": "Set-AzStorageBlobContent -Container \"mycontainer\" -File \"C:\\data\\file.txt\" -Blob \"file.txt\" -Context $ctx -Force"
      },
      {
        "description": "指定Blob的Content-Type",
        "code": "Set-AzStorageBlobContent -Container \"webfiles\" -File \"C:\\web\\index.html\" -Blob \"index.html\" -ContentType \"text/html\" -Context $ctx"
      }
    ],
    "notes": "此命令用于将本地数据传输到云端。它支持大文件上传，并可选择覆盖现有Blob。对于大规模数据传输，考虑使用AzCopy工具。",
    "shell_type": "PowerShell Cmdlet (Az.Storage Module)",
    "context": "Azure"
  },
  {
    "name": "Get-AzStorageBlobContent",
    "summary": "从Azure Blob存储下载Blob内容到本地文件。",
    "examples": [
      {
        "description": "将 'mycontainer' 下的 'report.csv' 下载到本地 'C:\\downloads\\report.csv'",
        "code": "$ctx = (Get-AzStorageAccount -ResourceGroupName \"MyStorageRG\" -Name \"mystorageaccount\").Context\nGet-AzStorageBlobContent -Container \"mycontainer\" -Blob \"report.csv\" -Destination \"C:\\downloads\\report.csv\" -Context $ctx"
      },
      {
        "description": "下载Blob并覆盖同名本地文件",
        "code": "Get-AzStorageBlobContent -Container \"mycontainer\" -Blob \"report.csv\" -Destination \"C:\\downloads\\report.csv\" -Context $ctx -Force"
      }
    ],
    "notes": "此命令用于将云端数据传输到本地。如果目标文件已存在，不加 `-Force` 参数会报错。对于大规模数据下载，考虑使用AzCopy工具。",
    "shell_type": "PowerShell Cmdlet (Az.Storage Module)",
    "context": "Azure"
  },
  {
    "name": "Get-AzVirtualNetwork",
    "summary": "获取一个或多个Azure虚拟网络 (VNet)。",
    "examples": [
      {
        "description": "获取当前订阅中的所有虚拟网络",
        "code": "Get-AzVirtualNetwork"
      },
      {
        "description": "获取特定资源组中的所有虚拟网络",
        "code": "Get-AzVirtualNetwork -ResourceGroupName \"MyResourceGroup\""
      },
      {
        "description": "按名称获取特定的虚拟网络",
        "code": "Get-AzVirtualNetwork -ResourceGroupName \"MyResourceGroup\" -Name \"MyVNet\""
      }
    ],
    "notes": "此命令用于检索Azure中的虚拟网络资源。虚拟网络是Azure中私有网络的基石，它允许Azure资源之间以及Azure资源与本地资源之间安全通信。\n**所属类别:** Azure\n**模块/安装:** `Az.Network` 模块，作为 `Az` 模块集的一部分。如果未安装，请运行 `Install-Module Az -Scope CurrentUser -Force`。",
    "shell_type": "Cmdlet (Az.Network)"
  },
  {
    "name": "New-AzVirtualNetwork",
    "summary": "创建一个Azure虚拟网络 (VNet)。",
    "examples": [
      {
        "description": "在指定资源组和区域中创建一个新的VNet",
        "code": "New-AzVirtualNetwork -ResourceGroupName \"MyResourceGroup\" -Name \"MyNewVNet\" -Location \"eastus\" -AddressPrefix \"10.0.0.0/16\""
      },
      {
        "description": "创建一个VNet并同时定义一个子网",
        "code": "$subnet = New-AzVirtualNetworkSubnetConfig -Name \"Subnet1\" -AddressPrefix \"10.0.0.0/24\"\nNew-AzVirtualNetwork -ResourceGroupName \"MyResourceGroup\" -Name \"MyNewVNetWithSubnet\" -Location \"westus\" -AddressPrefix \"10.0.0.0/16\" -Subnet $subnet"
      }
    ],
    "notes": "创建VNet是构建Azure网络拓扑的第一步。`AddressPrefix` 定义了VNet的IP地址空间，必须是CIDR格式。VNet创建后，可以添加更多的子网。\n**所属类别:** Azure\n**模块/安装:** `Az.Network` 模块。",
    "shell_type": "Cmdlet (Az.Network)"
  },
  {
    "name": "Add-AzVirtualNetworkSubnetConfig",
    "summary": "向Azure虚拟网络添加一个子网配置。此命令通常与 `New-AzVirtualNetwork` 或 `Set-AzVirtualNetwork` 结合使用，不单独创建子网。",
    "examples": [
      {
        "description": "为一个现有VNet添加一个新的子网",
        "code": "$vnet = Get-AzVirtualNetwork -ResourceGroupName \"MyResourceGroup\" -Name \"MyVNet\"\n$vnet | Add-AzVirtualNetworkSubnetConfig -Name \"NewSubnet\" -AddressPrefix \"10.0.1.0/24\" | Set-AzVirtualNetwork"
      },
      {
        "description": "创建VNet时定义多个子网",
        "code": "$subnet1 = New-AzVirtualNetworkSubnetConfig -Name \"SubnetA\" -AddressPrefix \"10.0.0.0/24\"\n$subnet2 = New-AzVirtualNetworkSubnetConfig -Name \"SubnetB\" -AddressPrefix \"10.0.1.0/24\"\nNew-AzVirtualNetwork -ResourceGroupName \"MyResourceGroup\" -Name \"MultiSubnetVNet\" -Location \"centralus\" -AddressPrefix \"10.0.0.0/16\" -Subnet $subnet1, $subnet2"
      }
    ],
    "notes": "子网是VNet中的IP地址范围的逻辑分区。当添加或修改子网配置时，必须将更新后的VNet对象通过管道传递给 `Set-AzVirtualNetwork` 以保存更改。\n**所属类别:** Azure\n**模块/安装:** `Az.Network` 模块。",
    "shell_type": "Cmdlet (Az.Network)"
  },
  {
    "name": "Get-AzNetworkInterface",
    "summary": "获取一个或多个Azure网络接口 (NIC)。",
    "examples": [
      {
        "description": "获取所有网络接口",
        "code": "Get-AzNetworkInterface"
      },
      {
        "description": "获取特定资源组中的所有网络接口",
        "code": "Get-AzNetworkInterface -ResourceGroupName \"MyResourceGroup\""
      },
      {
        "description": "按名称获取特定的网络接口",
        "code": "Get-AzNetworkInterface -ResourceGroupName \"MyResourceGroup\" -Name \"MyVmNic\""
      }
    ],
    "notes": "网络接口是虚拟机连接到虚拟网络并与Azure内部和外部资源通信的入口点。每个虚拟机至少有一个NIC。\n**所属类别:** Azure\n**模块/安装:** `Az.Network` 模块。",
    "shell_type": "Cmdlet (Az.Network)"
  },
  {
    "name": "New-AzNetworkInterface",
    "summary": "创建一个Azure网络接口 (NIC)。",
    "examples": [
      {
        "description": "创建一个连接到子网的NIC",
        "code": "$vnet = Get-AzVirtualNetwork -ResourceGroupName \"MyResourceGroup\" -Name \"MyVNet\"\n$subnet = $vnet.Subnets | Where-Object {$_.Name -eq 'default'}\nNew-AzNetworkInterface -ResourceGroupName \"MyResourceGroup\" -Name \"MyNewNic\" -Location \"eastus\" -SubnetId $subnet.Id"
      },
      {
        "description": "创建一个带有公共IP和网络安全组关联的NIC",
        "code": "$vnet = Get-AzVirtualNetwork -ResourceGroupName \"MyResourceGroup\" -Name \"MyVNet\"\n$subnet = $vnet.Subnets | Where-Object {$_.Name -eq 'default'}\n$publicIp = New-AzPublicIpAddress -ResourceGroupName \"MyResourceGroup\" -Name \"MyPublicIp\" -Location \"eastus\" -AllocationMethod Static -Sku Standard\n$nsg = Get-AzNetworkSecurityGroup -ResourceGroupName \"MyResourceGroup\" -Name \"MyNSG\"\nNew-AzNetworkInterface -ResourceGroupName \"MyResourceGroup\" -Name \"MyNicWithPublicIp\" -Location \"eastus\" -SubnetId $subnet.Id -PublicIpAddressId $publicIp.Id -NetworkSecurityGroupId $nsg.Id"
      }
    ],
    "notes": "NIC是部署Azure虚拟机的重要组件。它定义了VM如何连接到网络，并可以关联公共IP、网络安全组和应用安全组等网络组件。\n**所属类别:** Azure\n**模块/安装:** `Az.Network` 模块。",
    "shell_type": "Cmdlet (Az.Network)"
  },
  {
    "name": "Get-AzPublicIpAddress",
    "summary": "获取一个或多个Azure公共IP地址。",
    "examples": [
      {
        "description": "获取所有公共IP地址",
        "code": "Get-AzPublicIpAddress"
      },
      {
        "description": "获取特定资源组中的公共IP地址",
        "code": "Get-AzPublicIpAddress -ResourceGroupName \"MyResourceGroup\""
      },
      {
        "description": "按名称获取特定的公共IP地址",
        "code": "Get-AzPublicIpAddress -ResourceGroupName \"MyResourceGroup\" -Name \"MyPublicIP\""
      }
    ],
    "notes": "公共IP地址用于从互联网访问Azure资源，如虚拟机、负载均衡器等。\n**所属类别:** Azure\n**模块/安装:** `Az.Network` 模块。",
    "shell_type": "Cmdlet (Az.Network)"
  },
  {
    "name": "New-AzPublicIpAddress",
    "summary": "创建一个Azure公共IP地址。",
    "examples": [
      {
        "description": "创建一个动态分配的公共IP地址",
        "code": "New-AzPublicIpAddress -ResourceGroupName \"MyResourceGroup\" -Name \"MyDynamicPublicIp\" -Location \"eastus\" -AllocationMethod Dynamic"
      },
      {
        "description": "创建一个静态分配的公共IP地址 (推荐用于生产环境)",
        "code": "New-AzPublicIpAddress -ResourceGroupName \"MyResourceGroup\" -Name \"MyStaticPublicIp\" -Location \"eastus\" -AllocationMethod Static -Sku Standard"
      }
    ],
    "notes": "公共IP地址可以是动态或静态分配的。静态IP在IP地址改变时提供更高的可靠性，通常用于生产环境和需要稳定外部连接的服务。\n**所属类别:** Azure\n**模块/安装:** `Az.Network` 模块。",
    "shell_type": "Cmdlet (Az.Network)"
  },
  {
    "name": "Get-AzNetworkSecurityGroup",
    "summary": "获取一个或多个Azure网络安全组 (NSG)。",
    "examples": [
      {
        "description": "获取所有NSG",
        "code": "Get-AzNetworkSecurityGroup"
      },
      {
        "description": "获取特定资源组中的所有NSG",
        "code": "Get-AzNetworkSecurityGroup -ResourceGroupName \"MyResourceGroup\""
      },
      {
        "description": "按名称获取特定的NSG",
        "code": "Get-AzNetworkSecurityGroup -ResourceGroupName \"MyResourceGroup\" -Name \"MyVMNSG\""
      }
    ],
    "notes": "NSG包含一组安全规则，用于允许或拒绝流向（入站）或流出（出站）Azure资源（如VM、子网）的网络流量。\n**所属类别:** Azure\n**模块/安装:** `Az.Network` 模块。",
    "shell_type": "Cmdlet (Az.Network)"
  },
  {
    "name": "New-AzNetworkSecurityGroup",
    "summary": "创建一个Azure网络安全组 (NSG)。",
    "examples": [
      {
        "description": "创建一个新的NSG",
        "code": "New-AzNetworkSecurityGroup -ResourceGroupName \"MyResourceGroup\" -Name \"MyNewNSG\" -Location \"westus\""
      }
    ],
    "notes": "创建NSG是定义网络安全策略的第一步。NSG创建后，可以通过 `Add-AzNetworkSecurityRuleConfig` 命令向其添加安全规则。\n**所属类别:** Azure\n**模块/安装:** `Az.Network` 模块。",
    "shell_type": "Cmdlet (Az.Network)"
  },
  {
    "name": "Add-AzNetworkSecurityRuleConfig",
    "summary": "向Azure网络安全组添加一个安全规则配置。此命令通常与 `New-AzNetworkSecurityGroup` 或 `Set-AzNetworkSecurityGroup` 结合使用。",
    "examples": [
      {
        "description": "向现有NSG添加一个允许RDP入站流量的规则",
        "code": "$nsg = Get-AzNetworkSecurityGroup -ResourceGroupName \"MyResourceGroup\" -Name \"MyNSG\"\n$nsg | Add-AzNetworkSecurityRuleConfig -Name \"AllowRDP\" -Description \"Allow RDP Inbound\" -Access Allow -Protocol Tcp -Direction Inbound -Priority 100 -SourceAddressPrefix \"*\" -SourcePortRange \"*\" -DestinationAddressPrefix \"*\" -DestinationPortRange 3389 | Set-AzNetworkSecurityGroup"
      },
      {
        "description": "添加一个允许HTTP和HTTPS出站流量的规则",
        "code": "$nsg = Get-AzNetworkSecurityGroup -ResourceGroupName \"MyResourceGroup\" -Name \"MyNSG\"\n$nsg | Add-AzNetworkSecurityRuleConfig -Name \"AllowWebOutbound\" -Description \"Allow HTTP/HTTPS Outbound\" -Access Allow -Protocol Tcp -Direction Outbound -Priority 110 -SourceAddressPrefix \"*\" -SourcePortRange \"*\" -DestinationAddressPrefix \"Internet\" -DestinationPortRange 80,443 | Set-AzNetworkSecurityGroup"
      }
    ],
    "notes": "安全规则的优先级（Priority）决定了规则的评估顺序，数字越小优先级越高。Azure默认有一些隐式规则。规则的 `Access` 可以是 `Allow` 或 `Deny`。`SourceAddressPrefix` 和 `DestinationAddressPrefix` 可以是IP地址、CIDR范围、服务标签（如`Internet`, `VirtualNetwork`）或`*`（表示所有）。\n**所属类别:** Azure\n**模块/安装:** `Az.Network` 模块。",
    "shell_type": "Cmdlet (Az.Network)"
  },
  {
    "name": "Get-AzLoadBalancer",
    "summary": "获取一个或多个Azure负载均衡器。",
    "examples": [
      {
        "description": "获取特定资源组中的所有负载均衡器",
        "code": "Get-AzLoadBalancer -ResourceGroupName \"MyResourceGroup\""
      },
      {
        "description": "按名称获取特定的负载均衡器",
        "code": "Get-AzLoadBalancer -ResourceGroupName \"MyResourceGroup\" -Name \"MyLB\""
      }
    ],
    "notes": "Azure负载均衡器在多个虚拟机或服务实例之间分配传入的网络流量，以确保高可用性和可伸缩性。\n**所属类别:** Azure\n**模块/安装:** `Az.Network` 模块。",
    "shell_type": "Cmdlet (Az.Network)"
  },
  {
    "name": "Get-AzVirtualNetworkGateway",
    "summary": "获取一个或多个Azure虚拟网络网关（用于VPN或ExpressRoute连接）。",
    "examples": [
      {
        "description": "获取特定资源组中的所有虚拟网络网关",
        "code": "Get-AzVirtualNetworkGateway -ResourceGroupName \"MyResourceGroup\""
      },
      {
        "description": "按名称获取特定的虚拟网络网关",
        "code": "Get-AzVirtualNetworkGateway -ResourceGroupName \"MyResourceGroup\" -Name \"MyVpnGateway\""
      }
    ],
    "notes": "虚拟网络网关允许在Azure VNet之间、或Azure VNet与本地网络之间建立安全连接，支持VPN和ExpressRoute。\n**所属类别:** Azure\n**模块/安装:** `Az.Network` 模块。",
    "shell_type": "Cmdlet (Az.Network)"
  },
  {
    "name": "Get-AzDnsZone",
    "summary": "获取一个或多个Azure DNS区域。",
    "examples": [
      {
        "description": "获取所有DNS区域",
        "code": "Get-AzDnsZone"
      },
      {
        "description": "获取特定资源组中的DNS区域",
        "code": "Get-AzDnsZone -ResourceGroupName \"MyResourceGroup\""
      },
      {
        "description": "按名称获取特定的DNS区域",
        "code": "Get-AzDnsZone -ResourceGroupName \"MyResourceGroup\" -Name \"contoso.com\""
      }
    ],
    "notes": "Azure DNS是Azure提供的托管DNS服务，允许你使用现有域或购买新域并管理DNS记录。\n**所属类别:** Azure\n**模块/安装:** `Az.Dns` 模块。",
    "shell_type": "Cmdlet (Az.Dns)"
  },
  {
    "name": "New-AzDnsRecordSet",
    "summary": "在Azure DNS区域中创建一个新的DNS记录集。",
    "examples": [
      {
        "description": "在指定区域中创建一个A记录集",
        "code": "$zone = Get-AzDnsZone -ResourceGroupName \"MyResourceGroup\" -Name \"example.com\"\nNew-AzDnsRecordSet -Name \"www\" -RecordType A -ZoneName $zone.Name -ResourceGroupName $zone.ResourceGroupName -Ttl 3600 -DnsRecords (New-AzDnsRecordConfig -IPv4Address \"203.0.113.1\")"
      },
      {
        "description": "创建一个CNAME记录集",
        "code": "$zone = Get-AzDnsZone -ResourceGroupName \"MyResourceGroup\" -Name \"example.com\"\nNew-AzDnsRecordSet -Name \"blog\" -RecordType CNAME -ZoneName $zone.Name -ResourceGroupName $zone.ResourceGroupName -Ttl 3600 -DnsRecords (New-AzDnsRecordConfig -Cname \"www.example.com\")"
      }
    ],
    "notes": "DNS记录集用于将域名映射到IP地址、其他域名等。`New-AzDnsRecordConfig` 用于创建具体的记录配置对象。\n**所属类别:** Azure\n**模块/安装:** `Az.Dns` 模块。",
    "shell_type": "Cmdlet (Az.Dns)"
  },
  {
    "name": "Get-AzADUser",
    "summary": "获取一个或多个Azure Active Directory (Azure AD) 用户。",
    "examples": [
      {
        "description": "获取所有Azure AD用户",
        "code": "Get-AzADUser"
      },
      {
        "description": "按用户主体名称 (UPN) 获取用户",
        "code": "Get-AzADUser -UserPrincipalName \"user@contoso.com\""
      },
      {
        "description": "按显示名称搜索用户",
        "code": "Get-AzADUser -DisplayName \"John Doe\""
      },
      {
        "description": "使用OData过滤器按属性筛选用户 (例如，按部门)",
        "code": "Get-AzADUser -Filter \"Department eq 'Sales'\""
      }
    ],
    "notes": "此命令用于查询Azure AD中的用户对象。`Az.Accounts` 模块（通常随 `Az` 主模块安装）提供了基本的Azure AD命令。对于更复杂的Azure AD管理，可以考虑使用独立的 `AzureAD` PowerShell模块。\n**所属类别:** Azure\n**模块/安装:** `Az.Accounts` 模块。",
    "shell_type": "Cmdlet (Az.Accounts)"
  },
  {
    "name": "New-AzADUser",
    "summary": "创建一个新的Azure Active Directory (Azure AD) 用户。",
    "examples": [
      {
        "description": "创建一个标准Azure AD用户",
        "code": "New-AzADUser -DisplayName \"Jane Doe\" -UserPrincipalName \"jane.doe@contoso.com\" -Password (ConvertTo-SecureString \"Password123!\" -AsPlainText -Force) -MailNickname \"janed\" -AccountEnabled $true"
      }
    ],
    "notes": "创建用户是身份管理的基础。`UserPrincipalName` 必须是唯一的，并通常包含域名。`Password` 参数需要一个 `SecureString` 对象。\n**所属类别:** Azure\n**模块/安装:** `Az.Accounts` 模块。",
    "shell_type": "Cmdlet (Az.Accounts)"
  },
  {
    "name": "Set-AzADUser",
    "summary": "修改一个Azure Active Directory (Azure AD) 用户的属性。",
    "examples": [
      {
        "description": "更新用户的显示名称和部门",
        "code": "Set-AzADUser -ObjectId (Get-AzADUser -UserPrincipalName \"jane.doe@contoso.com\").Id -DisplayName \"Jane A. Doe\" -Department \"Marketing\""
      },
      {
        "description": "启用或禁用用户账户",
        "code": "Set-AzADUser -ObjectId (Get-AzADUser -UserPrincipalName \"jane.doe@contoso.com\").Id -AccountEnabled $false"
      },
      {
        "description": "重置用户密码",
        "code": "Set-AzADUser -ObjectId (Get-AzADUser -UserPrincipalName \"jane.doe@contoso.com\").Id -Password (ConvertTo-SecureString \"NewPassword!456\" -AsPlainText -Force)"
      }
    ],
    "notes": "通过 `Set-AzADUser` 可以修改用户的各种属性，包括启用/禁用账户、重置密码、更新联系信息等。通常需要用户的 `ObjectId` 来唯一标识。\n**所属类别:** Azure\n**模块/安装:** `Az.Accounts` 模块。",
    "shell_type": "Cmdlet (Az.Accounts)"
  },
  {
    "name": "Remove-AzADUser",
    "summary": "删除一个Azure Active Directory (Azure AD) 用户。",
    "examples": [
      {
        "description": "删除指定用户",
        "code": "Remove-AzADUser -ObjectId (Get-AzADUser -UserPrincipalName \"jane.doe@contoso.com\").Id"
      }
    ],
    "notes": "删除用户前请务必确认，被删除的用户将进入“已删除用户”列表，可在30天内恢复。30天后将被永久删除。\n**所属类别:** Azure\n**模块/安装:** `Az.Accounts` 模块。",
    "shell_type": "Cmdlet (Az.Accounts)"
  },
  {
    "name": "Get-AzADGroup",
    "summary": "获取一个或多个Azure Active Directory (Azure AD) 组。",
    "examples": [
      {
        "description": "获取所有Azure AD安全组",
        "code": "Get-AzADGroup -Filter \"SecurityEnabled eq true\""
      },
      {
        "description": "按显示名称搜索组",
        "code": "Get-AzADGroup -DisplayName \"IT Admins\""
      }
    ],
    "notes": "Azure AD组用于权限管理和批量操作。组可以是安全组（用于资源访问权限）或Microsoft 365组（用于协作）。\n**所属类别:** Azure\n**模块/安装:** `Az.Accounts` 模块。",
    "shell_type": "Cmdlet (Az.Accounts)"
  },
  {
    "name": "New-AzADGroup",
    "summary": "创建一个新的Azure Active Directory (Azure AD) 组。",
    "examples": [
      {
        "description": "创建一个新的安全组",
        "code": "New-AzADGroup -DisplayName \"Cloud Admins\" -MailNickname \"cloudadmins\" -MailEnabled $false -SecurityEnabled $true"
      }
    ],
    "notes": "创建组时需指定其显示名称、邮件昵称（如果启用邮件）以及是安全组还是非安全组。\n**所属类别:** Azure\n**模块/安装:** `Az.Accounts` 模块。",
    "shell_type": "Cmdlet (Az.Accounts)"
  },
  {
    "name": "Add-AzADGroupMember",
    "summary": "向Azure Active Directory (Azure AD) 组添加成员。",
    "examples": [
      {
        "description": "向指定组添加一个用户成员",
        "code": "$groupId = (Get-AzADGroup -DisplayName \"Cloud Admins\").Id\n$userId = (Get-AzADUser -UserPrincipalName \"jane.doe@contoso.com\").Id\nAdd-AzADGroupMember -ObjectId $groupId -MemberObjectId $userId"
      }
    ],
    "notes": "添加成员需要组和成员的 `ObjectId`。成员可以是用户、其他组或服务主体。\n**所属类别:** Azure\n**模块/安装:** `Az.Accounts` 模块。",
    "shell_type": "Cmdlet (Az.Accounts)"
  },
  {
    "name": "Remove-AzADGroupMember",
    "summary": "从Azure Active Directory (Azure AD) 组中移除成员。",
    "examples": [
      {
        "description": "从指定组移除一个用户成员",
        "code": "$groupId = (Get-AzADGroup -DisplayName \"Cloud Admins\").Id\n$userId = (Get-AzADUser -UserPrincipalName \"jane.doe@contoso.com\").Id\nRemove-AzADGroupMember -ObjectId $groupId -MemberObjectId $userId"
      }
    ],
    "notes": "移除成员与添加成员类似，也需要组和成员的 `ObjectId`。\n**所属类别:** Azure\n**模块/安装:** `Az.Accounts` 模块。",
    "shell_type": "Cmdlet (Az.Accounts)"
  },
  {
    "name": "Get-AzADServicePrincipal",
    "summary": "获取一个或多个Azure Active Directory (Azure AD) 服务主体。",
    "examples": [
      {
        "description": "获取所有服务主体",
        "code": "Get-AzADServicePrincipal"
      },
      {
        "description": "按显示名称搜索服务主体",
        "code": "Get-AzADServicePrincipal -DisplayName \"MyWebApp\""
      }
    ],
    "notes": "服务主体是Azure AD中表示应用程序或服务（而不是用户）的身份，用于非交互式访问Azure资源。\n**所属类别:** Azure\n**模块/安装:** `Az.Accounts` 模块。",
    "shell_type": "Cmdlet (Az.Accounts)"
  },
  {
    "name": "Get-AzADApplication",
    "summary": "获取一个或多个Azure Active Directory (Azure AD) 应用程序注册。",
    "examples": [
      {
        "description": "获取所有应用程序注册",
        "code": "Get-AzADApplication"
      },
      {
        "description": "按显示名称搜索应用程序",
        "code": "Get-AzADApplication -DisplayName \"MySingleSignOnApp\""
      }
    ],
    "notes": "应用程序注册是Azure AD中应用程序的全局唯一定义。一个应用程序注册可以有多个服务主体实例。\n**所属类别:** Azure\n**模块/安装:** `Az.Accounts` 模块。",
    "shell_type": "Cmdlet (Az.Accounts)"
  },
  {
    "name": "Get-AzRoleAssignment",
    "summary": "获取一个或多个Azure资源的RBAC (基于角色的访问控制) 角色分配。",
    "examples": [
      {
        "description": "获取特定用户的所有角色分配",
        "code": "Get-AzRoleAssignment -SignInName \"user@contoso.com\""
      },
      {
        "description": "获取特定资源组中的所有角色分配",
        "code": "Get-AzRoleAssignment -ResourceGroupName \"MyResourceGroup\""
      },
      {
        "description": "获取特定资源ID上的所有角色分配",
        "code": "$vm = Get-AzVM -ResourceGroupName \"MyResourceGroup\" -Name \"MyVM\"\nGet-AzRoleAssignment -Scope $vm.Id"
      },
      {
        "description": "获取具有特定角色定义的所有分配",
        "code": "Get-AzRoleAssignment -RoleDefinitionName \"Contributor\""
      }
    ],
    "notes": "角色分配是Azure中授权的核心机制，它将安全主体（用户、组、服务主体）与角色定义关联起来，并授予对特定范围（资源组、订阅、资源）的权限。\n**所属类别:** Azure\n**模块/安装:** `Az.Resources` 模块。",
    "shell_type": "Cmdlet (Az.Resources)"
  },
  {
    "name": "New-AzRoleAssignment",
    "summary": "创建新的Azure资源的RBAC角色分配。",
    "examples": [
      {
        "description": "为一个用户分配资源组的\"Contributor\"角色",
        "code": "$user = Get-AzADUser -UserPrincipalName \"user@contoso.com\"\n$resourceGroup = Get-AzResourceGroup -Name \"MyResourceGroup\"\nNew-AzRoleAssignment -ObjectId $user.Id -RoleDefinitionName \"Contributor\" -Scope $resourceGroup.ResourceId"
      },
      {
        "description": "为一个服务主体分配对特定Key Vault的\"Key Vault Secrets User\"角色",
        "code": "$sp = Get-AzADServicePrincipal -DisplayName \"MyWebAppServicePrincipal\"\n$keyVault = Get-AzKeyVault -ResourceGroupName \"MyResourceGroup\" -VaultName \"MySecretVault\"\nNew-AzRoleAssignment -ObjectId $sp.Id -RoleDefinitionName \"Key Vault Secrets User\" -Scope $keyVault.ResourceId"
      }
    ],
    "notes": "创建角色分配时需要指定安全主体（通过ObjectId或SignInName）、角色定义名称以及分配的范围（SubscriptionId, ResourceGroupName, ResourceId）。\n**所属类别:** Azure\n**模块/安装:** `Az.Resources` 模块。",
    "shell_type": "Cmdlet (Az.Resources)"
  },
  {
    "name": "Remove-AzRoleAssignment",
    "summary": "移除Azure资源的RBAC角色分配。",
    "examples": [
      {
        "description": "移除一个用户的特定角色分配",
        "code": "$user = Get-AzADUser -UserPrincipalName \"user@contoso.com\"\n$resourceGroup = Get-AzResourceGroup -Name \"MyResourceGroup\"\nRemove-AzRoleAssignment -ObjectId $user.Id -RoleDefinitionName \"Contributor\" -Scope $resourceGroup.ResourceId -PassThru"
      }
    ],
    "notes": "移除角色分配会撤销相应的权限。使用 `-PassThru` 可以输出被移除的对象。\n**所属类别:** Azure\n**模块/安装:** `Az.Resources` 模块。",
    "shell_type": "Cmdlet (Az.Resources)"
  },
  {
    "name": "Get-AzRoleDefinition",
    "summary": "获取一个或多个Azure RBAC角色定义。",
    "examples": [
      {
        "description": "获取所有内置角色定义",
        "code": "Get-AzRoleDefinition"
      },
      {
        "description": "按名称获取特定的角色定义",
        "code": "Get-AzRoleDefinition -Name \"Contributor\""
      }
    ],
    "notes": "角色定义是一组权限的集合。Azure提供了许多内置角色。你也可以创建自定义角色。\n**所属类别:** Azure\n**模块/安装:** `Az.Resources` 模块。",
    "shell_type": "Cmdlet (Az.Resources)"
  },
  {
    "name": "Get-AzAppServicePlan",
    "summary": "获取一个或多个Azure App Service计划。",
    "examples": [
      {
        "description": "获取所有App Service计划",
        "code": "Get-AzAppServicePlan"
      },
      {
        "description": "获取特定资源组中的App Service计划",
        "code": "Get-AzAppServicePlan -ResourceGroupName \"MyResourceGroup\""
      },
      {
        "description": "按名称获取App Service计划",
        "code": "Get-AzAppServicePlan -ResourceGroupName \"MyResourceGroup\" -Name \"MyAppServicePlan\""
      }
    ],
    "notes": "App Service计划定义了Web应用运行所需的基础计算资源（如VM实例的数量、大小、操作系统、区域和定价层）。\n**所属类别:** Azure\n**模块/安装:** `Az.Websites` 模块。",
    "shell_type": "Cmdlet (Az.Websites)"
  },
  {
    "name": "New-AzAppServicePlan",
    "summary": "创建一个Azure App Service计划。",
    "examples": [
      {
        "description": "创建一个新的App Service计划 (Standard S1 Tier)",
        "code": "New-AzAppServicePlan -ResourceGroupName \"MyResourceGroup\" -Name \"MyNewAppServicePlan\" -Location \"eastus\" -Tier Standard -WorkerSize S1"
      }
    ],
    "notes": "Web应用必须部署在App Service计划上。选择合适的定价层（Tier）和工作器大小（WorkerSize）会影响性能和成本。\n**所属类别:** Azure\n**模块/安装:** `Az.Websites` 模块。",
    "shell_type": "Cmdlet (Az.Websites)"
  },
  {
    "name": "Get-AzWebApp",
    "summary": "获取一个或多个Azure Web应用 (App Services)。",
    "examples": [
      {
        "description": "获取所有Web应用",
        "code": "Get-AzWebApp"
      },
      {
        "description": "获取特定资源组中的Web应用",
        "code": "Get-AzWebApp -ResourceGroupName \"MyResourceGroup\""
      },
      {
        "description": "按名称获取Web应用",
        "code": "Get-AzWebApp -ResourceGroupName \"MyResourceGroup\" -Name \"MyWebApp\""
      }
    ],
    "notes": "Azure Web应用是用于托管Web应用程序、REST API和移动后端服务的平台即服务 (PaaS) 产品。\n**所属类别:** Azure\n**模块/安装:** `Az.Websites` 模块。",
    "shell_type": "Cmdlet (Az.Websites)"
  },
  {
    "name": "New-AzWebApp",
    "summary": "创建一个Azure Web应用 (App Service)。",
    "examples": [
      {
        "description": "在现有App Service计划上创建一个新的Web应用",
        "code": "$appServicePlan = Get-AzAppServicePlan -ResourceGroupName \"MyResourceGroup\" -Name \"MyAppServicePlan\"\nNew-AzWebApp -ResourceGroupName \"MyResourceGroup\" -Name \"MyNewWebApp\" -Location \"westus\" -AppServicePlan $appServicePlan.Name"
      }
    ],
    "notes": "创建Web应用需要指定其名称、位置以及它将运行在哪个App Service计划上。默认会使用一个随机生成的URL。\n**所属类别:** Azure\n**模块/安装:** `Az.Websites` 模块。",
    "shell_type": "Cmdlet (Az.Websites)"
  },
  {
    "name": "Start-AzWebApp",
    "summary": "启动一个Azure Web应用。",
    "examples": [
      {
        "description": "启动一个Web应用",
        "code": "Start-AzWebApp -ResourceGroupName \"MyResourceGroup\" -Name \"MyWebApp\""
      }
    ],
    "notes": "将停止的Web应用重新投入运行。\n**所属类别:** Azure\n**模块/安装:** `Az.Websites` 模块。",
    "shell_type": "Cmdlet (Az.Websites)"
  },
  {
    "name": "Stop-AzWebApp",
    "summary": "停止一个Azure Web应用。",
    "examples": [
      {
        "description": "停止一个Web应用",
        "code": "Stop-AzWebApp -ResourceGroupName \"MyResourceGroup\" -Name \"MyWebApp\""
      }
    ],
    "notes": "停止Web应用会使其不可访问，并停止计费（某些定价层可能继续计费基础App Service计划）。\n**所属类别:** Azure\n**模块/安装:** `Az.Websites` 模块。",
    "shell_type": "Cmdlet (Az.Websites)"
  },
  {
    "name": "Restart-AzWebApp",
    "summary": "重启一个Azure Web应用。",
    "examples": [
      {
        "description": "重启一个Web应用",
        "code": "Restart-AzWebApp -ResourceGroupName \"MyResourceGroup\" -Name \"MyWebApp\""
      }
    ],
    "notes": "重启Web应用通常用于应用部署后或解决临时问题。\n**所属类别:** Azure\n**模块/安装:** `Az.Websites` 模块。",
    "shell_type": "Cmdlet (Az.Websites)"
  },
  {
    "name": "Get-AzWebAppPublishingProfile",
    "summary": "获取Azure Web应用的发布配置文件，用于FTP或Web Deploy。",
    "examples": [
      {
        "description": "获取Web应用的FTP发布配置文件",
        "code": "Get-AzWebAppPublishingProfile -ResourceGroupName \"MyResourceGroup\" -Name \"MyWebApp\" -Format Ftp"
      },
      {
        "description": "获取Web应用的Web Deploy发布配置文件",
        "code": "Get-AzWebAppPublishingProfile -ResourceGroupName \"MyResourceGroup\" -Name \"MyWebApp\" -Format VSM"
      }
    ],
    "notes": "发布配置文件包含用于部署应用程序的凭据和连接信息。\n**所属类别:** Azure\n**模块/安装:** `Az.Websites` 模块。",
    "shell_type": "Cmdlet (Az.Websites)"
  },
  {
    "name": "Set-AzWebApp",
    "summary": "修改一个Azure Web应用的配置。",
    "examples": [
      {
        "description": "设置Web应用的环境变量/应用设置",
        "code": "$app = Get-AzWebApp -ResourceGroupName \"MyResourceGroup\" -Name \"MyWebApp\"\n$app.AppSettings = @{ 'ENV_VAR1' = 'Value1'; 'DATABASE_CONN_STRING' = '...' }\n$app | Set-AzWebApp"
      },
      {
        "description": "启用Web应用的 Always On 功能",
        "code": "Set-AzWebApp -ResourceGroupName \"MyResourceGroup\" -Name \"MyWebApp\" -AlwaysOn $true"
      }
    ],
    "notes": "此命令用于更新Web应用的各种设置，如应用设置、连接字符串、Always On、HTTP版本等。通常需要先获取应用对象，修改其属性，然后通过管道将其传回 `Set-AzWebApp`。\n**所属类别:** Azure\n**模块/安装:** `Az.Websites` 模块。",
    "shell_type": "Cmdlet (Az.Websites)"
  },
  {
    "name": "Get-AzKeyVault",
    "summary": "获取一个或多个Azure Key Vault。",
    "examples": [
      {
        "description": "获取所有Key Vault",
        "code": "Get-AzKeyVault"
      },
      {
        "description": "获取特定资源组中的Key Vault",
        "code": "Get-AzKeyVault -ResourceGroupName \"MyResourceGroup\""
      },
      {
        "description": "按名称获取Key Vault",
        "code": "Get-AzKeyVault -ResourceGroupName \"MyResourceGroup\" -VaultName \"MySecretVault\""
      }
    ],
    "notes": "Azure Key Vault用于安全地存储和管理应用程序使用的密钥、秘密和证书。\n**所属类别:** Azure\n**模块/安装:** `Az.KeyVault` 模块。",
    "shell_type": "Cmdlet (Az.KeyVault)"
  },
  {
    "name": "New-AzKeyVault",
    "summary": "创建一个Azure Key Vault。",
    "examples": [
      {
        "description": "创建一个新的Key Vault (启用软删除和清除保护)",
        "code": "New-AzKeyVault -ResourceGroupName \"MyResourceGroup\" -VaultName \"MyNewSecretVault\" -Location \"eastus\" -EnableSoftDelete -EnablePurgeProtection"
      }
    ],
    "notes": "创建Key Vault时通常会启用软删除 (Soft Delete) 和清除保护 (Purge Protection)，以防止意外删除和强制删除。\n**所属类别:** Azure\n**模块/安装:** `Az.KeyVault` 模块。",
    "shell_type": "Cmdlet (Az.KeyVault)"
  },
  {
    "name": "Set-AzKeyVaultAccessPolicy",
    "summary": "设置Azure Key Vault的访问策略。",
    "examples": [
      {
        "description": "授予用户对密钥库的秘密读写权限",
        "code": "$user = Get-AzADUser -UserPrincipalName \"user@contoso.com\"\nSet-AzKeyVaultAccessPolicy -VaultName \"MySecretVault\" -ObjectId $user.Id -PermissionsToSecrets Get,List,Set,Delete"
      },
      {
        "description": "授予服务主体对密钥库的证书读写权限",
        "code": "$sp = Get-AzADServicePrincipal -DisplayName \"MyWebAppServicePrincipal\"\nSet-AzKeyVaultAccessPolicy -VaultName \"MySecretVault\" -ObjectId $sp.Id -PermissionsToCertificates Get,List,Import"
      }
    ],
    "notes": "访问策略定义了哪些身份（用户、组、服务主体）可以对Key Vault中的密钥、秘密和证书执行哪些操作。\n**所属类别:** Azure\n**模块/安装:** `Az.KeyVault` 模块。",
    "shell_type": "Cmdlet (Az.KeyVault)"
  },
  {
    "name": "Set-AzKeyVaultSecret",
    "summary": "在Azure Key Vault中设置（创建或更新）一个秘密。",
    "examples": [
      {
        "description": "创建一个新的秘密",
        "code": "Set-AzKeyVaultSecret -VaultName \"MySecretVault\" -Name \"MyApplicationSecret\" -SecretValue (ConvertTo-SecureString \"SuperSecretValue123\" -AsPlainText -Force)"
      },
      {
        "description": "更新一个现有秘密的值",
        "code": "Set-AzKeyVaultSecret -VaultName \"MySecretVault\" -Name \"MyApplicationSecret\" -SecretValue (ConvertTo-SecureString \"UpdatedSecretValue456\" -AsPlainText -Force)"
      }
    ],
    "notes": "秘密通常存储敏感的配置信息，如数据库连接字符串、API密钥等。`SecretValue` 必须是一个 `SecureString`。\n**所属类别:** Azure\n**模块/安装:** `Az.KeyVault` 模块。",
    "shell_type": "Cmdlet (Az.KeyVault)"
  },
  {
    "name": "Get-AzKeyVaultSecret",
    "summary": "从Azure Key Vault中获取一个或多个秘密。",
    "examples": [
      {
        "description": "获取指定秘密的最新版本",
        "code": "Get-AzKeyVaultSecret -VaultName \"MySecretVault\" -Name \"MyApplicationSecret\""
      },
      {
        "description": "获取秘密的明文值（慎用！）",
        "code": "(Get-AzKeyVaultSecret -VaultName \"MySecretVault\" -Name \"MyApplicationSecret\").SecretValue | ConvertFrom-SecureString -AsPlainText"
      }
    ],
    "notes": "获取秘密时，其 `SecretValue` 属性是 `SecureString` 类型。如果需要以明文形式使用，通常需要解密，但应尽量避免在不安全的环境中以明文处理。\n**所属类别:** Azure\n**模块/安装:** `Az.KeyVault` 模块。",
    "shell_type": "Cmdlet (Az.KeyVault)"
  },
  {
    "name": "Set-AzKeyVaultCertificate",
    "summary": "在Azure Key Vault中设置（导入或创建）一个证书。",
    "examples": [
      {
        "description": "导入一个PFX文件作为Key Vault证书",
        "code": "Set-AzKeyVaultCertificate -VaultName \"MySecretVault\" -Name \"MyWebAppCert\" -FilePath \"C:\\path\\to\\mycert.pfx\" -Password (ConvertTo-SecureString \"pfxPassword\" -AsPlainText -Force)"
      }
    ],
    "notes": "Key Vault可以存储和管理SSL/TLS证书，方便与App Service、负载均衡器等集成。\n**所属类别:** Azure\n**模块/安装:** `Az.KeyVault` 模块。",
    "shell_type": "Cmdlet (Az.KeyVault)"
  },
  {
    "name": "Get-AzKeyVaultCertificate",
    "summary": "从Azure Key Vault中获取一个或多个证书。",
    "examples": [
      {
        "description": "获取指定名称的最新版本证书",
        "code": "Get-AzKeyVaultCertificate -VaultName \"MySecretVault\" -Name \"MyWebAppCert\""
      }
    ],
    "notes": "此命令用于检索Key Vault中存储的证书对象。\n**所属类别:** Azure\n**模块/安装:** `Az.KeyVault` 模块。",
    "shell_type": "Cmdlet (Az.KeyVault)"
  },
  {
    "name": "Get-AzSqlServer",
    "summary": "获取一个或多个Azure SQL服务器。",
    "examples": [
      {
        "description": "获取所有SQL服务器",
        "code": "Get-AzSqlServer"
      },
      {
        "description": "获取特定资源组中的SQL服务器",
        "code": "Get-AzSqlServer -ResourceGroupName \"MyResourceGroup\""
      },
      {
        "description": "按名称获取SQL服务器",
        "code": "Get-AzSqlServer -ResourceGroupName \"MyResourceGroup\" -ServerName \"mysqldatabaseserver\""
      }
    ],
    "notes": "Azure SQL服务器是托管一个或多个Azure SQL数据库的逻辑服务器。它提供了一个管理点，但本身不存储数据。\n**所属类别:** Azure\n**模块/安装:** `Az.Sql` 模块。",
    "shell_type": "Cmdlet (Az.Sql)"
  },
  {
    "name": "New-AzSqlServer",
    "summary": "创建一个Azure SQL服务器。",
    "examples": [
      {
        "description": "创建一个新的SQL服务器",
        "code": "New-AzSqlServer -ResourceGroupName \"MyResourceGroup\" -ServerName \"mynewsqlserver\" -Location \"eastus\" -ServerVersion \"12.0\" -AdministratorLogin \"sqladmin\" -AdministratorPassword (Read-Host -AsSecureString \"Enter SQL Admin Password\")"
      }
    ],
    "notes": "创建SQL服务器时需要指定管理员登录名和密码。密码必须是 `SecureString` 类型。`ServerVersion` 12.0代表Azure SQL Database的最新版本。\n**所属类别:** Azure\n**模块/安装:** `Az.Sql` 模块。",
    "shell_type": "Cmdlet (Az.Sql)"
  },
  {
    "name": "Get-AzSqlDatabase",
    "summary": "获取一个或多个Azure SQL数据库。",
    "examples": [
      {
        "description": "获取特定SQL服务器上的所有数据库",
        "code": "Get-AzSqlDatabase -ResourceGroupName \"MyResourceGroup\" -ServerName \"mysqldatabaseserver\""
      },
      {
        "description": "按名称获取特定的SQL数据库",
        "code": "Get-AzSqlDatabase -ResourceGroupName \"MyResourceGroup\" -ServerName \"mysqldatabaseserver\" -DatabaseName \"myfirstdatabase\""
      }
    ],
    "notes": "Azure SQL Database是一个完全托管的PaaS数据库服务。\n**所属类别:** Azure\n**模块/安装:** `Az.Sql` 模块。",
    "shell_type": "Cmdlet (Az.Sql)"
  },
  {
    "name": "New-AzSqlDatabase",
    "summary": "创建一个Azure SQL数据库。",
    "examples": [
      {
        "description": "在现有SQL服务器上创建一个新的SQL数据库 (Standard S0 服务目标)",
        "code": "New-AzSqlDatabase -ResourceGroupName \"MyResourceGroup\" -ServerName \"mysqldatabaseserver\" -DatabaseName \"mynewdatabase\" -Edition \"Standard\" -RequestedServiceObjectiveName \"S0\""
      }
    ],
    "notes": "创建数据库需要指定其所在服务器、名称、版本和性能层（如Edition和RequestedServiceObjectiveName）。\n**所属类别:** Azure\n**模块/安装:** `Az.Sql` 模块。",
    "shell_type": "Cmdlet (Az.Sql)"
  },
  {
    "name": "Get-AzLog",
    "summary": "获取Azure活动日志（以前称为操作日志或审计日志）事件。",
    "examples": [
      {
        "description": "获取过去24小时的所有活动日志事件",
        "code": "Get-AzLog -StartTime (Get-Date).AddDays(-1)"
      },
      {
        "description": "获取特定资源组的活动日志事件",
        "code": "Get-AzLog -ResourceGroup \"MyResourceGroup\" -StartTime (Get-Date).AddHours(-6)"
      },
      {
        "description": "按操作名称筛选活动日志事件",
        "code": "Get-AzLog -StartTime (Get-Date).AddDays(-7) -Caller \"user@contoso.com\" -OperationName \"Microsoft.Compute/virtualMachines/start/action\""
      }
    ],
    "notes": "活动日志记录了发生在订阅层面的事件，包括Azure资源的创建、更新、删除、权限变更等。它是审计和故障排除的重要工具。\n**所属类别:** Azure\n**模块/安装:** `Az.Monitor` 模块。",
    "shell_type": "Cmdlet (Az.Monitor)"
  },
  {
    "name": "Get-AzMetricDefinition",
    "summary": "获取指定Azure资源的指标定义。",
    "examples": [
      {
        "description": "获取一个虚拟机的所有可用指标定义",
        "code": "$vm = Get-AzVM -ResourceGroupName \"MyResourceGroup\" -Name \"MyVM\"\nGet-AzMetricDefinition -ResourceId $vm.Id"
      }
    ],
    "notes": "指标定义描述了资源可以报告的性能计数器，如CPU使用率、网络流量等。这是获取实际指标数据的前提。\n**所属类别:** Azure\n**模块/安装:** `Az.Monitor` 模块。",
    "shell_type": "Cmdlet (Az.Monitor)"
  },
  {
    "name": "Get-AzMetric",
    "summary": "获取指定Azure资源的指标数据。",
    "examples": [
      {
        "description": "获取虚拟机过去一小时的CPU使用率",
        "code": "$vm = Get-AzVM -ResourceGroupName \"MyResourceGroup\" -Name \"MyVM\"\nGet-AzMetric -ResourceId $vm.Id -MetricName \"CpuUtilization\" -StartTime (Get-Date).AddHours(-1) -TimeGrain ([System.TimeSpan]::FromMinutes(5))"
      }
    ],
    "notes": "此命令用于检索具体的性能指标数据，常用于监控和诊断。`MetricName` 从 `Get-AzMetricDefinition` 中获取。\n**所属类别:** Azure\n**模块/安装:** `Az.Monitor` 模块。",
    "shell_type": "Cmdlet (Az.Monitor)"
  },
  {
    "name": "Get-AzContainerRegistry",
    "summary": "获取一个或多个Azure容器注册表 (ACR)。",
    "examples": [
      {
        "description": "获取所有容器注册表",
        "code": "Get-AzContainerRegistry"
      },
      {
        "description": "按名称获取容器注册表",
        "code": "Get-AzContainerRegistry -ResourceGroupName \"MyResourceGroup\" -Name \"mycontainerregistry\""
      }
    ],
    "notes": "Azure容器注册表是用于存储和管理Docker容器映像和相关工件的托管注册表服务。\n**所属类别:** Azure\n**模块/安装:** `Az.ContainerRegistry` 模块。",
    "shell_type": "Cmdlet (Az.ContainerRegistry)"
  },
  {
    "name": "New-AzContainerRegistry",
    "summary": "创建一个Azure容器注册表 (ACR)。",
    "examples": [
      {
        "description": "创建一个新的容器注册表 (Basic SKU)",
        "code": "New-AzContainerRegistry -ResourceGroupName \"MyResourceGroup\" -Name \"mynewcontainerregistry\" -Location \"eastus\" -Sku Basic"
      }
    ],
    "notes": "ACR支持多种SKU (Basic, Standard, Premium)，提供不同级别的功能和性能。\n**所属类别:** Azure\n**模块/安装:** `Az.ContainerRegistry` 模块。",
    "shell_type": "Cmdlet (Az.ContainerRegistry)"
  },
  {
    "name": "Get-AzContainerGroup",
    "summary": "获取一个或多个Azure容器实例 (ACI) 组。",
    "examples": [
      {
        "description": "获取所有容器组",
        "code": "Get-AzContainerGroup"
      },
      {
        "description": "按名称获取容器组",
        "code": "Get-AzContainerGroup -ResourceGroupName \"MyResourceGroup\" -Name \"mycontainerapp\""
      }
    ],
    "notes": "Azure容器实例允许你无需管理虚拟机即可快速部署和运行容器。容器组是一组在同一主机上启动的容器。\n**所属类别:** Azure\n**模块/安装:** `Az.ContainerInstance` 模块。",
    "shell_type": "Cmdlet (Az.ContainerInstance)"
  },
  {
    "name": "New-AzContainerGroup",
    "summary": "创建一个Azure容器实例 (ACI) 组。",
    "examples": [
      {
        "description": "部署一个包含单个Nginx容器的容器组",
        "code": "New-AzContainerGroup -ResourceGroupName \"MyResourceGroup\" -Name \"mynginxcontainer\" -Location \"eastus\" -Container \"nginx\" -Image \"nginx\" -Port 80 -OsType Linux -IpAddressType Public -DnsNameLabel \"mynginxapp\""
      },
      {
        "description": "部署一个带环境变量的容器组",
        "code": "New-AzContainerGroup -ResourceGroupName \"MyResourceGroup\" -Name \"myenvcontainer\" -Location \"eastus\" -Container \"myenvapp\" -Image \"microsoft/azure-cli\" -OsType Linux -EnvironmentVariable @{\"MY_VAR\"=\"Value\"; \"ANOTHER_VAR\"=\"Hello\"}"
      }
    ],
    "notes": "ACI提供了一种在Azure上运行容器的快速方式，无需配置完整的Kubernetes集群。\n**所属类别:** Azure\n**模块/安装:** `Az.ContainerInstance` 模块。",
    "shell_type": "Cmdlet (Az.ContainerInstance)"
  },
  {
    "name": "Get-AzAksCluster",
    "summary": "获取一个或多个Azure Kubernetes Service (AKS) 集群。",
    "examples": [
      {
        "description": "获取所有AKS集群",
        "code": "Get-AzAksCluster"
      },
      {
        "description": "按名称获取AKS集群",
        "code": "Get-AzAksCluster -ResourceGroupName \"MyResourceGroup\" -Name \"myakscluster\""
      }
    ],
    "notes": "Azure Kubernetes Service (AKS) 是用于部署、管理和扩展容器化应用程序的托管Kubernetes服务。\n**所属类别:** Azure\n**模块/安装:** `Az.Aks` 模块。",
    "shell_type": "Cmdlet (Az.Aks)"
  },
  {
    "name": "New-AzAksCluster",
    "summary": "创建一个Azure Kubernetes Service (AKS) 集群。",
    "examples": [
      {
        "description": "创建一个具有单个节点池的AKS集群",
        "code": "New-AzAksCluster -ResourceGroupName \"MyResourceGroup\" -Name \"mynewakscluster\" -Location \"eastus\" -NodeVMSize \"Standard_DS2_v2\" -NodeCount 2 -DnsNamePrefix \"aks-demo\" -ServicePrincipalClientId \"<AppId>\" -ServicePrincipalClientSecret (ConvertTo-SecureString \"<Secret>\" -AsPlainText -Force)"
      }
    ],
    "notes": "创建AKS集群是一个复杂的操作，需要服务主体或托管标识进行身份验证。示例中使用了服务主体。\n**所属类别:** Azure\n**模块/安装:** `Az.Aks` 模块。",
    "shell_type": "Cmdlet (Az.Aks)"
  },
  {
    "name": "Start-DscConfiguration",
    "summary": "将Desired State Configuration (DSC) 配置应用到节点。",
    "examples": [
      {
        "description": "应用一个本地DSC配置，等待完成并显示详细信息",
        "code": "Start-DscConfiguration -Path \"C:\\DSC\\MyConfig\" -Wait -Verbose"
      },
      {
        "description": "在远程节点上应用DSC配置",
        "code": "Invoke-Command -ComputerName \"RemoteServer\" -ScriptBlock { Start-DscConfiguration -Path \"C:\\DSC\\MyConfig\" -Wait -Verbose }"
      }
    ],
    "notes": "DSC是PowerShell的配置管理平台，允许你定义和维护服务器的期望状态。在应用配置之前，你需要使用 `Configuration` 关键字来编译 `.mof` 文件。\n**所属类别:** Windows/General PowerShell\n**模块/安装:** `PSDesiredStateConfiguration` (内置模块)。",
    "shell_type": "Cmdlet (PSDesiredStateConfiguration)"
  },
  {
    "name": "Test-DscConfiguration",
    "summary": "测试本地节点是否符合DSC配置的期望状态。",
    "examples": [
      {
        "description": "测试当前配置的合规性",
        "code": "Test-DscConfiguration"
      }
    ],
    "notes": "此命令返回一个布尔值，指示当前系统的状态是否与应用过的DSC配置一致。\n**所属类别:** Windows/General PowerShell\n**模块/安装:** `PSDesiredStateConfiguration` (内置模块)。",
    "shell_type": "Cmdlet (PSDesiredStateConfiguration)"
  },
  {
    "name": "Publish-DscConfiguration",
    "summary": "将DSC配置或资源发布到DSC拉取服务器。",
    "examples": [
      {
        "description": "发布一个DSC配置到拉取服务器",
        "code": "Publish-DscConfiguration -Path \"C:\\DSC\\MyConfig\" -ConfigurationPath \"\\\\PullServer\\DscShare\""
      }
    ],
    "notes": "拉取服务器是集中存储和管理DSC配置的端点，节点可以从中获取配置并应用。\n**所属类别:** Windows/General PowerShell\n**模块/安装:** `PSDesiredStateConfiguration` (内置模块)。",
    "shell_type": "Cmdlet (PSDesiredStateConfiguration)"
  },
  {
    "name": "Invoke-Pester",
    "summary": "运行Pester测试。Pester是PowerShell的单元测试和集成测试框架。",
    "examples": [
      {
        "description": "运行当前目录或子目录中的所有测试文件 (以 .Tests.ps1 结尾)",
        "code": "Invoke-Pester"
      },
      {
        "description": "运行指定路径下的所有测试",
        "code": "Invoke-Pester -Path \"C:\\Scripts\\MyModule.Tests.ps1\""
      },
      {
        "description": "以详细模式运行测试，并生成JUnit XML结果报告",
        "code": "Invoke-Pester -Path \".\" -Verbose -OutputFormat JUnitXml -OutputPath \"TestResults.xml\""
      }
    ],
    "notes": "Pester是编写可维护和可靠PowerShell脚本的关键工具。它允许你通过编写测试用例来验证脚本的行为。\n**所属类别:** General PowerShell\n**模块/安装:** `Pester` 模块。如果未安装，请运行 `Install-Module Pester -Scope CurrentUser`。",
    "shell_type": "Cmdlet (Pester)"
  },
  {
    "name": "ConvertTo-SecureString",
    "summary": "将纯文本字符串转换为安全字符串 (SecureString)。",
    "examples": [
      {
        "description": "将纯文本密码转换为SecureString (在脚本中通常不推荐直接使用-AsPlainText)",
        "code": "$password = ConvertTo-SecureString \"MyComplexPassword\" -AsPlainText -Force"
      },
      {
        "description": "从用户输入获取SecureString (推荐方式)",
        "code": "$securePassword = Read-Host -Prompt \"Enter password\" -AsSecureString"
      }
    ],
    "notes": "SecureString是一种加密的字符串类型，用于存储敏感信息（如密码），防止其在内存中以明文形式存在。它不能直接用于字符串操作，通常用于传递给需要凭据的Cmdlet。\n**所属类别:** Windows/General PowerShell\n**模块/安装:** 内置Cmdlet。",
    "shell_type": "Cmdlet (Microsoft.PowerShell.Security)"
  },
  {
    "name": "ConvertFrom-SecureString",
    "summary": "将安全字符串 (SecureString) 转换为纯文本字符串。",
    "examples": [
      {
        "description": "将SecureString转换为纯文本 (极不推荐用于生产环境，仅限调试或特定场景)",
        "code": "$password = (Get-Credential).Password\n$plainTextPassword = $password | ConvertFrom-SecureString -AsPlainText"
      }
    ],
    "notes": "此命令将SecureString解密为纯文本。由于安全性风险，**极不推荐**在生产环境中以明文形式处理或存储密码。通常只在特定调试场景下谨慎使用。\n**所属类别:** Windows/General PowerShell\n**模块/安装:** 内置Cmdlet。",
    "shell_type": "Cmdlet (Microsoft.PowerShell.Security)"
  },
  {
    "name": "Protect-CmsMessage",
    "summary": "使用CMS (Cryptographic Message Syntax) 加密内容。",
    "examples": [
      {
        "description": "使用证书加密字符串，只有持有私钥的用户才能解密",
        "code": "# 假设你有一个名为 'EncryptionCert' 的证书在 'CurrentUser\\My' 存储中\n$cert = Get-ChildItem Cert:\\CurrentUser\\My\\ -DnsName \"EncryptionCert\"\n\"This is a secret message.\" | Protect-CmsMessage -To $cert -OutFile \"secret.txt\""
      }
    ],
    "notes": "此命令允许你加密数据，确保只有授权用户才能解密。它使用公钥/私钥加密，是一种比SecureString更强大的加密形式，因为加密后的数据可以安全地存储或传输。\n**所属类别:** Windows/General PowerShell\n**模块/安装:** 内置Cmdlet。",
    "shell_type": "Cmdlet (Microsoft.PowerShell.Security)"
  },
  {
    "name": "Unprotect-CmsMessage",
    "summary": "解密使用CMS (Cryptographic Message Syntax) 加密的内容。",
    "examples": [
      {
        "description": "解密一个CMS加密的文件",
        "code": "Unprotect-CmsMessage -Path \"secret.txt\""
      }
    ],
    "notes": "此命令用于解密由 `Protect-CmsMessage` 加密的数据。只有拥有相应私钥的用户才能成功解密。\n**所属类别:** Windows/General PowerShell\n**模块/安装:** 内置Cmdlet。",
    "shell_type": "Cmdlet (Microsoft.PowerShell.Security)"
  },
  {
    "name": "Add-Type",
    "summary": "向当前PowerShell会话添加.NET Framework类型 (C#或VB.NET代码，或程序集)。",
    "examples": [
      {
        "description": "通过程序集名称添加已安装的.NET程序集",
        "code": "Add-Type -AssemblyName \"System.Windows.Forms\""
      },
      {
        "description": "通过内联C#代码定义和添加一个新类",
        "code": "Add-Type -TypeDefinition @\"\npublic class MyHelper {\n    public static string ReverseString(string s) {\n        char[] charArray = s.ToCharArray();\n        System.Array.Reverse(charArray);\n        return new string(charArray);\n    }\n}\n\"@\n\n[MyHelper]::ReverseString(\"Hello\")"
      },
      {
        "description": "加载DLL文件",
        "code": "Add-Type -Path \"C:\\path\\to\\MyCustomLibrary.dll\""
      }
    ],
    "notes": "`Add-Type` 是PowerShell与.NET Framework深度集成的关键。它允许你扩展PowerShell的功能，调用复杂的.NET方法，或创建自定义的.NET类型来解决特定的编程问题。对于没有现成Cmdlet的复杂任务非常有用。\n**所属类别:** General PowerShell\n**模块/安装:** 内置Cmdlet。",
    "shell_type": "Cmdlet (Microsoft.PowerShell.Utility)"
  }
]